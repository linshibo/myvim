
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet hd "file head"
/*=========================================================================       
 *		Filename: `!v expand("%:t")`
 * 		Author: francisco 
 *		Created:  `!v strftime("%Y-%m-%d %H:%M:%S")`
 *		Description: ${1:nothing}
 *
 * =========================================================================
 */
endsnippet

snippet ih
	#include "`!v expand('%:t:r')`.h"
endsnippet

snippet ihpp
	#include "`!v expand('%:t:r')`.hpp"
endsnippet

snippet ff
	#ifndef `!v toupper(substitute(expand("%:t"),'\.','_',"g"))`
	#define `!v toupper(substitute(expand("%:t"),'\.','_',"g"))`

	${1:/*code*/}

	#endif /*`!v toupper(substitute(expand("%:t"),'\.','_',"g"))`*/
endsnippet

snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
endsnippet

snippet is
	#include <${1:stdio}.h>${2}
endsnippet

snippet in "include"
	#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet de
	#define 
endsnippet

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
endsnippet

snippet #if
	#if ${1:FOO}
		${2}
	#endif
endsnippet

snippet if
	if(${1:/* condition */}) {
		${2:/* code */}
	}
endsnippet

snippet ife 
	if(${1:/* condition */}) {
		${2:/* code */}
	}else {
		${3:/*code*/}
	}
endsnippet

snippet eif
	else if(${1:/* condition */}){
		${2:/*code*/}
	}
endsnippet

snippet el
	else{
		${1:/*code*/}
	}
# Tertiary conditional
endsnippet

snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet dowhile
	do {
		${2:/* code */}
	} while (${1:/* condition */});
endsnippet

snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
endsnippet

snippet for
	for(uint32_t ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
endsnippet

snippet forr
	for(uint32_t ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
endsnippet

snippet switch
	switch(${1:condition}){
		case ${2:value}:
			break;
		default:
			break;
	}
endsnippet

snippet case
	case ${1:value}:
		break;
endsnippet

snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
endsnippet

snippet fund
	${1:void} ${2:function_name}(${3});${4}
endsnippet

snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

snippet stru "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
    ${0:/* data */}
};
endsnippet

snippet tds
	typedef struct ${1:name}{
		${2:/* data */}
	} ${3:$1_t};
endsnippet

snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
endsnippet

snippet "print" "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet .
	[${1}]${2}
endsnippet

snippet un
	unsigned
endsnippet

snippet log
	DEBUG_LOG("${1:content}")
endsnippet

snippet klog
	KDEBUG_LOG(${1:uid},"${2:content}")
endsnippet

snippet elog
	KERROR_LOG(${1:uid},"${2:content}")
endsnippet

snippet u64
	uint64_t
endsnippet

snippet u32
	uint32_t
endsnippet

snippet u16
	uint16_t
endsnippet

snippet u8
	uint8_t
endsnippet

snippet null
	NULL
endsnippet

snippet pin
	p_in
endsnippet

snippet pout
	p_out
endsnippet

snippet def "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL:code}$0
#endif
endsnippet

# vim:ft=snippets:
