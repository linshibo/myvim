# -*- coding: utf-8 -*-

hexchars="0123456789ABCDEF"
def dit2hex(ch):
	i=ord(ch) # get its integral value.
	leftnib=i>>4
	rightnib=i & 0xf
	leftchar=hexchars[leftnib]
	rightchar=hexchars[rightnib]
	return leftchar+rightchar+" "
	
def bin2hex(str):
	retvalue=""  # return value is empty until we add to it...
	for s in str:
		hexchars=dit2hex(s)
		retvalue=retvalue+hexchars
		pass
	return retvalue

		
class allocate_skill_exp_in :
	"""
参数列表:
	/* 技能ID */
	#类型:uint32
	public skillid;

	/* 分配的经验 */
	#类型:uint32
	public exp;


	"""

	def read_from_buf(self, ba ):
		self.skillid=ba.read_uint32();
		if ( self.skillid== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skillid)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能ID */"""
		print tabs+"[skillid]=%s"%(str(self.skillid))
		print tabs+"""/* 分配的经验 */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		
		pass;
	




class allocate_skill_exp_out :
	"""
参数列表:
	/* 技能ID */
	#类型:uint32
	public skillid;

	/* 技能等级 */
	#类型:uint32
	public skill_level;

	/* 当前技能经验 */
	#类型:uint32
	public skill_exp;


	"""

	def read_from_buf(self, ba ):
		self.skillid=ba.read_uint32();
		if ( self.skillid== None): return False;
		self.skill_level=ba.read_uint32();
		if ( self.skill_level== None): return False;
		self.skill_exp=ba.read_uint32();
		if ( self.skill_exp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skillid)):return False;
		if ( not ba.write_uint32(self.skill_level)):return False;
		if ( not ba.write_uint32(self.skill_exp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能ID */"""
		print tabs+"[skillid]=%s"%(str(self.skillid))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skill_level]=%s"%(str(self.skill_level))
		print tabs+"""/* 当前技能经验 */"""
		print tabs+"[skill_exp]=%s"%(str(self.skill_exp))
		
		pass;
	




class apply_for_join_btr_team_new_in :
	"""
参数列表:
	/* 队伍id */
	#类型:uint32
	public teamid;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 队伍id */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		
		pass;
	




class apply_for_join_btr_team_new_out :
	"""
参数列表:
	/* 地图信息 */
	#类型:uint64
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint64();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint64(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图信息 */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class box_active_t :
	"""
参数列表:
	/* 宝箱id */
	#类型:uint32
	public boxid;

	/*  */
	#类型:uint32
	public box_type;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;


	"""

	def read_from_buf(self, ba ):
		self.boxid=ba.read_uint32();
		if ( self.boxid== None): return False;
		self.box_type=ba.read_uint32();
		if ( self.box_type== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.boxid)):return False;
		if ( not ba.write_uint32(self.box_type)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宝箱id */"""
		print tabs+"[boxid]=%s"%(str(self.boxid))
		print tabs+"""/*  */"""
		print tabs+"[box_type]=%s"%(str(self.box_type))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		
		pass;
	




class check_spacetime_code_in :
	"""
参数列表:
	/* 时空密码 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""

	def read_from_buf(self, ba ):
		self.code=ba.read_buf(32);
		if( self.code==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.code,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 时空密码 */"""
		tmp_str=str(self.code);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[code]=%s"%(tmp_str)
		
		pass;
	




class check_spacetime_code_out :
	"""
参数列表:
	/*礼物*/
	#变长数组,最大长度:100, 类型:uint32_t
	public gifts =array();


	"""

	def read_from_buf(self, ba ):

		gifts_count= ba.read_uint32(); 
		if ( gifts_count==None ): return False;
		self.gifts=[];
		for i in range(gifts_count):
			self.gifts.append(ba.read_uint32());
			if ( self.gifts[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		gifts_count=len(self.gifts);
		ba.write_uint32(gifts_count);
		for i in range(gifts_count):
			if ( not ba.write_uint32(self.gifts[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#礼物"
		print tabs+"[gifts]=>{";
		for i in range(len(self.gifts)):
			print tabs+"    [%d]="%(i)+str(self.gifts[i]); 

		print tabs+'}'
		
		pass;
	




class check_vip_rand_info_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public vid;


	"""

	def read_from_buf(self, ba ):
		self.vid=ba.read_uint32();
		if ( self.vid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.vid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[vid]=%s"%(str(self.vid))
		
		pass;
	




class cli_accept_add_team_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_accept_challenge_in :
	"""
参数列表:
	/* 时间戳 */
	#类型:uint32
	public timestamp;

	/* 接受挑战的用户id */
	#类型:uint32
	public userid;

	/* 与该用户pk次数 */
	#类型:uint32
	public pkcnt;


	"""

	def read_from_buf(self, ba ):
		self.timestamp=ba.read_uint32();
		if ( self.timestamp== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.pkcnt=ba.read_uint32();
		if ( self.pkcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.timestamp)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.pkcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 时间戳 */"""
		print tabs+"[timestamp]=%s"%(str(self.timestamp))
		print tabs+"""/* 接受挑战的用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 与该用户pk次数 */"""
		print tabs+"[pkcnt]=%s"%(str(self.pkcnt))
		
		pass;
	




class stru_item :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_active_cloth_potential_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public clothid;

	/**/
	#变长数组,最大长度:4, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"#"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_active_cloth_potential_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public pangu_energy;

	/*  */
	#类型:uint32
	public clothid;

	/*  */
	#类型:uint32
	public cloth_new_attr;

	/*  */
	#类型:uint32
	public value;

	/**/
	#变长数组,最大长度:4, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.pangu_energy=ba.read_uint32();
		if ( self.pangu_energy== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.cloth_new_attr=ba.read_uint32();
		if ( self.cloth_new_attr== None): return False;
		self.value=ba.read_uint32();
		if ( self.value== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pangu_energy)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.cloth_new_attr)):return False;
		if ( not ba.write_uint32(self.value)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[pangu_energy]=%s"%(str(self.pangu_energy))
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/*  */"""
		print tabs+"[cloth_new_attr]=%s"%(str(self.cloth_new_attr))
		print tabs+"""/*  */"""
		print tabs+"[value]=%s"%(str(self.value))
		print tabs+"#"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_add_base_attr_in :
	"""
参数列表:
	/* 体力 */
	#类型:uint32
	public physique;

	/* 力量 */
	#类型:uint32
	public strength;

	/* 耐力 */
	#类型:uint32
	public endurance;

	/* 速度 */
	#类型:uint32
	public quick;

	/* 智力 */
	#类型:uint32
	public intelligence;


	"""

	def read_from_buf(self, ba ):
		self.physique=ba.read_uint32();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint32();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint32();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint32();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint32();
		if ( self.intelligence== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.physique)):return False;
		if ( not ba.write_uint32(self.strength)):return False;
		if ( not ba.write_uint32(self.endurance)):return False;
		if ( not ba.write_uint32(self.quick)):return False;
		if ( not ba.write_uint32(self.intelligence)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		
		pass;
	




class cli_add_friend_in :
	"""
参数列表:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 好友ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_add_item_feed_count_in :
	"""
参数列表:
	/* 物品id，id=290004 */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id，id=290004 */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_add_item_feed_count_out :
	"""
参数列表:
	/* 物品id */
	#类型:uint32
	public itemid;

	/* 总次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 总次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_add_npc_to_team_in :
	"""
参数列表:
	/* 要加入队伍的npc */
	#类型:uint32
	public npcid;


	"""

	def read_from_buf(self, ba ):
		self.npcid=ba.read_uint32();
		if ( self.npcid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.npcid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要加入队伍的npc */"""
		print tabs+"[npcid]=%s"%(str(self.npcid))
		
		pass;
	




class cli_add_relation_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_add_relation_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 类型1加徒弟 2加师父 */
	#类型:uint32
	public type;

	/* 校验字符串 */
	#定长数组,长度:32, 类型:char 
	public session ;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.session=ba.read_buf(32);
		if( self.session==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.session,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 类型1加徒弟 2加师父 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 校验字符串 */"""
		tmp_str=str(self.session);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[session]=%s"%(tmp_str)
		
		pass;
	




class cli_add_session_in :
	"""
参数列表:
	/* Session类型（1、VIP代签 2、校巴代签） */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* Session类型（1、VIP代签 2、校巴代签） */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_add_session_out :
	"""
参数列表:
	/* Session类型 */
	#类型:uint32
	public type;

	/* session */
	#定长数组,长度:32, 类型:char 
	public session ;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.session=ba.read_buf(32);
		if( self.session==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.session,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* Session类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* session */"""
		tmp_str=str(self.session);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[session]=%s"%(tmp_str)
		
		pass;
	




class cli_allocate_exp_in :
	"""
参数列表:
	/* 宠物ID（0表示用户自己） */
	#类型:uint32
	public petid;

	/* 要分配的经验数量 */
	#类型:uint32
	public exp;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（0表示用户自己） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 要分配的经验数量 */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		
		pass;
	




class cli_allocate_exp_out :
	"""
参数列表:
	/* 宠物ID（0表示自己） */
	#类型:uint32
	public petid;

	/* 被分配对象的等级 */
	#类型:uint32
	public level;

	/* 被分配对象的经验 */
	#类型:uint32
	public exp;

	/* 被分配对象的剩余属性点 */
	#类型:uint32
	public attr_add;

	/* 当前血量 */
	#类型:uint32
	public hp;

	/* 最大血量 */
	#类型:uint32
	public hpmax;

	/* 当前魔法 */
	#类型:uint32
	public mp;

	/* 最大mp */
	#类型:uint32
	public mpmax;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;
		self.attr_add=ba.read_uint32();
		if ( self.attr_add== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		if ( not ba.write_uint32(self.attr_add)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（0表示自己） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 被分配对象的等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 被分配对象的经验 */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		print tabs+"""/* 被分配对象的剩余属性点 */"""
		print tabs+"[attr_add]=%s"%(str(self.attr_add))
		print tabs+"""/* 当前血量 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 最大血量 */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/* 当前魔法 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 最大mp */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		
		pass;
	




class cli_apply_pk_in :
	"""
参数列表:
	/* 匹配类型(0单人pk, 1组队pk) */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 匹配类型(0单人pk, 1组队pk) */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_apply_pk_out :
	"""
参数列表:
	/* 结果（0失败、1等待、2匹配成功） */
	#类型:uint32
	public result;


	"""

	def read_from_buf(self, ba ):
		self.result=ba.read_uint32();
		if ( self.result== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.result)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 结果（0失败、1等待、2匹配成功） */"""
		print tabs+"[result]=%s"%(str(self.result))
		
		pass;
	




class cli_battle_attack_in :
	"""
参数列表:
	/* 0，表示发招者是用户；1，宠物 */
	#类型:uint32
	public sorp;

	/* 0，己方；1，对方 */
	#类型:uint32
	public atk_team;

	/* [0,9]表示位置信息 */
	#类型:uint32
	public atk_pos;

	/* 使用技能 */
	#类型:uint32
	public atk_type;

	/* 技能等级 */
	#类型:uint32
	public atk_level;


	"""

	def read_from_buf(self, ba ):
		self.sorp=ba.read_uint32();
		if ( self.sorp== None): return False;
		self.atk_team=ba.read_uint32();
		if ( self.atk_team== None): return False;
		self.atk_pos=ba.read_uint32();
		if ( self.atk_pos== None): return False;
		self.atk_type=ba.read_uint32();
		if ( self.atk_type== None): return False;
		self.atk_level=ba.read_uint32();
		if ( self.atk_level== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.sorp)):return False;
		if ( not ba.write_uint32(self.atk_team)):return False;
		if ( not ba.write_uint32(self.atk_pos)):return False;
		if ( not ba.write_uint32(self.atk_type)):return False;
		if ( not ba.write_uint32(self.atk_level)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0，表示发招者是用户；1，宠物 */"""
		print tabs+"[sorp]=%s"%(str(self.sorp))
		print tabs+"""/* 0，己方；1，对方 */"""
		print tabs+"[atk_team]=%s"%(str(self.atk_team))
		print tabs+"""/* [0,9]表示位置信息 */"""
		print tabs+"[atk_pos]=%s"%(str(self.atk_pos))
		print tabs+"""/* 使用技能 */"""
		print tabs+"[atk_type]=%s"%(str(self.atk_type))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[atk_level]=%s"%(str(self.atk_level))
		
		pass;
	




class cli_battle_swap_pet_in :
	"""
参数列表:
	/* 宠物ID（为0时表示召回宠物） */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（为0时表示召回宠物） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_bklist_add_in :
	"""
参数列表:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 好友ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_bklist_del_in :
	"""
参数列表:
	/* 好友ID */
	#类型:uint32
	public userid;

	/* 0，拒绝；1，接受 */
	#类型:uint8
	public accept;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.accept=ba.read_uint8();
		if ( self.accept== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint8(self.accept)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 好友ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 0，拒绝；1，接受 */"""
		print tabs+"[accept]=%s"%(str(self.accept))
		
		pass;
	




class cli_box_activated_out :
	"""
参数列表:
	/* 宝箱id */
	#类型:uint32
	public boxid;

	/* 宝箱类型 */
	#类型:uint32
	public type;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;


	"""

	def read_from_buf(self, ba ):
		self.boxid=ba.read_uint32();
		if ( self.boxid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.boxid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宝箱id */"""
		print tabs+"[boxid]=%s"%(str(self.boxid))
		print tabs+"""/* 宝箱类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		
		pass;
	




class cli_box_opened_out :
	"""
参数列表:
	/* 打开宝箱的用户ID */
	#类型:uint32
	public userid;

	/* 被打开的宝箱 */
	#类型:uint32
	public boxid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.boxid=ba.read_uint32();
		if ( self.boxid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.boxid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 打开宝箱的用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 被打开的宝箱 */"""
		print tabs+"[boxid]=%s"%(str(self.boxid))
		
		pass;
	




class cli_btrtem_add_mbr_in :
	"""
参数列表:
	/* 邀请的用户id */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邀请的用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_btrtem_apply_in :
	"""
参数列表:
	/* 战队id */
	#类型:uint32
	public teamid;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 战队id */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		
		pass;
	




class cli_btrtem_enter_map_out :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* X坐标 */
	#类型:uint32
	public x;

	/* Y坐标 */
	#类型:uint32
	public y;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.x=ba.read_uint32();
		if ( self.x== None): return False;
		self.y=ba.read_uint32();
		if ( self.y== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.x)):return False;
		if ( not ba.write_uint32(self.y)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* X坐标 */"""
		print tabs+"[x]=%s"%(str(self.x))
		print tabs+"""/* Y坐标 */"""
		print tabs+"[y]=%s"%(str(self.y))
		
		pass;
	




class cli_btrtem_kick_mbr_in :
	"""
参数列表:
	/* 被踢用户id */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 被踢用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_buy_cloth_in :
	"""
参数列表:
	/* 商店ID */
	#类型:uint32
	public shopid;

	/* 衣服类型 */
	#类型:uint32
	public type_id;

	/* 衣服的级别 */
	#类型:uint32
	public level;


	"""

	def read_from_buf(self, ba ):
		self.shopid=ba.read_uint32();
		if ( self.shopid== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.shopid)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商店ID */"""
		print tabs+"[shopid]=%s"%(str(self.shopid))
		print tabs+"""/* 衣服类型 */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/* 衣服的级别 */"""
		print tabs+"[level]=%s"%(str(self.level))
		
		pass;
	




class cli_buy_cloth_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public gettime;

	/*  */
	#类型:uint32
	public clothtype;

	/*  */
	#类型:uint32
	public gridid;

	/*  */
	#类型:uint32
	public hpmax;

	/*  */
	#类型:uint32
	public mpmax;

	/*  */
	#类型:uint16
	public level;

	/*  */
	#类型:uint16
	public duration;

	/*  */
	#类型:uint16
	public mduration;

	/*  */
	#类型:uint32
	public atk;

	/*  */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdef;

	/*  */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit;

	/*  */
	#类型:uint16
	public avoid;

	/*  */
	#类型:uint16
	public critical_attack;

	/*  */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/*  */
	#类型:uint16
	public rconfusion;

	/*  */
	#类型:uint16
	public rstone;

	/*  */
	#类型:uint16
	public rfreeze;

	/*  */
	#类型:uint16
	public rsleep;

	/*  */
	#类型:uint16
	public rcurse;

	/*  */
	#类型:uint16
	public fight_back;

	/*  */
	#类型:uint16
	public strike_back;

	/*  */
	#类型:uint16
	public strike_back_hurt;

	/*  */
	#类型:uint16
	public rcritical_attack;

	/*  */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint16
	public quality;

	/*  */
	#类型:uint32
	public xiaomee;

	/*  */
	#类型:uint32
	public xiaomee_add;


	"""

	def read_from_buf(self, ba ):
		self.gettime=ba.read_uint32();
		if ( self.gettime== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.gridid=ba.read_uint32();
		if ( self.gridid== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.level=ba.read_uint16();
		if ( self.level== None): return False;
		self.duration=ba.read_uint16();
		if ( self.duration== None): return False;
		self.mduration=ba.read_uint16();
		if ( self.mduration== None): return False;
		self.atk=ba.read_uint32();
		if ( self.atk== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdef=ba.read_uint32();
		if ( self.mdef== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit=ba.read_uint16();
		if ( self.hit== None): return False;
		self.avoid=ba.read_uint16();
		if ( self.avoid== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.quality=ba.read_uint16();
		if ( self.quality== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.xiaomee_add=ba.read_uint32();
		if ( self.xiaomee_add== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.gettime)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.gridid)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint16(self.level)):return False;
		if ( not ba.write_uint16(self.duration)):return False;
		if ( not ba.write_uint16(self.mduration)):return False;
		if ( not ba.write_uint32(self.atk)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdef)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit)):return False;
		if ( not ba.write_uint16(self.avoid)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint16(self.quality)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.xiaomee_add)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[gettime]=%s"%(str(self.gettime))
		print tabs+"""/*  */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/*  */"""
		print tabs+"[gridid]=%s"%(str(self.gridid))
		print tabs+"""/*  */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/*  */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		print tabs+"""/*  */"""
		print tabs+"[mduration]=%s"%(str(self.mduration))
		print tabs+"""/*  */"""
		print tabs+"[atk]=%s"%(str(self.atk))
		print tabs+"""/*  */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdef]=%s"%(str(self.mdef))
		print tabs+"""/*  */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit]=%s"%(str(self.hit))
		print tabs+"""/*  */"""
		print tabs+"[avoid]=%s"%(str(self.avoid))
		print tabs+"""/*  */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/*  */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/*  */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/*  */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/*  */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/*  */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/*  */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/*  */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/*  */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/*  */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[quality]=%s"%(str(self.quality))
		print tabs+"""/*  */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/*  */"""
		print tabs+"[xiaomee_add]=%s"%(str(self.xiaomee_add))
		
		pass;
	




class cli_buy_normal_item_in :
	"""
参数列表:
	/* 商店ID */
	#类型:uint32
	public shopid;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.shopid=ba.read_uint32();
		if ( self.shopid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.shopid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商店ID */"""
		print tabs+"[shopid]=%s"%(str(self.shopid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_buy_normal_item_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 包裹中该物品的数量 */
	#类型:uint32
	public count;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 花费 */
	#类型:uint32
	public cost;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 包裹中该物品的数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		
		pass;
	




class cli_buy_skill_in :
	"""
参数列表:
	/* 商店ID */
	#类型:uint32
	public shopid;

	/* 技能id */
	#类型:uint32
	public skill_id;


	"""

	def read_from_buf(self, ba ):
		self.shopid=ba.read_uint32();
		if ( self.shopid== None): return False;
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.shopid)):return False;
		if ( not ba.write_uint32(self.skill_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商店ID */"""
		print tabs+"[shopid]=%s"%(str(self.shopid))
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		
		pass;
	




class cli_buy_skill_out :
	"""
参数列表:
	/* 技能id */
	#类型:uint32
	public skill_id;

	/* 技能等级 */
	#类型:uint8
	public skill_lv;

	/* 技能经验 */
	#类型:uint32
	public skill_exp;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 花费 */
	#类型:uint32
	public cost;


	"""

	def read_from_buf(self, ba ):
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_lv=ba.read_uint8();
		if ( self.skill_lv== None): return False;
		self.skill_exp=ba.read_uint32();
		if ( self.skill_exp== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint8(self.skill_lv)):return False;
		if ( not ba.write_uint32(self.skill_exp)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skill_lv]=%s"%(str(self.skill_lv))
		print tabs+"""/* 技能经验 */"""
		print tabs+"[skill_exp]=%s"%(str(self.skill_exp))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		
		pass;
	




class cli_cancel_challenge_out :
	"""
参数列表:
	/* 用户ID号（挑战方队长id） */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号（挑战方队长id） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_cancel_task_in :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		
		pass;
	




class cli_cancel_task_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		
		pass;
	




class cli_cancel_watchers_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_challenge_in :
	"""
参数列表:
	/* 要挑战的用户id（0表示遇怪） */
	#类型:uint32
	public userid;

	/* 当天与其挑战次数 */
	#类型:uint32
	public pkcnt;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.pkcnt=ba.read_uint32();
		if ( self.pkcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.pkcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要挑战的用户id（0表示遇怪） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 当天与其挑战次数 */"""
		print tabs+"[pkcnt]=%s"%(str(self.pkcnt))
		
		pass;
	




class cli_challenge_npc_in :
	"""
参数列表:
	/* 明雷的id */
	#类型:uint32
	public groupid;

	/* 刷新组ID */
	#类型:uint32
	public refreshid;


	"""

	def read_from_buf(self, ba ):
		self.groupid=ba.read_uint32();
		if ( self.groupid== None): return False;
		self.refreshid=ba.read_uint32();
		if ( self.refreshid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.groupid)):return False;
		if ( not ba.write_uint32(self.refreshid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 明雷的id */"""
		print tabs+"[groupid]=%s"%(str(self.groupid))
		print tabs+"""/* 刷新组ID */"""
		print tabs+"[refreshid]=%s"%(str(self.refreshid))
		
		pass;
	




class cli_challenge_out :
	"""
参数列表:
	/* 0表示失败1挑战发送成功2挑战怪物成功 3直接挑战成功（对方开启PK开关） */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0表示失败1挑战发送成功2挑战怪物成功 3直接挑战成功（对方开启PK开关） */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_change_prof_in :
	"""
参数列表:
	/* 新职业： 狂战士6,黑魔导 7,圣言使 8,巫术士 9 */
	#类型:uint32
	public prof;


	"""

	def read_from_buf(self, ba ):
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.prof)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 新职业： 狂战士6,黑魔导 7,圣言使 8,巫术士 9 */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		
		pass;
	




class stru_exchange_info :
	"""
参数列表:
	/*  */
	#类型:uint32
	public src_id;

	/*  */
	#类型:uint32
	public des_id;


	"""

	def read_from_buf(self, ba ):
		self.src_id=ba.read_uint32();
		if ( self.src_id== None): return False;
		self.des_id=ba.read_uint32();
		if ( self.des_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.src_id)):return False;
		if ( not ba.write_uint32(self.des_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[src_id]=%s"%(str(self.src_id))
		print tabs+"""/*  */"""
		print tabs+"[des_id]=%s"%(str(self.des_id))
		
		pass;
	




class cli_change_race_skill_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/**/
	#变长数组,最大长度:3, 类型:stru_exchange_info
	public exchange_list =array();


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		exchange_list_count= ba.read_uint32(); 
		if ( exchange_list_count==None ): return False;
		self.exchange_list=[];
		for i in range(exchange_list_count):
			self.exchange_list.append(stru_exchange_info());
			if ( not self.exchange_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		exchange_list_count=len(self.exchange_list);
		ba.write_uint32(exchange_list_count);
		for i in range(exchange_list_count):
			if (  not  isinstance(self.exchange_list[i] ,stru_exchange_info) ):return False; 
			if ( not self.exchange_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"#"
		print tabs+"[exchange_list]=>{";
		for i in range(len(self.exchange_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.exchange_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_change_team_leader_out :
	"""
参数列表:
	/* 新队长的userid */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 新队长的userid */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_check_engaged_beast_kill_out :
	"""
参数列表:
	/* 1是0否 */
	#类型:uint32
	public engaged;


	"""

	def read_from_buf(self, ba ):
		self.engaged=ba.read_uint32();
		if ( self.engaged== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.engaged)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1是0否 */"""
		print tabs+"[engaged]=%s"%(str(self.engaged))
		
		pass;
	




class cli_check_magic_code_in :
	"""
参数列表:
	/* 神奇密码，不足32位补0 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""

	def read_from_buf(self, ba ):
		self.code=ba.read_buf(32);
		if( self.code==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.code,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 神奇密码，不足32位补0 */"""
		tmp_str=str(self.code);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[code]=%s"%(tmp_str)
		
		pass;
	




class cli_check_rand_info_in :
	"""
参数列表:
	/* 随机ID */
	#类型:uint32
	public randid;


	"""

	def read_from_buf(self, ba ):
		self.randid=ba.read_uint32();
		if ( self.randid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.randid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 随机ID */"""
		print tabs+"[randid]=%s"%(str(self.randid))
		
		pass;
	




class cli_check_rand_info_out :
	"""
参数列表:
	/* 随机ID */
	#类型:uint32
	public randid;

	/* 随机次数 */
	#类型:uint32
	public randcnt;


	"""

	def read_from_buf(self, ba ):
		self.randid=ba.read_uint32();
		if ( self.randid== None): return False;
		self.randcnt=ba.read_uint32();
		if ( self.randcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.randid)):return False;
		if ( not ba.write_uint32(self.randcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 随机ID */"""
		print tabs+"[randid]=%s"%(str(self.randid))
		print tabs+"""/* 随机次数 */"""
		print tabs+"[randcnt]=%s"%(str(self.randcnt))
		
		pass;
	




class cli_check_team_bird_map_in :
	"""
参数列表:
	/* 注册点地图 */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 注册点地图 */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_check_team_bird_map_out :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_check_team_boss_map_in :
	"""
参数列表:
	/* 注册点地图 */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 注册点地图 */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_check_team_boss_map_out :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_check_team_challenge_npc_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public grpid;


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		
		pass;
	




class cli_check_team_challenge_npc_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:5, 类型:uint32_t
	public uids =array();


	"""

	def read_from_buf(self, ba ):

		uids_count= ba.read_uint32(); 
		if ( uids_count==None ): return False;
		self.uids=[];
		for i in range(uids_count):
			self.uids.append(ba.read_uint32());
			if ( self.uids[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		uids_count=len(self.uids);
		ba.write_uint32(uids_count);
		for i in range(uids_count):
			if ( not ba.write_uint32(self.uids[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[uids]=>{";
		for i in range(len(self.uids)):
			print tabs+"    [%d]="%(i)+str(self.uids[i]); 

		print tabs+'}'
		
		pass;
	




class cli_check_team_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_check_team_item_out :
	"""
参数列表:
	/*物品不够的米米号*/
	#变长数组,最大长度:5, 类型:uint32_t
	public uidlist =array();


	"""

	def read_from_buf(self, ba ):

		uidlist_count= ba.read_uint32(); 
		if ( uidlist_count==None ): return False;
		self.uidlist=[];
		for i in range(uidlist_count):
			self.uidlist.append(ba.read_uint32());
			if ( self.uidlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		uidlist_count=len(self.uidlist);
		ba.write_uint32(uidlist_count);
		for i in range(uidlist_count):
			if ( not ba.write_uint32(self.uidlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#物品不够的米米号"
		print tabs+"[uidlist]=>{";
		for i in range(len(self.uidlist)):
			print tabs+"    [%d]="%(i)+str(self.uidlist[i]); 

		print tabs+'}'
		
		pass;
	




class cli_chk_str_valid_in :
	"""
参数列表:
	/* 要检查的字符串 */
	#定长数组,长度:64, 类型:char 
	public str_value ;


	"""

	def read_from_buf(self, ba ):
		self.str_value=ba.read_buf(64);
		if( self.str_value==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.str_value,64);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要检查的字符串 */"""
		tmp_str=str(self.str_value);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[str_value]=%s"%(tmp_str)
		
		pass;
	




class cli_chk_teamate_enter_map_in :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 地图类型（0） */
	#类型:uint32
	public maptype;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型（0） */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		
		pass;
	




class cli_chk_teamate_enter_map_out :
	"""
参数列表:
	/* 未完成任务的用户数 */
	#类型:uint32
	public user_cnt;

	/* 未完成任务的用户 */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.user_cnt=ba.read_uint32();
		if ( self.user_cnt== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.user_cnt)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 未完成任务的用户数 */"""
		print tabs+"[user_cnt]=%s"%(str(self.user_cnt))
		print tabs+"""/* 未完成任务的用户 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_chk_team_item_in :
	"""
参数列表:
	/* 钥匙ID（必须是钥匙ID） */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 钥匙ID（必须是钥匙ID） */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_chk_team_item_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 是否有钥匙 */
	#类型:uint32
	public have;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.have=ba.read_uint32();
		if ( self.have== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.have)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 是否有钥匙 */"""
		print tabs+"[have]=%s"%(str(self.have))
		
		pass;
	




class cli_cloth_disappear_out :
	"""
参数列表:
	/* 衣服id */
	#类型:uint32
	public clothid;


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 衣服id */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		
		pass;
	




class cli_cloth_in_out_in :
	"""
参数列表:
	/* 0从仓库取出1放入仓库 */
	#类型:uint32
	public flag;

	/* 物品ID */
	#类型:uint32
	public clothid;


	"""

	def read_from_buf(self, ba ):
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0从仓库取出1放入仓库 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 物品ID */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		
		pass;
	




class cli_composite_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public itemcnt;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		
		pass;
	




class cli_cure_pet_in :
	"""
参数列表:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_cure_pet_injury_in :
	"""
参数列表:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_cure_pet_injury_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 受伤等级 */
	#类型:uint32
	public injury_lv;

	/* 治疗后宠物hp上限 */
	#类型:uint32
	public hp_max;

	/* 治疗后宠物mp上限 */
	#类型:uint32
	public mp_max;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 治疗花费 */
	#类型:uint32
	public cost;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.injury_lv=ba.read_uint32();
		if ( self.injury_lv== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.injury_lv)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injury_lv]=%s"%(str(self.injury_lv))
		print tabs+"""/* 治疗后宠物hp上限 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 治疗后宠物mp上限 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 治疗花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		
		pass;
	




class cli_cure_pet_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 治疗后宠物hp */
	#类型:uint32
	public hp;

	/* 治疗后宠物mp */
	#类型:uint32
	public mp;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 治疗花费 */
	#类型:uint32
	public cost;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 治疗后宠物hp */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 治疗后宠物mp */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 治疗花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		
		pass;
	




class cli_delete_batr_team_out :
	"""
参数列表:
	/* 用户ID号（也是战队ID） */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号（也是战队ID） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_del_cloth_in :
	"""
参数列表:
	/* 衣服id */
	#类型:uint32
	public clothid;

	/* 衣服类型 */
	#类型:uint32
	public clothtype;

	/* 衣服等级 */
	#类型:uint32
	public clothlv;


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.clothlv=ba.read_uint32();
		if ( self.clothlv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.clothlv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 衣服id */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 衣服类型 */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/* 衣服等级 */"""
		print tabs+"[clothlv]=%s"%(str(self.clothlv))
		
		pass;
	




class cli_del_friend_in :
	"""
参数列表:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 好友ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_del_house_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public itemcnt;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		
		pass;
	




class cli_del_mail_in :
	"""
参数列表:
	/*邮件列表*/
	#变长数组,最大长度:500, 类型:uint32_t
	public mail_ids =array();


	"""

	def read_from_buf(self, ba ):

		mail_ids_count= ba.read_uint32(); 
		if ( mail_ids_count==None ): return False;
		self.mail_ids=[];
		for i in range(mail_ids_count):
			self.mail_ids.append(ba.read_uint32());
			if ( self.mail_ids[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		mail_ids_count=len(self.mail_ids);
		ba.write_uint32(mail_ids_count);
		for i in range(mail_ids_count):
			if ( not ba.write_uint32(self.mail_ids[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#邮件列表"
		print tabs+"[mail_ids]=>{";
		for i in range(len(self.mail_ids)):
			print tabs+"    [%d]="%(i)+str(self.mail_ids[i]); 

		print tabs+'}'
		
		pass;
	




class cli_del_mail_out :
	"""
参数列表:
	/*邮件列表*/
	#变长数组,最大长度:500, 类型:uint32_t
	public mail_ids =array();


	"""

	def read_from_buf(self, ba ):

		mail_ids_count= ba.read_uint32(); 
		if ( mail_ids_count==None ): return False;
		self.mail_ids=[];
		for i in range(mail_ids_count):
			self.mail_ids.append(ba.read_uint32());
			if ( self.mail_ids[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		mail_ids_count=len(self.mail_ids);
		ba.write_uint32(mail_ids_count);
		for i in range(mail_ids_count):
			if ( not ba.write_uint32(self.mail_ids[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#邮件列表"
		print tabs+"[mail_ids]=>{";
		for i in range(len(self.mail_ids)):
			print tabs+"    [%d]="%(i)+str(self.mail_ids[i]); 

		print tabs+'}'
		
		pass;
	




class cli_del_normal_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 要删除的物品数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 要删除的物品数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_del_normal_item_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 包裹中该物品的数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 包裹中该物品的数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_del_pet_in :
	"""
参数列表:
	/* 宠物id */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物id */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_del_relation_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_del_skill_in :
	"""
参数列表:
	/* 技能id */
	#类型:uint32
	public skill_id;


	"""

	def read_from_buf(self, ba ):
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skill_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		
		pass;
	




class cli_devote_medals_out :
	"""
参数列表:
	/* 贡献的数量 */
	#类型:uint32
	public count;

	/* 得到的经验 */
	#类型:uint32
	public exp;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 贡献的数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/* 得到的经验 */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		
		pass;
	




class cli_draw_once_in :
	"""
参数列表:
	/* 1普通牌子2VIP牌子 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1普通牌子2VIP牌子 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class stru_cloth_detail :
	"""
参数列表:
	/*  */
	#类型:uint32
	public gettime;

	/*  */
	#类型:uint32
	public clothtype;

	/*  */
	#类型:uint32
	public gridid;

	/*  */
	#类型:uint32
	public hpmax;

	/*  */
	#类型:uint32
	public mpmax;

	/*  */
	#类型:uint16
	public level;

	/*  */
	#类型:uint16
	public duration;

	/*  */
	#类型:uint16
	public mduration;

	/*  */
	#类型:uint32
	public atk;

	/*  */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdef;

	/*  */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit;

	/*  */
	#类型:uint16
	public avoid;

	/*  */
	#类型:uint16
	public critical_attack;

	/*  */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/*  */
	#类型:uint16
	public rconfusion;

	/*  */
	#类型:uint16
	public rstone;

	/*  */
	#类型:uint16
	public rfreeze;

	/*  */
	#类型:uint16
	public rsleep;

	/*  */
	#类型:uint16
	public rcurse;

	/*  */
	#类型:uint16
	public fight_back;

	/*  */
	#类型:uint16
	public strike_back;

	/*  */
	#类型:uint16
	public strike_back_hurt;

	/*  */
	#类型:uint16
	public rcritical_attack;

	/*  */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint16
	public quality;


	"""

	def read_from_buf(self, ba ):
		self.gettime=ba.read_uint32();
		if ( self.gettime== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.gridid=ba.read_uint32();
		if ( self.gridid== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.level=ba.read_uint16();
		if ( self.level== None): return False;
		self.duration=ba.read_uint16();
		if ( self.duration== None): return False;
		self.mduration=ba.read_uint16();
		if ( self.mduration== None): return False;
		self.atk=ba.read_uint32();
		if ( self.atk== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdef=ba.read_uint32();
		if ( self.mdef== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit=ba.read_uint16();
		if ( self.hit== None): return False;
		self.avoid=ba.read_uint16();
		if ( self.avoid== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.quality=ba.read_uint16();
		if ( self.quality== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.gettime)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.gridid)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint16(self.level)):return False;
		if ( not ba.write_uint16(self.duration)):return False;
		if ( not ba.write_uint16(self.mduration)):return False;
		if ( not ba.write_uint32(self.atk)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdef)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit)):return False;
		if ( not ba.write_uint16(self.avoid)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint16(self.quality)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[gettime]=%s"%(str(self.gettime))
		print tabs+"""/*  */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/*  */"""
		print tabs+"[gridid]=%s"%(str(self.gridid))
		print tabs+"""/*  */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/*  */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		print tabs+"""/*  */"""
		print tabs+"[mduration]=%s"%(str(self.mduration))
		print tabs+"""/*  */"""
		print tabs+"[atk]=%s"%(str(self.atk))
		print tabs+"""/*  */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdef]=%s"%(str(self.mdef))
		print tabs+"""/*  */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit]=%s"%(str(self.hit))
		print tabs+"""/*  */"""
		print tabs+"[avoid]=%s"%(str(self.avoid))
		print tabs+"""/*  */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/*  */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/*  */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/*  */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/*  */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/*  */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/*  */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/*  */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/*  */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/*  */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[quality]=%s"%(str(self.quality))
		
		pass;
	




class cli_draw_once_out :
	"""
参数列表:
	/*获得的物品*/
	#变长数组,最大长度:1, 类型:stru_item
	public item =array();

	/*装扮ID列表*/
	#变长数组,最大长度:1, 类型:stru_cloth_detail
	public clothlist =array();


	"""

	def read_from_buf(self, ba ):

		item_count= ba.read_uint32(); 
		if ( item_count==None ): return False;
		self.item=[];
		for i in range(item_count):
			self.item.append(stru_item());
			if ( not self.item[i].read_from_buf(ba)):return False;


		clothlist_count= ba.read_uint32(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_detail());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		item_count=len(self.item);
		ba.write_uint32(item_count);
		for i in range(item_count):
			if (  not  isinstance(self.item[i] ,stru_item) ):return False; 
			if ( not self.item[i].write_to_buf(ba)): return False;

		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_detail) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#获得的物品"
		print tabs+"[item]=>{";
		for i in range(len(self.item)):
			print tabs+"    [%d]=>{"%(i) 
			self.item[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_engage_skill_survey_in :
	"""
参数列表:
	/* 选项 */
	#类型:uint32
	public option;


	"""

	def read_from_buf(self, ba ):
		self.option=ba.read_uint32();
		if ( self.option== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.option)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 选项 */"""
		print tabs+"[option]=%s"%(str(self.option))
		
		pass;
	




class cli_engage_skill_survey_out :
	"""
参数列表:
	/* 获得的物品 */
	#类型:stru_item
	public item;


	"""

	def read_from_buf(self, ba ):
		self.item=stru_item();
		if ( not self.item.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.item,stru_item)): return False; 
		if ( not self.item.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品 */""";
		print tabs+"[item]=>{";
		self.item.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class stru_id_cnt :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/*  */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_engage_survey_in :
	"""
参数列表:
	/*问卷答案*/
	#变长数组,最大长度:100, 类型:stru_id_cnt
	public answerlist =array();


	"""

	def read_from_buf(self, ba ):

		answerlist_count= ba.read_uint32(); 
		if ( answerlist_count==None ): return False;
		self.answerlist=[];
		for i in range(answerlist_count):
			self.answerlist.append(stru_id_cnt());
			if ( not self.answerlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		answerlist_count=len(self.answerlist);
		ba.write_uint32(answerlist_count);
		for i in range(answerlist_count):
			if (  not  isinstance(self.answerlist[i] ,stru_id_cnt) ):return False; 
			if ( not self.answerlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#问卷答案"
		print tabs+"[answerlist]=>{";
		for i in range(len(self.answerlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.answerlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_engage_survey_out :
	"""
参数列表:
	/* 获得的物品 */
	#类型:stru_item
	public item;


	"""

	def read_from_buf(self, ba ):
		self.item=stru_item();
		if ( not self.item.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.item,stru_item)): return False; 
		if ( not self.item.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品 */""";
		print tabs+"[item]=>{";
		self.item.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_enter_map_in :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;

	/* 跳转类型 */
	#类型:uint32
	public jumptype;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;
		self.jumptype=ba.read_uint32();
		if ( self.jumptype== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		if ( not ba.write_uint32(self.jumptype)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/* 跳转类型 */"""
		print tabs+"[jumptype]=%s"%(str(self.jumptype))
		
		pass;
	




class cli_exchange_gift_normal_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_exchange_gift_normal_out :
	"""
参数列表:
	/* 获得的物品组 */
	#类型:uint32
	public getid;


	"""

	def read_from_buf(self, ba ):
		self.getid=ba.read_uint32();
		if ( self.getid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.getid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品组 */"""
		print tabs+"[getid]=%s"%(str(self.getid))
		
		pass;
	




class cli_exchange_gift_pet_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_exchange_gift_pet_out :
	"""
参数列表:
	/* 宠物类型ID */
	#类型:uint32
	public pettype;

	/* 宠物等级 */
	#类型:uint32
	public petlv;


	"""

	def read_from_buf(self, ba ):
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.petlv=ba.read_uint32();
		if ( self.petlv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint32(self.petlv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物类型ID */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 宠物等级 */"""
		print tabs+"[petlv]=%s"%(str(self.petlv))
		
		pass;
	




class cli_exchange_gift_spec_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_exchange_gift_spec_out :
	"""
参数列表:
	/* 星豆等的物品ID（见Item表） */
	#类型:uint32
	public itemid;

	/* 获得的数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 星豆等的物品ID（见Item表） */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 获得的数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_exchange_in :
	"""
参数列表:
	/* 兑换ID */
	#类型:uint32
	public eid;

	/* 兑换份数 */
	#类型:uint32
	public cnt;


	"""

	def read_from_buf(self, ba ):
		self.eid=ba.read_uint32();
		if ( self.eid== None): return False;
		self.cnt=ba.read_uint32();
		if ( self.cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.eid)):return False;
		if ( not ba.write_uint32(self.cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 兑换ID */"""
		print tabs+"[eid]=%s"%(str(self.eid))
		print tabs+"""/* 兑换份数 */"""
		print tabs+"[cnt]=%s"%(str(self.cnt))
		
		pass;
	




class cli_exchange_lucky_star_in :
	"""
参数列表:
	/* 0，1，2 三种兑换 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0，1，2 三种兑换 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_exchange_lucky_star_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_exchange_pet_for_item_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_exchange_pet_for_item_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 获得的物品ID */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 获得的物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_exchange_pet_in :
	"""
参数列表:
	/* 交换ID */
	#类型:uint32
	public exchangeid;

	/* 用于交换的宠物数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.exchangeid=ba.read_uint32();
		if ( self.exchangeid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.exchangeid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 交换ID */"""
		print tabs+"[exchangeid]=%s"%(str(self.exchangeid))
		print tabs+"""/* 用于交换的宠物数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_exchange_pet_out :
	"""
参数列表:
	/* 获得的宠物数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的宠物数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_expbox_change_out :
	"""
参数列表:
	/* 指定用户ID */
	#类型:uint32
	public userid;

	/* 经验树经验值 */
	#类型:uint32
	public expbox;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.expbox=ba.read_uint32();
		if ( self.expbox== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.expbox)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 指定用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 经验树经验值 */"""
		print tabs+"[expbox]=%s"%(str(self.expbox))
		
		pass;
	




class cli_fishing_get_item_in :
	"""
参数列表:
	/* 获得的物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_fishing_get_item_out :
	"""
参数列表:
	/* 获得的物品ID */
	#类型:uint32
	public itemid;

	/* 获得物品的位置（0背包，1仓库） */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 获得物品的位置（0背包，1仓库） */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_game_get_pvp_info_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public scores;

	/* 剩余的挑战次数 */
	#类型:uint32
	public left_pk_count;

	/*  */
	#类型:uint32
	public left_pk2_count;


	"""

	def read_from_buf(self, ba ):
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;
		self.left_pk_count=ba.read_uint32();
		if ( self.left_pk_count== None): return False;
		self.left_pk2_count=ba.read_uint32();
		if ( self.left_pk2_count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.scores)):return False;
		if ( not ba.write_uint32(self.left_pk_count)):return False;
		if ( not ba.write_uint32(self.left_pk2_count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		print tabs+"""/* 剩余的挑战次数 */"""
		print tabs+"[left_pk_count]=%s"%(str(self.left_pk_count))
		print tabs+"""/*  */"""
		print tabs+"[left_pk2_count]=%s"%(str(self.left_pk2_count))
		
		pass;
	




class cli_game_pvp_get_map_id_in :
	"""
参数列表:
	/* 0:单人单精灵赛;1:单人多精灵赛 */
	#类型:uint32
	public pvp_type;


	"""

	def read_from_buf(self, ba ):
		self.pvp_type=ba.read_uint32();
		if ( self.pvp_type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pvp_type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0:单人单精灵赛;1:单人多精灵赛 */"""
		print tabs+"[pvp_type]=%s"%(str(self.pvp_type))
		
		pass;
	




class cli_game_pvp_get_map_id_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 0: 单人单精灵赛” ;1:“单人多精灵赛” */
	#类型:uint32
	public pvp_type;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.pvp_type=ba.read_uint32();
		if ( self.pvp_type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.pvp_type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 0: 单人单精灵赛” ;1:“单人多精灵赛” */"""
		print tabs+"[pvp_type]=%s"%(str(self.pvp_type))
		
		pass;
	




class cli_get_all_petcnt_out :
	"""
参数列表:
	/* 宠物数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_bird_maps_out :
	"""
参数列表:
	/* 已注册陆行鸟数量 */
	#类型:uint32
	public bird_map_cnt;

	/* 陆行鸟ID */
	#类型:uint32
	public bird_map_id;


	"""

	def read_from_buf(self, ba ):
		self.bird_map_cnt=ba.read_uint32();
		if ( self.bird_map_cnt== None): return False;
		self.bird_map_id=ba.read_uint32();
		if ( self.bird_map_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.bird_map_cnt)):return False;
		if ( not ba.write_uint32(self.bird_map_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 已注册陆行鸟数量 */"""
		print tabs+"[bird_map_cnt]=%s"%(str(self.bird_map_cnt))
		print tabs+"""/* 陆行鸟ID */"""
		print tabs+"[bird_map_id]=%s"%(str(self.bird_map_id))
		
		pass;
	




class cli_get_bklist_out :
	"""
参数列表:
	/* 黑名单数量 */
	#类型:uint32
	public cnt;

	/* 用户id */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.cnt=ba.read_uint32();
		if ( self.cnt== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.cnt)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 黑名单数量 */"""
		print tabs+"[cnt]=%s"%(str(self.cnt))
		print tabs+"""/* 用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_get_body_clothes_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:1000, 类型:stru_cloth_detail
	public cloths =array();


	"""

	def read_from_buf(self, ba ):

		cloths_count= ba.read_uint32(); 
		if ( cloths_count==None ): return False;
		self.cloths=[];
		for i in range(cloths_count):
			self.cloths.append(stru_cloth_detail());
			if ( not self.cloths[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		cloths_count=len(self.cloths);
		ba.write_uint32(cloths_count);
		for i in range(cloths_count):
			if (  not  isinstance(self.cloths[i] ,stru_cloth_detail) ):return False; 
			if ( not self.cloths[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[cloths]=>{";
		for i in range(len(self.cloths)):
			print tabs+"    [%d]=>{"%(i) 
			self.cloths[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_boss_maps_out :
	"""
参数列表:
	/* 已注册陆行鸟数量 */
	#类型:uint32
	public boss_map_cnt;

	/* 陆行鸟ID */
	#类型:uint32
	public boss_map_id;


	"""

	def read_from_buf(self, ba ):
		self.boss_map_cnt=ba.read_uint32();
		if ( self.boss_map_cnt== None): return False;
		self.boss_map_id=ba.read_uint32();
		if ( self.boss_map_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.boss_map_cnt)):return False;
		if ( not ba.write_uint32(self.boss_map_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 已注册陆行鸟数量 */"""
		print tabs+"[boss_map_cnt]=%s"%(str(self.boss_map_cnt))
		print tabs+"""/* 陆行鸟ID */"""
		print tabs+"[boss_map_id]=%s"%(str(self.boss_map_id))
		
		pass;
	




class cli_get_btrteam_info_out :
	"""
参数列表:
	/*id 表示队友id  count表示战斗力*/
	#变长数组,最大长度:5, 类型:stru_id_cnt
	public info_list =array();


	"""

	def read_from_buf(self, ba ):

		info_list_count= ba.read_uint32(); 
		if ( info_list_count==None ): return False;
		self.info_list=[];
		for i in range(info_list_count):
			self.info_list.append(stru_id_cnt());
			if ( not self.info_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		info_list_count=len(self.info_list);
		ba.write_uint32(info_list_count);
		for i in range(info_list_count):
			if (  not  isinstance(self.info_list[i] ,stru_id_cnt) ):return False; 
			if ( not self.info_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#id 表示队友id  count表示战斗力"
		print tabs+"[info_list]=>{";
		for i in range(len(self.info_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.info_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_buff_range_in :
	"""
参数列表:
	/* 起始buffid */
	#类型:uint32
	public min_buff_id;

	/* 终止buffid */
	#类型:uint32
	public max_buff_id;


	"""

	def read_from_buf(self, ba ):
		self.min_buff_id=ba.read_uint32();
		if ( self.min_buff_id== None): return False;
		self.max_buff_id=ba.read_uint32();
		if ( self.max_buff_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.min_buff_id)):return False;
		if ( not ba.write_uint32(self.max_buff_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 起始buffid */"""
		print tabs+"[min_buff_id]=%s"%(str(self.min_buff_id))
		print tabs+"""/* 终止buffid */"""
		print tabs+"[max_buff_id]=%s"%(str(self.max_buff_id))
		
		pass;
	




class stru_cli_buff :
	"""
参数列表:
	/*  */
	#类型:uint32
	public type;

	/*  */
	#定长数组,长度:512, 类型:char 
	public buff ;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.buff=ba.read_buf(512);
		if( self.buff==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.buff,512);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/*  */"""
		tmp_str=str(self.buff);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[buff]=%s"%(tmp_str)
		
		pass;
	




class cli_get_buff_range_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:9999, 类型:stru_cli_buff
	public buff_list =array();


	"""

	def read_from_buf(self, ba ):

		buff_list_count= ba.read_uint32(); 
		if ( buff_list_count==None ): return False;
		self.buff_list=[];
		for i in range(buff_list_count):
			self.buff_list.append(stru_cli_buff());
			if ( not self.buff_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		buff_list_count=len(self.buff_list);
		ba.write_uint32(buff_list_count);
		for i in range(buff_list_count):
			if (  not  isinstance(self.buff_list[i] ,stru_cli_buff) ):return False; 
			if ( not self.buff_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[buff_list]=>{";
		for i in range(len(self.buff_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.buff_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_copy_beastgrp :
	"""
参数列表:
	/* 怪物组ID */
	#类型:uint32
	public grpid;

	/* 可以击杀数量 */
	#类型:uint32
	public validcnt;

	/* 必须击杀数量 */
	#类型:uint32
	public needkillcnt;

	/* 已击杀数量 */
	#类型:uint32
	public killedcnt;


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.validcnt=ba.read_uint32();
		if ( self.validcnt== None): return False;
		self.needkillcnt=ba.read_uint32();
		if ( self.needkillcnt== None): return False;
		self.killedcnt=ba.read_uint32();
		if ( self.killedcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.validcnt)):return False;
		if ( not ba.write_uint32(self.needkillcnt)):return False;
		if ( not ba.write_uint32(self.killedcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 可以击杀数量 */"""
		print tabs+"[validcnt]=%s"%(str(self.validcnt))
		print tabs+"""/* 必须击杀数量 */"""
		print tabs+"[needkillcnt]=%s"%(str(self.needkillcnt))
		print tabs+"""/* 已击杀数量 */"""
		print tabs+"[killedcnt]=%s"%(str(self.killedcnt))
		
		pass;
	




class stru_copy_beast :
	"""
参数列表:
	/* 击杀顺序 */
	#类型:uint32
	public order;

	/*怪物组信息*/
	#变长数组,最大长度:10, 类型:stru_copy_beastgrp
	public grps =array();


	"""

	def read_from_buf(self, ba ):
		self.order=ba.read_uint32();
		if ( self.order== None): return False;

		grps_count= ba.read_uint32(); 
		if ( grps_count==None ): return False;
		self.grps=[];
		for i in range(grps_count):
			self.grps.append(stru_copy_beastgrp());
			if ( not self.grps[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.order)):return False;
		grps_count=len(self.grps);
		ba.write_uint32(grps_count);
		for i in range(grps_count):
			if (  not  isinstance(self.grps[i] ,stru_copy_beastgrp) ):return False; 
			if ( not self.grps[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 击杀顺序 */"""
		print tabs+"[order]=%s"%(str(self.order))
		print tabs+"#怪物组信息"
		print tabs+"[grps]=>{";
		for i in range(len(self.grps)):
			print tabs+"    [%d]=>{"%(i) 
			self.grps[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_copy_layer :
	"""
参数列表:
	/* 场景序号 */
	#类型:uint32
	public layerid;

	/* 父场景序号 */
	#类型:uint32
	public parentlayer;

	/* 对应地图ID */
	#类型:uint32
	public mapid;

	/* 进入场景所需物品 */
	#类型:uint32
	public needitem;

	/* 进入场景所需物品数量 */
	#类型:uint32
	public needcnt;

	/* 是否已经删除 */
	#类型:uint32
	public itemdel;

	/*场景怪物组信息*/
	#变长数组,最大长度:5, 类型:stru_copy_beast
	public beast =array();


	"""

	def read_from_buf(self, ba ):
		self.layerid=ba.read_uint32();
		if ( self.layerid== None): return False;
		self.parentlayer=ba.read_uint32();
		if ( self.parentlayer== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.needitem=ba.read_uint32();
		if ( self.needitem== None): return False;
		self.needcnt=ba.read_uint32();
		if ( self.needcnt== None): return False;
		self.itemdel=ba.read_uint32();
		if ( self.itemdel== None): return False;

		beast_count= ba.read_uint32(); 
		if ( beast_count==None ): return False;
		self.beast=[];
		for i in range(beast_count):
			self.beast.append(stru_copy_beast());
			if ( not self.beast[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.layerid)):return False;
		if ( not ba.write_uint32(self.parentlayer)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.needitem)):return False;
		if ( not ba.write_uint32(self.needcnt)):return False;
		if ( not ba.write_uint32(self.itemdel)):return False;
		beast_count=len(self.beast);
		ba.write_uint32(beast_count);
		for i in range(beast_count):
			if (  not  isinstance(self.beast[i] ,stru_copy_beast) ):return False; 
			if ( not self.beast[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 场景序号 */"""
		print tabs+"[layerid]=%s"%(str(self.layerid))
		print tabs+"""/* 父场景序号 */"""
		print tabs+"[parentlayer]=%s"%(str(self.parentlayer))
		print tabs+"""/* 对应地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 进入场景所需物品 */"""
		print tabs+"[needitem]=%s"%(str(self.needitem))
		print tabs+"""/* 进入场景所需物品数量 */"""
		print tabs+"[needcnt]=%s"%(str(self.needcnt))
		print tabs+"""/* 是否已经删除 */"""
		print tabs+"[itemdel]=%s"%(str(self.itemdel))
		print tabs+"#场景怪物组信息"
		print tabs+"[beast]=>{";
		for i in range(len(self.beast)):
			print tabs+"    [%d]=>{"%(i) 
			self.beast[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_copy_info_out :
	"""
参数列表:
	/* 副本ID */
	#类型:uint32
	public copyid;

	/*副本各场景信息*/
	#变长数组,最大长度:10, 类型:stru_copy_layer
	public layers =array();


	"""

	def read_from_buf(self, ba ):
		self.copyid=ba.read_uint32();
		if ( self.copyid== None): return False;

		layers_count= ba.read_uint32(); 
		if ( layers_count==None ): return False;
		self.layers=[];
		for i in range(layers_count):
			self.layers.append(stru_copy_layer());
			if ( not self.layers[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.copyid)):return False;
		layers_count=len(self.layers);
		ba.write_uint32(layers_count);
		for i in range(layers_count):
			if (  not  isinstance(self.layers[i] ,stru_copy_layer) ):return False; 
			if ( not self.layers[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 副本ID */"""
		print tabs+"[copyid]=%s"%(str(self.copyid))
		print tabs+"#副本各场景信息"
		print tabs+"[layers]=>{";
		for i in range(len(self.layers)):
			print tabs+"    [%d]=>{"%(i) 
			self.layers[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_draw_cnt_out :
	"""
参数列表:
	/* 普通翻牌子次数 */
	#类型:uint32
	public draw_cnt;

	/* vip翻牌子次数 */
	#类型:uint32
	public vip_draw_cnt;


	"""

	def read_from_buf(self, ba ):
		self.draw_cnt=ba.read_uint32();
		if ( self.draw_cnt== None): return False;
		self.vip_draw_cnt=ba.read_uint32();
		if ( self.vip_draw_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.draw_cnt)):return False;
		if ( not ba.write_uint32(self.vip_draw_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 普通翻牌子次数 */"""
		print tabs+"[draw_cnt]=%s"%(str(self.draw_cnt))
		print tabs+"""/* vip翻牌子次数 */"""
		print tabs+"[vip_draw_cnt]=%s"%(str(self.vip_draw_cnt))
		
		pass;
	




class stru_elite_beast :
	"""
参数列表:
	/* 怪物ID */
	#类型:uint32
	public beastid;

	/* 精英怪数量 */
	#类型:uint32
	public count1;

	/* boss怪数量 */
	#类型:uint32
	public count2;


	"""

	def read_from_buf(self, ba ):
		self.beastid=ba.read_uint32();
		if ( self.beastid== None): return False;
		self.count1=ba.read_uint32();
		if ( self.count1== None): return False;
		self.count2=ba.read_uint32();
		if ( self.count2== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.beastid)):return False;
		if ( not ba.write_uint32(self.count1)):return False;
		if ( not ba.write_uint32(self.count2)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物ID */"""
		print tabs+"[beastid]=%s"%(str(self.beastid))
		print tabs+"""/* 精英怪数量 */"""
		print tabs+"[count1]=%s"%(str(self.count1))
		print tabs+"""/* boss怪数量 */"""
		print tabs+"[count2]=%s"%(str(self.count2))
		
		pass;
	




class cli_get_elite_beast_out :
	"""
参数列表:
	/* 地图ID */
	#类型:uint32
	public mapid;

	/*精英怪列表*/
	#变长数组,最大长度:10, 类型:stru_elite_beast
	public elite_beasts =array();


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		elite_beasts_count= ba.read_uint32(); 
		if ( elite_beasts_count==None ): return False;
		self.elite_beasts=[];
		for i in range(elite_beasts_count):
			self.elite_beasts.append(stru_elite_beast());
			if ( not self.elite_beasts[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		elite_beasts_count=len(self.elite_beasts);
		ba.write_uint32(elite_beasts_count);
		for i in range(elite_beasts_count):
			if (  not  isinstance(self.elite_beasts[i] ,stru_elite_beast) ):return False; 
			if ( not self.elite_beasts[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"#精英怪列表"
		print tabs+"[elite_beasts]=>{";
		for i in range(len(self.elite_beasts)):
			print tabs+"    [%d]=>{"%(i) 
			self.elite_beasts[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_grp_challenge_cnt_in :
	"""
参数列表:
	/* 怪物组ID */
	#类型:uint32
	public grpid;


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		
		pass;
	




class cli_get_grp_challenge_cnt_out :
	"""
参数列表:
	/* 怪物组ID */
	#类型:uint32
	public grpid;

	/* 挑战次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 挑战次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_grp_day_challenge_out :
	"""
参数列表:
	/*当天挑战次数*/
	#变长数组,最大长度:1000, 类型:stru_id_cnt
	public daycnts =array();


	"""

	def read_from_buf(self, ba ):

		daycnts_count= ba.read_uint32(); 
		if ( daycnts_count==None ): return False;
		self.daycnts=[];
		for i in range(daycnts_count):
			self.daycnts.append(stru_id_cnt());
			if ( not self.daycnts[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		daycnts_count=len(self.daycnts);
		ba.write_uint32(daycnts_count);
		for i in range(daycnts_count):
			if (  not  isinstance(self.daycnts[i] ,stru_id_cnt) ):return False; 
			if ( not self.daycnts[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#当天挑战次数"
		print tabs+"[daycnts]=>{";
		for i in range(len(self.daycnts)):
			print tabs+"    [%d]=>{"%(i) 
			self.daycnts[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_g_book_out :
	"""
参数列表:
	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_g_book_xiaomee_in :
	"""
参数列表:
	/* 怪物类型 */
	#类型:uint32
	public beast_type;


	"""

	def read_from_buf(self, ba ):
		self.beast_type=ba.read_uint32();
		if ( self.beast_type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.beast_type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物类型 */"""
		print tabs+"[beast_type]=%s"%(str(self.beast_type))
		
		pass;
	




class cli_get_g_book_xiaomee_out :
	"""
参数列表:
	/* ID */
	#类型:uint32
	public id;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* ID */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_handbook_info_out :
	"""
参数列表:
	/* 物品图鉴数量 */
	#类型:uint32
	public item_handbook_cnt;


	"""

	def read_from_buf(self, ba ):
		self.item_handbook_cnt=ba.read_uint32();
		if ( self.item_handbook_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.item_handbook_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品图鉴数量 */"""
		print tabs+"[item_handbook_cnt]=%s"%(str(self.item_handbook_cnt))
		
		pass;
	




class cli_get_hangup_rewards_in :
	"""
参数列表:
	/* 奖励次序 号 */
	#类型:uint32
	public order;


	"""

	def read_from_buf(self, ba ):
		self.order=ba.read_uint32();
		if ( self.order== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.order)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 奖励次序 号 */"""
		print tabs+"[order]=%s"%(str(self.order))
		
		pass;
	




class cli_get_hangup_rewards_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_get_hangup_time_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public online_time;


	"""

	def read_from_buf(self, ba ):
		self.online_time=ba.read_uint32();
		if ( self.online_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.online_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[online_time]=%s"%(str(self.online_time))
		
		pass;
	




class cli_get_hero_cup_reward_out :
	"""
参数列表:
	/* 排名 （-1表示超过100名 安慰奖） */
	#类型:uint32
	public rank;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.rank=ba.read_uint32();
		if ( self.rank== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.rank)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 排名 （-1表示超过100名 安慰奖） */"""
		print tabs+"[rank]=%s"%(str(self.rank))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class stru_team_rank_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public count;

	/*  */
	#类型:uint32
	public medals;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.medals=ba.read_uint32();
		if ( self.medals== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.medals)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/*  */"""
		print tabs+"[medals]=%s"%(str(self.medals))
		
		pass;
	




class cli_get_hero_team_rank_out :
	"""
参数列表:
	/*队伍排名*/
	#变长数组,最大长度:4, 类型:stru_team_rank_t
	public ranks =array();


	"""

	def read_from_buf(self, ba ):

		ranks_count= ba.read_uint32(); 
		if ( ranks_count==None ): return False;
		self.ranks=[];
		for i in range(ranks_count):
			self.ranks.append(stru_team_rank_t());
			if ( not self.ranks[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		ranks_count=len(self.ranks);
		ba.write_uint32(ranks_count);
		for i in range(ranks_count):
			if (  not  isinstance(self.ranks[i] ,stru_team_rank_t) ):return False; 
			if ( not self.ranks[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#队伍排名"
		print tabs+"[ranks]=>{";
		for i in range(len(self.ranks)):
			print tabs+"    [%d]=>{"%(i) 
			self.ranks[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_hero_team_reward_out :
	"""
参数列表:
	/* 队伍ID */
	#类型:uint32
	public teamid;

	/* 排名 */
	#类型:uint32
	public rank;

	/* 装扮类型 */
	#类型:uint32
	public clothtype;

	/*获得的物品奖励*/
	#变长数组,最大长度:1, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.rank=ba.read_uint32();
		if ( self.rank== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.rank)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 队伍ID */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/* 排名 */"""
		print tabs+"[rank]=%s"%(str(self.rank))
		print tabs+"""/* 装扮类型 */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"#获得的物品奖励"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_hero_user_rank_out :
	"""
参数列表:
	/* 排名 （-1表示超过100名 安慰奖） */
	#类型:uint32
	public rank;


	"""

	def read_from_buf(self, ba ):
		self.rank=ba.read_uint32();
		if ( self.rank== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.rank)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 排名 （-1表示超过100名 安慰奖） */"""
		print tabs+"[rank]=%s"%(str(self.rank))
		
		pass;
	




class cli_get_home_info_in :
	"""
参数列表:
	/* 指定用户ID */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 指定用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_get_home_info_out :
	"""
参数列表:
	/* 用户ID */
	#类型:uint32
	public userid;

	/* 标志位 */
	#类型:uint32
	public flag;

	/* 类型 */
	#类型:uint32
	public type;

	/* 等级 */
	#类型:uint32
	public level;

	/* 经验 */
	#类型:uint32
	public exp;

	/* 名称 */
	#定长数组,长度:16, 类型:char 
	public name ;

	/* 照片 */
	#类型:uint32
	public photo;

	/* 黑板 */
	#类型:uint32
	public blackboard;

	/* 书架 */
	#类型:uint32
	public bookshelf;

	/* 荣誉匣 */
	#类型:uint32
	public honorbox;

	/* 精灵游乐 */
	#类型:uint32
	public petfun;

	/* 经验槽 */
	#类型:uint32
	public expbox;

	/* 女神像 */
	#类型:uint32
	public effigy;

	/* 邮箱 */
	#类型:uint32
	public postbox;

	/* 物品仓库 */
	#类型:uint32
	public itembox;

	/* 宠物仓库 */
	#类型:uint32
	public petbox;

	/* 合成1 */
	#类型:uint32
	public compose1;

	/* 合成2 */
	#类型:uint32
	public compose2;

	/* 合成3 */
	#类型:uint32
	public compose3;

	/* 合成4 */
	#类型:uint32
	public compose4;

	/* 墙 */
	#类型:uint32
	public wall;

	/* 地板 */
	#类型:uint32
	public floor;

	/* 床 */
	#类型:uint32
	public bed;

	/* 桌子 */
	#类型:uint32
	public desk;

	/* 梯子 */
	#类型:uint32
	public ladder;

	/* 精灵小屋中精品小屋数量 */
	#类型:uint32
	public petbox_cnt;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;
		self.name=ba.read_buf(16);
		if( self.name==None ): return False;
		self.photo=ba.read_uint32();
		if ( self.photo== None): return False;
		self.blackboard=ba.read_uint32();
		if ( self.blackboard== None): return False;
		self.bookshelf=ba.read_uint32();
		if ( self.bookshelf== None): return False;
		self.honorbox=ba.read_uint32();
		if ( self.honorbox== None): return False;
		self.petfun=ba.read_uint32();
		if ( self.petfun== None): return False;
		self.expbox=ba.read_uint32();
		if ( self.expbox== None): return False;
		self.effigy=ba.read_uint32();
		if ( self.effigy== None): return False;
		self.postbox=ba.read_uint32();
		if ( self.postbox== None): return False;
		self.itembox=ba.read_uint32();
		if ( self.itembox== None): return False;
		self.petbox=ba.read_uint32();
		if ( self.petbox== None): return False;
		self.compose1=ba.read_uint32();
		if ( self.compose1== None): return False;
		self.compose2=ba.read_uint32();
		if ( self.compose2== None): return False;
		self.compose3=ba.read_uint32();
		if ( self.compose3== None): return False;
		self.compose4=ba.read_uint32();
		if ( self.compose4== None): return False;
		self.wall=ba.read_uint32();
		if ( self.wall== None): return False;
		self.floor=ba.read_uint32();
		if ( self.floor== None): return False;
		self.bed=ba.read_uint32();
		if ( self.bed== None): return False;
		self.desk=ba.read_uint32();
		if ( self.desk== None): return False;
		self.ladder=ba.read_uint32();
		if ( self.ladder== None): return False;
		self.petbox_cnt=ba.read_uint32();
		if ( self.petbox_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		ba.write_buf(self.name,16);
		if ( not ba.write_uint32(self.photo)):return False;
		if ( not ba.write_uint32(self.blackboard)):return False;
		if ( not ba.write_uint32(self.bookshelf)):return False;
		if ( not ba.write_uint32(self.honorbox)):return False;
		if ( not ba.write_uint32(self.petfun)):return False;
		if ( not ba.write_uint32(self.expbox)):return False;
		if ( not ba.write_uint32(self.effigy)):return False;
		if ( not ba.write_uint32(self.postbox)):return False;
		if ( not ba.write_uint32(self.itembox)):return False;
		if ( not ba.write_uint32(self.petbox)):return False;
		if ( not ba.write_uint32(self.compose1)):return False;
		if ( not ba.write_uint32(self.compose2)):return False;
		if ( not ba.write_uint32(self.compose3)):return False;
		if ( not ba.write_uint32(self.compose4)):return False;
		if ( not ba.write_uint32(self.wall)):return False;
		if ( not ba.write_uint32(self.floor)):return False;
		if ( not ba.write_uint32(self.bed)):return False;
		if ( not ba.write_uint32(self.desk)):return False;
		if ( not ba.write_uint32(self.ladder)):return False;
		if ( not ba.write_uint32(self.petbox_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 经验 */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		print tabs+"""/* 名称 */"""
		tmp_str=str(self.name);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[name]=%s"%(tmp_str)
		print tabs+"""/* 照片 */"""
		print tabs+"[photo]=%s"%(str(self.photo))
		print tabs+"""/* 黑板 */"""
		print tabs+"[blackboard]=%s"%(str(self.blackboard))
		print tabs+"""/* 书架 */"""
		print tabs+"[bookshelf]=%s"%(str(self.bookshelf))
		print tabs+"""/* 荣誉匣 */"""
		print tabs+"[honorbox]=%s"%(str(self.honorbox))
		print tabs+"""/* 精灵游乐 */"""
		print tabs+"[petfun]=%s"%(str(self.petfun))
		print tabs+"""/* 经验槽 */"""
		print tabs+"[expbox]=%s"%(str(self.expbox))
		print tabs+"""/* 女神像 */"""
		print tabs+"[effigy]=%s"%(str(self.effigy))
		print tabs+"""/* 邮箱 */"""
		print tabs+"[postbox]=%s"%(str(self.postbox))
		print tabs+"""/* 物品仓库 */"""
		print tabs+"[itembox]=%s"%(str(self.itembox))
		print tabs+"""/* 宠物仓库 */"""
		print tabs+"[petbox]=%s"%(str(self.petbox))
		print tabs+"""/* 合成1 */"""
		print tabs+"[compose1]=%s"%(str(self.compose1))
		print tabs+"""/* 合成2 */"""
		print tabs+"[compose2]=%s"%(str(self.compose2))
		print tabs+"""/* 合成3 */"""
		print tabs+"[compose3]=%s"%(str(self.compose3))
		print tabs+"""/* 合成4 */"""
		print tabs+"[compose4]=%s"%(str(self.compose4))
		print tabs+"""/* 墙 */"""
		print tabs+"[wall]=%s"%(str(self.wall))
		print tabs+"""/* 地板 */"""
		print tabs+"[floor]=%s"%(str(self.floor))
		print tabs+"""/* 床 */"""
		print tabs+"[bed]=%s"%(str(self.bed))
		print tabs+"""/* 桌子 */"""
		print tabs+"[desk]=%s"%(str(self.desk))
		print tabs+"""/* 梯子 */"""
		print tabs+"[ladder]=%s"%(str(self.ladder))
		print tabs+"""/* 精灵小屋中精品小屋数量 */"""
		print tabs+"[petbox_cnt]=%s"%(str(self.petbox_cnt))
		
		pass;
	




class cli_get_honor_list_out :
	"""
参数列表:
	/*称号列表*/
	#变长数组,最大长度:2000, 类型:uint32_t
	public honorlist =array();


	"""

	def read_from_buf(self, ba ):

		honorlist_count= ba.read_uint32(); 
		if ( honorlist_count==None ): return False;
		self.honorlist=[];
		for i in range(honorlist_count):
			self.honorlist.append(ba.read_uint32());
			if ( self.honorlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		honorlist_count=len(self.honorlist);
		ba.write_uint32(honorlist_count);
		for i in range(honorlist_count):
			if ( not ba.write_uint32(self.honorlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#称号列表"
		print tabs+"[honorlist]=>{";
		for i in range(len(self.honorlist)):
			print tabs+"    [%d]="%(i)+str(self.honorlist[i]); 

		print tabs+'}'
		
		pass;
	




class cli_get_house_cloth_in :
	"""
参数列表:
	/* 索引开始 */
	#类型:uint32
	public start;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.start=ba.read_uint32();
		if ( self.start== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.start)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 索引开始 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_house_cloth_out :
	"""
参数列表:
	/* 总数 */
	#类型:uint32
	public total_count;

	/* 索引开始 */
	#类型:uint32
	public start;

	/*装扮ID列表*/
	#变长数组,最大长度:320, 类型:stru_cloth_detail
	public clothlist =array();


	"""

	def read_from_buf(self, ba ):
		self.total_count=ba.read_uint32();
		if ( self.total_count== None): return False;
		self.start=ba.read_uint32();
		if ( self.start== None): return False;

		clothlist_count= ba.read_uint32(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_detail());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.total_count)):return False;
		if ( not ba.write_uint32(self.start)):return False;
		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_detail) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 总数 */"""
		print tabs+"[total_count]=%s"%(str(self.total_count))
		print tabs+"""/* 索引开始 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_house_item_list_out :
	"""
参数列表:
	/* 物品列表数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品列表数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_invited_out :
	"""
参数列表:
	/* 邀请成功的人数 */
	#类型:uint32
	public invited_count;

	/* 剩余抽奖次数 */
	#类型:uint32
	public already_times;


	"""

	def read_from_buf(self, ba ):
		self.invited_count=ba.read_uint32();
		if ( self.invited_count== None): return False;
		self.already_times=ba.read_uint32();
		if ( self.already_times== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.invited_count)):return False;
		if ( not ba.write_uint32(self.already_times)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邀请成功的人数 */"""
		print tabs+"[invited_count]=%s"%(str(self.invited_count))
		print tabs+"""/* 剩余抽奖次数 */"""
		print tabs+"[already_times]=%s"%(str(self.already_times))
		
		pass;
	




class cli_get_item_valid_cnt_in :
	"""
参数列表:
	/*物品ID*/
	#变长数组,最大长度:10, 类型:uint32_t
	public eids =array();


	"""

	def read_from_buf(self, ba ):

		eids_count= ba.read_uint32(); 
		if ( eids_count==None ): return False;
		self.eids=[];
		for i in range(eids_count):
			self.eids.append(ba.read_uint32());
			if ( self.eids[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		eids_count=len(self.eids);
		ba.write_uint32(eids_count);
		for i in range(eids_count):
			if ( not ba.write_uint32(self.eids[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#物品ID"
		print tabs+"[eids]=>{";
		for i in range(len(self.eids)):
			print tabs+"    [%d]="%(i)+str(self.eids[i]); 

		print tabs+'}'
		
		pass;
	




class stru_ex_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public eid;

	/*  */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.eid=ba.read_uint32();
		if ( self.eid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.eid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[eid]=%s"%(str(self.eid))
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_get_item_valid_cnt_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:10, 类型:stru_ex_item
	public vals =array();


	"""

	def read_from_buf(self, ba ):

		vals_count= ba.read_uint32(); 
		if ( vals_count==None ): return False;
		self.vals=[];
		for i in range(vals_count):
			self.vals.append(stru_ex_item());
			if ( not self.vals[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		vals_count=len(self.vals);
		ba.write_uint32(vals_count);
		for i in range(vals_count):
			if (  not  isinstance(self.vals[i] ,stru_ex_item) ):return False; 
			if ( not self.vals[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[vals]=>{";
		for i in range(len(self.vals)):
			print tabs+"    [%d]=>{"%(i) 
			self.vals[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_last_kill_beastgrp_out :
	"""
参数列表:
	/* 数量 */
	#类型:uint32
	public count;

	/* 用户id */
	#类型:uint32
	public uid;

	/* 怪物组ID，没有则为0 */
	#类型:uint32
	public grpid;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.grpid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/* 用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 怪物组ID，没有则为0 */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		
		pass;
	




class stru_loop_grp :
	"""
参数列表:
	/* 怪物组ID（0低级1中级2高级） */
	#类型:uint32
	public grpid;

	/* 总共挑战次数 */
	#类型:uint32
	public draw_total;

	/* 是否激活 */
	#类型:uint32
	public isactivate;

	/*怪物列表*/
	#变长数组,最大长度:10, 类型:stru_id_cnt
	public beastlist =array();


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.draw_total=ba.read_uint32();
		if ( self.draw_total== None): return False;
		self.isactivate=ba.read_uint32();
		if ( self.isactivate== None): return False;

		beastlist_count= ba.read_uint32(); 
		if ( beastlist_count==None ): return False;
		self.beastlist=[];
		for i in range(beastlist_count):
			self.beastlist.append(stru_id_cnt());
			if ( not self.beastlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.draw_total)):return False;
		if ( not ba.write_uint32(self.isactivate)):return False;
		beastlist_count=len(self.beastlist);
		ba.write_uint32(beastlist_count);
		for i in range(beastlist_count):
			if (  not  isinstance(self.beastlist[i] ,stru_id_cnt) ):return False; 
			if ( not self.beastlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物组ID（0低级1中级2高级） */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 总共挑战次数 */"""
		print tabs+"[draw_total]=%s"%(str(self.draw_total))
		print tabs+"""/* 是否激活 */"""
		print tabs+"[isactivate]=%s"%(str(self.isactivate))
		print tabs+"#怪物列表"
		print tabs+"[beastlist]=>{";
		for i in range(len(self.beastlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.beastlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_loop_grp_out :
	"""
参数列表:
	/*精灵挑战信息*/
	#变长数组,最大长度:3, 类型:stru_loop_grp
	public grplist =array();


	"""

	def read_from_buf(self, ba ):

		grplist_count= ba.read_uint32(); 
		if ( grplist_count==None ): return False;
		self.grplist=[];
		for i in range(grplist_count):
			self.grplist.append(stru_loop_grp());
			if ( not self.grplist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		grplist_count=len(self.grplist);
		ba.write_uint32(grplist_count);
		for i in range(grplist_count):
			if (  not  isinstance(self.grplist[i] ,stru_loop_grp) ):return False; 
			if ( not self.grplist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#精灵挑战信息"
		print tabs+"[grplist]=>{";
		for i in range(len(self.grplist)):
			print tabs+"    [%d]=>{"%(i) 
			self.grplist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_loop_task_info :
	"""
参数列表:
	/* 任务环ID */
	#类型:uint32
	public loopid;

	/* 今天已完成的环数 */
	#类型:uint32
	public fincnt;

	/* 当前进行到的任务序号 */
	#类型:uint32
	public taskidx;

	/*任务列表*/
	#变长数组,最大长度:999, 类型:uint32_t
	public tasks =array();


	"""

	def read_from_buf(self, ba ):
		self.loopid=ba.read_uint32();
		if ( self.loopid== None): return False;
		self.fincnt=ba.read_uint32();
		if ( self.fincnt== None): return False;
		self.taskidx=ba.read_uint32();
		if ( self.taskidx== None): return False;

		tasks_count= ba.read_uint32(); 
		if ( tasks_count==None ): return False;
		self.tasks=[];
		for i in range(tasks_count):
			self.tasks.append(ba.read_uint32());
			if ( self.tasks[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.loopid)):return False;
		if ( not ba.write_uint32(self.fincnt)):return False;
		if ( not ba.write_uint32(self.taskidx)):return False;
		tasks_count=len(self.tasks);
		ba.write_uint32(tasks_count);
		for i in range(tasks_count):
			if ( not ba.write_uint32(self.tasks[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务环ID */"""
		print tabs+"[loopid]=%s"%(str(self.loopid))
		print tabs+"""/* 今天已完成的环数 */"""
		print tabs+"[fincnt]=%s"%(str(self.fincnt))
		print tabs+"""/* 当前进行到的任务序号 */"""
		print tabs+"[taskidx]=%s"%(str(self.taskidx))
		print tabs+"#任务列表"
		print tabs+"[tasks]=>{";
		for i in range(len(self.tasks)):
			print tabs+"    [%d]="%(i)+str(self.tasks[i]); 

		print tabs+'}'
		
		pass;
	




class cli_get_loop_task_out :
	"""
参数列表:
	/*环任务信息*/
	#变长数组,最大长度:100, 类型:stru_loop_task_info
	public looptasks =array();


	"""

	def read_from_buf(self, ba ):

		looptasks_count= ba.read_uint32(); 
		if ( looptasks_count==None ): return False;
		self.looptasks=[];
		for i in range(looptasks_count):
			self.looptasks.append(stru_loop_task_info());
			if ( not self.looptasks[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		looptasks_count=len(self.looptasks);
		ba.write_uint32(looptasks_count);
		for i in range(looptasks_count):
			if (  not  isinstance(self.looptasks[i] ,stru_loop_task_info) ):return False; 
			if ( not self.looptasks[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#环任务信息"
		print tabs+"[looptasks]=>{";
		for i in range(len(self.looptasks)):
			print tabs+"    [%d]=>{"%(i) 
			self.looptasks[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_lucky_star_info_out :
	"""
参数列表:
	/* 剩余时间 */
	#类型:uint32
	public lefttime;

	/* 幸运星数量 */
	#类型:uint32
	public star_cnt;


	"""

	def read_from_buf(self, ba ):
		self.lefttime=ba.read_uint32();
		if ( self.lefttime== None): return False;
		self.star_cnt=ba.read_uint32();
		if ( self.star_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.lefttime)):return False;
		if ( not ba.write_uint32(self.star_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 剩余时间 */"""
		print tabs+"[lefttime]=%s"%(str(self.lefttime))
		print tabs+"""/* 幸运星数量 */"""
		print tabs+"[star_cnt]=%s"%(str(self.star_cnt))
		
		pass;
	




class cli_get_mail_content_in :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		
		pass;
	




class cli_get_mail_content_out :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;

	/* 邮件正文字节长度 */
	#类型:uint32
	public msg_cnt;

	/* 邮件物品类型个数 */
	#类型:uint32
	public item_cnt;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;
		self.msg_cnt=ba.read_uint32();
		if ( self.msg_cnt== None): return False;
		self.item_cnt=ba.read_uint32();
		if ( self.item_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		if ( not ba.write_uint32(self.msg_cnt)):return False;
		if ( not ba.write_uint32(self.item_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		print tabs+"""/* 邮件正文字节长度 */"""
		print tabs+"[msg_cnt]=%s"%(str(self.msg_cnt))
		print tabs+"""/* 邮件物品类型个数 */"""
		print tabs+"[item_cnt]=%s"%(str(self.item_cnt))
		
		pass;
	




class cli_get_mail_simple_out :
	"""
参数列表:
	/* 邮件数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_map_copy_in :
	"""
参数列表:
	/* 副本ID */
	#类型:uint32
	public copyid;


	"""

	def read_from_buf(self, ba ):
		self.copyid=ba.read_uint32();
		if ( self.copyid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.copyid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 副本ID */"""
		print tabs+"[copyid]=%s"%(str(self.copyid))
		
		pass;
	




class cli_get_map_copy_out :
	"""
参数列表:
	/* 地图ID  0xFFFFFFFF表示继续等待30秒 */
	#类型:uint32
	public mapid;

	/*不符合要求的米米号*/
	#变长数组,最大长度:5, 类型:uint32_t
	public uidlist =array();


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		uidlist_count= ba.read_uint32(); 
		if ( uidlist_count==None ): return False;
		self.uidlist=[];
		for i in range(uidlist_count):
			self.uidlist.append(ba.read_uint32());
			if ( self.uidlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		uidlist_count=len(self.uidlist);
		ba.write_uint32(uidlist_count);
		for i in range(uidlist_count):
			if ( not ba.write_uint32(self.uidlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID  0xFFFFFFFF表示继续等待30秒 */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"#不符合要求的米米号"
		print tabs+"[uidlist]=>{";
		for i in range(len(self.uidlist)):
			print tabs+"    [%d]="%(i)+str(self.uidlist[i]); 

		print tabs+'}'
		
		pass;
	




class map_grp_item_t :
	"""
参数列表:
	/* 刷新组（挑战时发送） */
	#类型:uint32
	public refresh_id;

	/* 怪物组ID */
	#类型:uint32
	public grpid;

	/* 随机生成的怪物组素材ID */
	#类型:uint32
	public type_id;

	/* x坐标 */
	#类型:uint16
	public posx;

	/* y坐标 */
	#类型:uint16
	public posy;

	/*  */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.refresh_id=ba.read_uint32();
		if ( self.refresh_id== None): return False;
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.posx=ba.read_uint16();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint16();
		if ( self.posy== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.refresh_id)):return False;
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		if ( not ba.write_uint16(self.posx)):return False;
		if ( not ba.write_uint16(self.posy)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 刷新组（挑战时发送） */"""
		print tabs+"[refresh_id]=%s"%(str(self.refresh_id))
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 随机生成的怪物组素材ID */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_map_grp_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:999999, 类型:map_grp_item_t
	public map_grp_list =array();


	"""

	def read_from_buf(self, ba ):

		map_grp_list_count= ba.read_uint32(); 
		if ( map_grp_list_count==None ): return False;
		self.map_grp_list=[];
		for i in range(map_grp_list_count):
			self.map_grp_list.append(map_grp_item_t());
			if ( not self.map_grp_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		map_grp_list_count=len(self.map_grp_list);
		ba.write_uint32(map_grp_list_count);
		for i in range(map_grp_list_count):
			if (  not  isinstance(self.map_grp_list[i] ,map_grp_item_t) ):return False; 
			if ( not self.map_grp_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[map_grp_list]=>{";
		for i in range(len(self.map_grp_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.map_grp_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_map_state_out :
	"""
参数列表:
	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_map_usercnt_out :
	"""
参数列表:
	/*人数列表*/
	#变长数组,最大长度:100, 类型:stru_id_cnt
	public cntlist =array();


	"""

	def read_from_buf(self, ba ):

		cntlist_count= ba.read_uint32(); 
		if ( cntlist_count==None ): return False;
		self.cntlist=[];
		for i in range(cntlist_count):
			self.cntlist.append(stru_id_cnt());
			if ( not self.cntlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		cntlist_count=len(self.cntlist);
		ba.write_uint32(cntlist_count);
		for i in range(cntlist_count):
			if (  not  isinstance(self.cntlist[i] ,stru_id_cnt) ):return False; 
			if ( not self.cntlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#人数列表"
		print tabs+"[cntlist]=>{";
		for i in range(len(self.cntlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.cntlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_normal_item_list_out :
	"""
参数列表:
	/* 物品列表数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品列表数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_other_pet_info_in :
	"""
参数列表:
	/* 人物ID */
	#类型:uint32
	public userid;

	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 人物ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_get_other_pet_info_out :
	"""
参数列表:
	/* 人物ID */
	#类型:uint32
	public userid;

	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public typid;

	/* 种族 */
	#类型:uint8
	public race;

	/* 宠物标志位 */
	#类型:uint32
	public flag;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 等级 */
	#类型:uint32
	public level;

	/* 经验 */
	#类型:uint32
	public experience;

	/* 生命值 */
	#类型:uint32
	public hp;

	/* 魔法值 */
	#类型:uint32
	public mp;

	/* 地 */
	#类型:uint8
	public earth;

	/* 水 */
	#类型:uint8
	public water;

	/* 火 */
	#类型:uint8
	public fire;

	/* 风 */
	#类型:uint8
	public wind;

	/* 受伤等级 */
	#类型:uint32
	public injury_lv;

	/* 状态：0仓库，1休息，2待命，3出战 */
	#类型:uint8
	public state;

	/* 生命最大值 */
	#类型:uint32
	public hp_max;

	/* 魔法最大值 */
	#类型:uint32
	public mp_max;

	/* 成长值 */
	#类型:uint16
	public paramall;

	/* 技能数量 */
	#类型:uint32
	public skillcnt;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.typid=ba.read_uint32();
		if ( self.typid== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.earth=ba.read_uint8();
		if ( self.earth== None): return False;
		self.water=ba.read_uint8();
		if ( self.water== None): return False;
		self.fire=ba.read_uint8();
		if ( self.fire== None): return False;
		self.wind=ba.read_uint8();
		if ( self.wind== None): return False;
		self.injury_lv=ba.read_uint32();
		if ( self.injury_lv== None): return False;
		self.state=ba.read_uint8();
		if ( self.state== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.paramall=ba.read_uint16();
		if ( self.paramall== None): return False;
		self.skillcnt=ba.read_uint32();
		if ( self.skillcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.typid)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.earth)):return False;
		if ( not ba.write_uint8(self.water)):return False;
		if ( not ba.write_uint8(self.fire)):return False;
		if ( not ba.write_uint8(self.wind)):return False;
		if ( not ba.write_uint32(self.injury_lv)):return False;
		if ( not ba.write_uint8(self.state)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint16(self.paramall)):return False;
		if ( not ba.write_uint32(self.skillcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 人物ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[typid]=%s"%(str(self.typid))
		print tabs+"""/* 种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 宠物标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 经验 */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 生命值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 魔法值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 地 */"""
		print tabs+"[earth]=%s"%(str(self.earth))
		print tabs+"""/* 水 */"""
		print tabs+"[water]=%s"%(str(self.water))
		print tabs+"""/* 火 */"""
		print tabs+"[fire]=%s"%(str(self.fire))
		print tabs+"""/* 风 */"""
		print tabs+"[wind]=%s"%(str(self.wind))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injury_lv]=%s"%(str(self.injury_lv))
		print tabs+"""/* 状态：0仓库，1休息，2待命，3出战 */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/* 生命最大值 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 魔法最大值 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 成长值 */"""
		print tabs+"[paramall]=%s"%(str(self.paramall))
		print tabs+"""/* 技能数量 */"""
		print tabs+"[skillcnt]=%s"%(str(self.skillcnt))
		
		pass;
	




class cli_get_pakt_cloth_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:1000, 类型:stru_cloth_detail
	public cloths =array();


	"""

	def read_from_buf(self, ba ):

		cloths_count= ba.read_uint32(); 
		if ( cloths_count==None ): return False;
		self.cloths=[];
		for i in range(cloths_count):
			self.cloths.append(stru_cloth_detail());
			if ( not self.cloths[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		cloths_count=len(self.cloths);
		ba.write_uint32(cloths_count);
		for i in range(cloths_count):
			if (  not  isinstance(self.cloths[i] ,stru_cloth_detail) ):return False; 
			if ( not self.cloths[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[cloths]=>{";
		for i in range(len(self.cloths)):
			print tabs+"    [%d]=>{"%(i) 
			self.cloths[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_petlist_type_in :
	"""
参数列表:
	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 索引开始 */
	#类型:uint32
	public start;

	/* 拉取的数量 */
	#类型:uint32
	public limits;


	"""

	def read_from_buf(self, ba ):
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.start=ba.read_uint32();
		if ( self.start== None): return False;
		self.limits=ba.read_uint32();
		if ( self.limits== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint32(self.start)):return False;
		if ( not ba.write_uint32(self.limits)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 索引开始 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"""/* 拉取的数量 */"""
		print tabs+"[limits]=%s"%(str(self.limits))
		
		pass;
	




class stru_type_pet_info :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 等级 */
	#类型:uint32
	public level;

	/* 当前HP */
	#类型:uint32
	public hp;

	/* 最大HP */
	#类型:uint32
	public hpmax;

	/* 当前MP */
	#类型:uint32
	public mp;

	/* 最大MP */
	#类型:uint32
	public mpmax;

	/* 受伤等级 */
	#类型:uint32
	public injurylv;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 成长值 */
	#类型:uint16
	public para_all;

	/* 精神 */
	#类型:uint16
	public spirit;

	/* 回复 */
	#类型:uint16
	public resume;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.injurylv=ba.read_uint32();
		if ( self.injurylv== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.para_all=ba.read_uint16();
		if ( self.para_all== None): return False;
		self.spirit=ba.read_uint16();
		if ( self.spirit== None): return False;
		self.resume=ba.read_uint16();
		if ( self.resume== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint32(self.injurylv)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.para_all)):return False;
		if ( not ba.write_uint16(self.spirit)):return False;
		if ( not ba.write_uint16(self.resume)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 当前HP */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 最大HP */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/* 当前MP */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 最大MP */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injurylv]=%s"%(str(self.injurylv))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 成长值 */"""
		print tabs+"[para_all]=%s"%(str(self.para_all))
		print tabs+"""/* 精神 */"""
		print tabs+"[spirit]=%s"%(str(self.spirit))
		print tabs+"""/* 回复 */"""
		print tabs+"[resume]=%s"%(str(self.resume))
		
		pass;
	




class cli_get_petlist_type_out :
	"""
参数列表:
	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 宠物总数量 */
	#类型:uint32
	public total;

	/* 索引开始位置 */
	#类型:uint32
	public start;

	/*宠物列表*/
	#变长数组,最大长度:2000, 类型:stru_type_pet_info
	public petlist =array();


	"""

	def read_from_buf(self, ba ):
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.total=ba.read_uint32();
		if ( self.total== None): return False;
		self.start=ba.read_uint32();
		if ( self.start== None): return False;

		petlist_count= ba.read_uint32(); 
		if ( petlist_count==None ): return False;
		self.petlist=[];
		for i in range(petlist_count):
			self.petlist.append(stru_type_pet_info());
			if ( not self.petlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint32(self.total)):return False;
		if ( not ba.write_uint32(self.start)):return False;
		petlist_count=len(self.petlist);
		ba.write_uint32(petlist_count);
		for i in range(petlist_count):
			if (  not  isinstance(self.petlist[i] ,stru_type_pet_info) ):return False; 
			if ( not self.petlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 宠物总数量 */"""
		print tabs+"[total]=%s"%(str(self.total))
		print tabs+"""/* 索引开始位置 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"#宠物列表"
		print tabs+"[petlist]=>{";
		for i in range(len(self.petlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.petlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_pet_info_in :
	"""
参数列表:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class stru_user_skill :
	"""
参数列表:
	/* 技能ID */
	#类型:uint32
	public skillid;

	/* 技能等级 */
	#类型:uint8
	public skilllv;

	/* 技能经验 */
	#类型:uint32
	public skillexp;


	"""

	def read_from_buf(self, ba ):
		self.skillid=ba.read_uint32();
		if ( self.skillid== None): return False;
		self.skilllv=ba.read_uint8();
		if ( self.skilllv== None): return False;
		self.skillexp=ba.read_uint32();
		if ( self.skillexp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skillid)):return False;
		if ( not ba.write_uint8(self.skilllv)):return False;
		if ( not ba.write_uint32(self.skillexp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能ID */"""
		print tabs+"[skillid]=%s"%(str(self.skillid))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skilllv]=%s"%(str(self.skilllv))
		print tabs+"""/* 技能经验 */"""
		print tabs+"[skillexp]=%s"%(str(self.skillexp))
		
		pass;
	




class stru_pet_allinfo :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 种族 */
	#类型:uint8
	public race;

	/* 宠物标志位 */
	#类型:uint32
	public flag;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 等级 */
	#类型:uint32
	public level;

	/* 经验 */
	#类型:uint32
	public experience;

	/* 生命值 */
	#类型:uint32
	public hp;

	/* 魔法值 */
	#类型:uint32
	public mp;

	/* hp初始值 */
	#类型:uint16
	public hp_init;

	/* mp初始 */
	#类型:uint16
	public mp_init;

	/* 攻击初始 */
	#类型:uint16
	public attack_init;

	/* 命中初始 */
	#类型:uint16
	public hit_init;

	/* 闪避初始 */
	#类型:uint16
	public avoid_init;

	/* 速度初始 */
	#类型:uint16
	public speed_init;

	/* 成长值 */
	#类型:uint16
	public attr_param;

	/* 五行 */
	#类型:uint8
	public nature;

	/* 状态：0仓库，1休息，2待命，3出战 */
	#类型:uint8
	public state;

	/* 生命最大值 */
	#类型:uint32
	public hp_max;

	/* 魔法最大值 */
	#类型:uint32
	public mp_max;

	/* 物攻 */
	#类型:uint32
	public attack;

	/* 物防 */
	#类型:uint32
	public defense;

	/* 魔法防御 */
	#类型:uint32
	public mdefense;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit_rate;

	/*  */
	#类型:uint16
	public avoid_rate;

	/* 暴击率 */
	#类型:uint16
	public critical_attack;

	/* 致命一击率 */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/* 抗混乱 */
	#类型:uint16
	public rconfusion;

	/* 抗石化 */
	#类型:uint16
	public rstone;

	/* 抗冰冻 */
	#类型:uint16
	public rfreeze;

	/* 抗昏睡 */
	#类型:uint16
	public rsleep;

	/* 抗诅咒 */
	#类型:uint16
	public rcurse;

	/* 反击概率 */
	#类型:uint16
	public fight_back;

	/* 反震概率 */
	#类型:uint16
	public strike_back;

	/* 反震程度 */
	#类型:uint16
	public strike_back_hurt;

	/* 抵御暴击的机率 */
	#类型:uint16
	public rcritical_attack;

	/* 抗致命一击率 */
	#类型:uint16
	public rdeadly_attack;

	/*获得的技能*/
	#变长数组,最大长度:10, 类型:stru_user_skill
	public skills =array();


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.hp_init=ba.read_uint16();
		if ( self.hp_init== None): return False;
		self.mp_init=ba.read_uint16();
		if ( self.mp_init== None): return False;
		self.attack_init=ba.read_uint16();
		if ( self.attack_init== None): return False;
		self.hit_init=ba.read_uint16();
		if ( self.hit_init== None): return False;
		self.avoid_init=ba.read_uint16();
		if ( self.avoid_init== None): return False;
		self.speed_init=ba.read_uint16();
		if ( self.speed_init== None): return False;
		self.attr_param=ba.read_uint16();
		if ( self.attr_param== None): return False;
		self.nature=ba.read_uint8();
		if ( self.nature== None): return False;
		self.state=ba.read_uint8();
		if ( self.state== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack=ba.read_uint32();
		if ( self.attack== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdefense=ba.read_uint32();
		if ( self.mdefense== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit_rate=ba.read_uint16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_uint16();
		if ( self.avoid_rate== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;

		skills_count= ba.read_uint32(); 
		if ( skills_count==None ): return False;
		self.skills=[];
		for i in range(skills_count):
			self.skills.append(stru_user_skill());
			if ( not self.skills[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint16(self.hp_init)):return False;
		if ( not ba.write_uint16(self.mp_init)):return False;
		if ( not ba.write_uint16(self.attack_init)):return False;
		if ( not ba.write_uint16(self.hit_init)):return False;
		if ( not ba.write_uint16(self.avoid_init)):return False;
		if ( not ba.write_uint16(self.speed_init)):return False;
		if ( not ba.write_uint16(self.attr_param)):return False;
		if ( not ba.write_uint8(self.nature)):return False;
		if ( not ba.write_uint8(self.state)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.attack)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdefense)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit_rate)):return False;
		if ( not ba.write_uint16(self.avoid_rate)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		skills_count=len(self.skills);
		ba.write_uint32(skills_count);
		for i in range(skills_count):
			if (  not  isinstance(self.skills[i] ,stru_user_skill) ):return False; 
			if ( not self.skills[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 宠物标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 经验 */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 生命值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 魔法值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* hp初始值 */"""
		print tabs+"[hp_init]=%s"%(str(self.hp_init))
		print tabs+"""/* mp初始 */"""
		print tabs+"[mp_init]=%s"%(str(self.mp_init))
		print tabs+"""/* 攻击初始 */"""
		print tabs+"[attack_init]=%s"%(str(self.attack_init))
		print tabs+"""/* 命中初始 */"""
		print tabs+"[hit_init]=%s"%(str(self.hit_init))
		print tabs+"""/* 闪避初始 */"""
		print tabs+"[avoid_init]=%s"%(str(self.avoid_init))
		print tabs+"""/* 速度初始 */"""
		print tabs+"[speed_init]=%s"%(str(self.speed_init))
		print tabs+"""/* 成长值 */"""
		print tabs+"[attr_param]=%s"%(str(self.attr_param))
		print tabs+"""/* 五行 */"""
		print tabs+"[nature]=%s"%(str(self.nature))
		print tabs+"""/* 状态：0仓库，1休息，2待命，3出战 */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/* 生命最大值 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 魔法最大值 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 物攻 */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/* 物防 */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/* 魔法防御 */"""
		print tabs+"[mdefense]=%s"%(str(self.mdefense))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/*  */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/* 暴击率 */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/* 致命一击率 */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/* 抗混乱 */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/* 抗石化 */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/* 抗冰冻 */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/* 抗昏睡 */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/* 抗诅咒 */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/* 反击概率 */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/* 反震概率 */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/* 反震程度 */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/* 抵御暴击的机率 */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/* 抗致命一击率 */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"#获得的技能"
		print tabs+"[skills]=>{";
		for i in range(len(self.skills)):
			print tabs+"    [%d]=>{"%(i) 
			self.skills[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_pet_info_out :
	"""
参数列表:
	/*  */
	#类型:stru_pet_allinfo
	public pet;


	"""

	def read_from_buf(self, ba ):
		self.pet=stru_pet_allinfo();
		if ( not self.pet.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.pet,stru_pet_allinfo)): return False; 
		if ( not self.pet.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */""";
		print tabs+"[pet]=>{";
		self.pet.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_get_pet_inhouse_in :
	"""
参数列表:
	/* 拉取的开始位置 */
	#类型:uint32
	public start;

	/* 拉取的数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.start=ba.read_uint32();
		if ( self.start== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.start)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 拉取的开始位置 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"""/* 拉取的数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_pet_inhouse_out :
	"""
参数列表:
	/* 拥有的总数量 */
	#类型:uint32
	public total;

	/* 当前拉取的起始位置 */
	#类型:uint32
	public start;

	/* 当前拉取的宠物数量 */
	#类型:uint32
	public pet_cnt;


	"""

	def read_from_buf(self, ba ):
		self.total=ba.read_uint32();
		if ( self.total== None): return False;
		self.start=ba.read_uint32();
		if ( self.start== None): return False;
		self.pet_cnt=ba.read_uint32();
		if ( self.pet_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.total)):return False;
		if ( not ba.write_uint32(self.start)):return False;
		if ( not ba.write_uint32(self.pet_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 拥有的总数量 */"""
		print tabs+"[total]=%s"%(str(self.total))
		print tabs+"""/* 当前拉取的起始位置 */"""
		print tabs+"[start]=%s"%(str(self.start))
		print tabs+"""/* 当前拉取的宠物数量 */"""
		print tabs+"[pet_cnt]=%s"%(str(self.pet_cnt))
		
		pass;
	




class cli_get_pet_list_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:1000, 类型:stru_pet_allinfo
	public pets =array();


	"""

	def read_from_buf(self, ba ):

		pets_count= ba.read_uint32(); 
		if ( pets_count==None ): return False;
		self.pets=[];
		for i in range(pets_count):
			self.pets.append(stru_pet_allinfo());
			if ( not self.pets[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		pets_count=len(self.pets);
		ba.write_uint32(pets_count);
		for i in range(pets_count):
			if (  not  isinstance(self.pets[i] ,stru_pet_allinfo) ):return False; 
			if ( not self.pets[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[pets]=>{";
		for i in range(len(self.pets)):
			print tabs+"    [%d]=>{"%(i) 
			self.pets[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_game_info :
	"""
参数列表:
	/* 游戏类型（0， 1， 2） */
	#类型:uint32
	public type;

	/* 奖励索引 */
	#类型:uint32
	public index;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 剩余数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.index=ba.read_uint32();
		if ( self.index== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.index)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 游戏类型（0， 1， 2） */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 奖励索引 */"""
		print tabs+"[index]=%s"%(str(self.index))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 剩余数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_pet_reward_info_out :
	"""
参数列表:
	/*全局领取信息*/
	#变长数组,最大长度:10, 类型:stru_game_info
	public glist =array();

	/*个人领取信息*/
	#变长数组,最大长度:10, 类型:stru_id_cnt
	public ulist =array();


	"""

	def read_from_buf(self, ba ):

		glist_count= ba.read_uint32(); 
		if ( glist_count==None ): return False;
		self.glist=[];
		for i in range(glist_count):
			self.glist.append(stru_game_info());
			if ( not self.glist[i].read_from_buf(ba)):return False;


		ulist_count= ba.read_uint32(); 
		if ( ulist_count==None ): return False;
		self.ulist=[];
		for i in range(ulist_count):
			self.ulist.append(stru_id_cnt());
			if ( not self.ulist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		glist_count=len(self.glist);
		ba.write_uint32(glist_count);
		for i in range(glist_count):
			if (  not  isinstance(self.glist[i] ,stru_game_info) ):return False; 
			if ( not self.glist[i].write_to_buf(ba)): return False;

		ulist_count=len(self.ulist);
		ba.write_uint32(ulist_count);
		for i in range(ulist_count):
			if (  not  isinstance(self.ulist[i] ,stru_id_cnt) ):return False; 
			if ( not self.ulist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#全局领取信息"
		print tabs+"[glist]=>{";
		for i in range(len(self.glist)):
			print tabs+"    [%d]=>{"%(i) 
			self.glist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#个人领取信息"
		print tabs+"[ulist]=>{";
		for i in range(len(self.ulist)):
			print tabs+"    [%d]=>{"%(i) 
			self.ulist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_pet_skill_reward_in :
	"""
参数列表:
	/* 小游戏类型（0射箭1飞镖2钓鱼3鼓励奖） */
	#类型:uint32
	public type;

	/* 奖励索引 */
	#类型:uint32
	public index;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.index=ba.read_uint32();
		if ( self.index== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.index)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 小游戏类型（0射箭1飞镖2钓鱼3鼓励奖） */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 奖励索引 */"""
		print tabs+"[index]=%s"%(str(self.index))
		
		pass;
	




class cli_get_pet_skill_reward_out :
	"""
参数列表:
	/*获得的物品奖励*/
	#变长数组,最大长度:100, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#获得的物品奖励"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_positions_info_out :
	"""
参数列表:
	/* 米米号 */
	#定长数组,长度:12, 类型:uint32_t 
	public userid =array();


	"""

	def read_from_buf(self, ba ):
		self.userid=[];
		for i in range(12):
			self.userid.append(ba.read_uint32());
			if ( self.userid[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		if(len(self.userid)<>12):return False; 
		for i in range(12):
			if ( not ba.write_uint32(self.userid[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""#米米号"""
		print tabs+"[userid]=>{";
		for i in range(12):
			print tabs+"    [%d]="%(i)+str(self.userid[i]); 

		print tabs+"}"
		
		pass;
	




class cli_get_rand_item_in :
	"""
参数列表:
	/* 随机ID */
	#类型:uint32
	public randid;


	"""

	def read_from_buf(self, ba ):
		self.randid=ba.read_uint32();
		if ( self.randid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.randid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 随机ID */"""
		print tabs+"[randid]=%s"%(str(self.randid))
		
		pass;
	




class cli_get_rand_item_out :
	"""
参数列表:
	/* 获得的物品 */
	#类型:stru_item
	public item;


	"""

	def read_from_buf(self, ba ):
		self.item=stru_item();
		if ( not self.item.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.item,stru_item)): return False; 
		if ( not self.item.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品 */""";
		print tabs+"[item]=>{";
		self.item.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_get_rand_item_spec_in :
	"""
参数列表:
	/* 随机ID */
	#类型:uint32
	public randid;

	/* 获得的物品ID */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:int32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.randid=ba.read_uint32();
		if ( self.randid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_int32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.randid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_int32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 随机ID */"""
		print tabs+"[randid]=%s"%(str(self.randid))
		print tabs+"""/* 获得的物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_rand_item_spec_out :
	"""
参数列表:
	/* 获得的物品 */
	#类型:stru_item
	public item;


	"""

	def read_from_buf(self, ba ):
		self.item=stru_item();
		if ( not self.item.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.item,stru_item)): return False; 
		if ( not self.item.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 获得的物品 */""";
		print tabs+"[item]=>{";
		self.item.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_get_rand_range_in :
	"""
参数列表:
	/* 范围起始 */
	#类型:uint32
	public min;

	/* 范围终止 */
	#类型:uint32
	public max;


	"""

	def read_from_buf(self, ba ):
		self.min=ba.read_uint32();
		if ( self.min== None): return False;
		self.max=ba.read_uint32();
		if ( self.max== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.min)):return False;
		if ( not ba.write_uint32(self.max)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 范围起始 */"""
		print tabs+"[min]=%s"%(str(self.min))
		print tabs+"""/* 范围终止 */"""
		print tabs+"[max]=%s"%(str(self.max))
		
		pass;
	




class vip_item_info_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public same_period_randid;

	/*  */
	#类型:uint32
	public same_period_count;


	"""

	def read_from_buf(self, ba ):
		self.same_period_randid=ba.read_uint32();
		if ( self.same_period_randid== None): return False;
		self.same_period_count=ba.read_uint32();
		if ( self.same_period_count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.same_period_randid)):return False;
		if ( not ba.write_uint32(self.same_period_count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[same_period_randid]=%s"%(str(self.same_period_randid))
		print tabs+"""/*  */"""
		print tabs+"[same_period_count]=%s"%(str(self.same_period_count))
		
		pass;
	




class cli_get_rand_range_out :
	"""
参数列表:
	/*rand次数信息*/
	#变长数组,最大长度:9999, 类型:vip_item_info_t
	public rand_info =array();


	"""

	def read_from_buf(self, ba ):

		rand_info_count= ba.read_uint32(); 
		if ( rand_info_count==None ): return False;
		self.rand_info=[];
		for i in range(rand_info_count):
			self.rand_info.append(vip_item_info_t());
			if ( not self.rand_info[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		rand_info_count=len(self.rand_info);
		ba.write_uint32(rand_info_count);
		for i in range(rand_info_count):
			if (  not  isinstance(self.rand_info[i] ,vip_item_info_t) ):return False; 
			if ( not self.rand_info[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#rand次数信息"
		print tabs+"[rand_info]=>{";
		for i in range(len(self.rand_info)):
			print tabs+"    [%d]=>{"%(i) 
			self.rand_info[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_relationship_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class stru_relation_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public day;

	/*  */
	#类型:uint32
	public val;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.day=ba.read_uint32();
		if ( self.day== None): return False;
		self.val=ba.read_uint32();
		if ( self.val== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.day)):return False;
		if ( not ba.write_uint32(self.val)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[day]=%s"%(str(self.day))
		print tabs+"""/*  */"""
		print tabs+"[val]=%s"%(str(self.val))
		
		pass;
	




class cli_get_relationship_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public flag;

	/* 称号 */
	#类型:uint32
	public title;

	/* 导师等级 */
	#类型:uint32
	public level;

	/*  */
	#类型:uint32
	public exp;

	/*  */
	#类型:uint32
	public graduation;

	/* 可用亲密值 */
	#类型:uint32
	public total_val;

	/**/
	#变长数组,最大长度:5, 类型:stru_relation_item
	public relations =array();


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.title=ba.read_uint32();
		if ( self.title== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.exp=ba.read_uint32();
		if ( self.exp== None): return False;
		self.graduation=ba.read_uint32();
		if ( self.graduation== None): return False;
		self.total_val=ba.read_uint32();
		if ( self.total_val== None): return False;

		relations_count= ba.read_uint32(); 
		if ( relations_count==None ): return False;
		self.relations=[];
		for i in range(relations_count):
			self.relations.append(stru_relation_item());
			if ( not self.relations[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.title)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.exp)):return False;
		if ( not ba.write_uint32(self.graduation)):return False;
		if ( not ba.write_uint32(self.total_val)):return False;
		relations_count=len(self.relations);
		ba.write_uint32(relations_count);
		for i in range(relations_count):
			if (  not  isinstance(self.relations[i] ,stru_relation_item) ):return False; 
			if ( not self.relations[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 称号 */"""
		print tabs+"[title]=%s"%(str(self.title))
		print tabs+"""/* 导师等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[exp]=%s"%(str(self.exp))
		print tabs+"""/*  */"""
		print tabs+"[graduation]=%s"%(str(self.graduation))
		print tabs+"""/* 可用亲密值 */"""
		print tabs+"[total_val]=%s"%(str(self.total_val))
		print tabs+"#"
		print tabs+"[relations]=>{";
		for i in range(len(self.relations)):
			print tabs+"    [%d]=>{"%(i) 
			self.relations[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_relation_reward_in :
	"""
参数列表:
	/* 领取物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 领取物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_get_relation_reward_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_rewards_info_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:4, 类型:uint32_t
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(ba.read_uint32());
			if ( self.itemlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if ( not ba.write_uint32(self.itemlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]="%(i)+str(self.itemlist[i]); 

		print tabs+'}'
		
		pass;
	




class cli_get_seat_info_in :
	"""
参数列表:
	/* 座位类型 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 座位类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class stru_pos_uid :
	"""
参数列表:
	/* 位置标号 */
	#类型:uint32
	public pos;

	/* 米米号 */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 位置标号 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_get_seat_info_out :
	"""
参数列表:
	/* 技能挂机剩余时间 */
	#类型:uint32
	public hang_skill_time;

	/* 座位类型 */
	#类型:uint32
	public type;

	/*座位上的用户米米号*/
	#变长数组,最大长度:100, 类型:stru_pos_uid
	public seatuids =array();


	"""

	def read_from_buf(self, ba ):
		self.hang_skill_time=ba.read_uint32();
		if ( self.hang_skill_time== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		seatuids_count= ba.read_uint32(); 
		if ( seatuids_count==None ): return False;
		self.seatuids=[];
		for i in range(seatuids_count):
			self.seatuids.append(stru_pos_uid());
			if ( not self.seatuids[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.hang_skill_time)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		seatuids_count=len(self.seatuids);
		ba.write_uint32(seatuids_count);
		for i in range(seatuids_count):
			if (  not  isinstance(self.seatuids[i] ,stru_pos_uid) ):return False; 
			if ( not self.seatuids[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 技能挂机剩余时间 */"""
		print tabs+"[hang_skill_time]=%s"%(str(self.hang_skill_time))
		print tabs+"""/* 座位类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"#座位上的用户米米号"
		print tabs+"[seatuids]=>{";
		for i in range(len(self.seatuids)):
			print tabs+"    [%d]=>{"%(i) 
			self.seatuids[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_shop_in_map_out :
	"""
参数列表:
	/* 商店id，0：没有 */
	#类型:uint32
	public shopid;

	/* X坐标 */
	#类型:uint32
	public x;

	/* Y坐标 */
	#类型:uint32
	public y;


	"""

	def read_from_buf(self, ba ):
		self.shopid=ba.read_uint32();
		if ( self.shopid== None): return False;
		self.x=ba.read_uint32();
		if ( self.x== None): return False;
		self.y=ba.read_uint32();
		if ( self.y== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.shopid)):return False;
		if ( not ba.write_uint32(self.x)):return False;
		if ( not ba.write_uint32(self.y)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商店id，0：没有 */"""
		print tabs+"[shopid]=%s"%(str(self.shopid))
		print tabs+"""/* X坐标 */"""
		print tabs+"[x]=%s"%(str(self.x))
		print tabs+"""/* Y坐标 */"""
		print tabs+"[y]=%s"%(str(self.y))
		
		pass;
	




class cli_get_skill_list_in :
	"""
参数列表:
	/* 需要获取技能的对象ID（人物或宠物） */
	#类型:uint32
	public id;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 需要获取技能的对象ID（人物或宠物） */"""
		print tabs+"[id]=%s"%(str(self.id))
		
		pass;
	




class cli_get_skill_list_out :
	"""
参数列表:
	/* 需要获取技能的对象ID（人物或宠物） */
	#类型:uint32
	public id;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 需要获取技能的对象ID（人物或宠物） */"""
		print tabs+"[id]=%s"%(str(self.id))
		
		pass;
	




class cli_get_skill_survey_info_out :
	"""
参数列表:
	/*问卷答案*/
	#变长数组,最大长度:100, 类型:stru_id_cnt
	public answerlist =array();


	"""

	def read_from_buf(self, ba ):

		answerlist_count= ba.read_uint32(); 
		if ( answerlist_count==None ): return False;
		self.answerlist=[];
		for i in range(answerlist_count):
			self.answerlist.append(stru_id_cnt());
			if ( not self.answerlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		answerlist_count=len(self.answerlist);
		ba.write_uint32(answerlist_count);
		for i in range(answerlist_count):
			if (  not  isinstance(self.answerlist[i] ,stru_id_cnt) ):return False; 
			if ( not self.answerlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#问卷答案"
		print tabs+"[answerlist]=>{";
		for i in range(len(self.answerlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.answerlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_sth_done_in :
	"""
参数列表:
	/* 物品id，0:是否获得过290004   1:是否对话过                2:拉取孵化次数 3：是否对话过 2 */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id，0:是否获得过290004   1:是否对话过                2:拉取孵化次数 3：是否对话过 2 */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_get_sth_done_out :
	"""
参数列表:
	/* 物品id */
	#类型:uint32
	public itemid;

	/* 完成次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 完成次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_get_survey_info_out :
	"""
参数列表:
	/* 1参与过0未参与过 */
	#类型:uint32
	public surveyed;


	"""

	def read_from_buf(self, ba ):
		self.surveyed=ba.read_uint32();
		if ( self.surveyed== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.surveyed)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1参与过0未参与过 */"""
		print tabs+"[surveyed]=%s"%(str(self.surveyed))
		
		pass;
	




class cli_get_task_detail_in :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		
		pass;
	




class cli_get_task_detail_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 状态更新时间(根据任务状态决定) */
	#类型:uint32
	public fintime;

	/* 任务日记 */
	#定长数组,长度:156, 类型:char 
	public diary ;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.fintime=ba.read_uint32();
		if ( self.fintime== None): return False;
		self.diary=ba.read_buf(156);
		if( self.diary==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.fintime)):return False;
		ba.write_buf(self.diary,156);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 状态更新时间(根据任务状态决定) */"""
		print tabs+"[fintime]=%s"%(str(self.fintime))
		print tabs+"""/* 任务日记 */"""
		tmp_str=str(self.diary);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[diary]=%s"%(tmp_str)
		
		pass;
	




class stru_rank_val :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/*  */
	#类型:uint32
	public val;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.val=ba.read_uint32();
		if ( self.val== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.val)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/*  */"""
		print tabs+"[val]=%s"%(str(self.val))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_get_task_rank_out :
	"""
参数列表:
	/* 自己用时 */
	#类型:uint32
	public time;

	/*top10*/
	#变长数组,最大长度:10, 类型:stru_rank_val
	public uids =array();


	"""

	def read_from_buf(self, ba ):
		self.time=ba.read_uint32();
		if ( self.time== None): return False;

		uids_count= ba.read_uint32(); 
		if ( uids_count==None ): return False;
		self.uids=[];
		for i in range(uids_count):
			self.uids.append(stru_rank_val());
			if ( not self.uids[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.time)):return False;
		uids_count=len(self.uids);
		ba.write_uint32(uids_count);
		for i in range(uids_count):
			if (  not  isinstance(self.uids[i] ,stru_rank_val) ):return False; 
			if ( not self.uids[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 自己用时 */"""
		print tabs+"[time]=%s"%(str(self.time))
		print tabs+"#top10"
		print tabs+"[uids]=>{";
		for i in range(len(self.uids)):
			print tabs+"    [%d]=>{"%(i) 
			self.uids[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_task_svrbuf_in :
	"""
参数列表:
	/* 要获取buf的任务ID */
	#类型:uint32
	public taskid;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要获取buf的任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		
		pass;
	




class cli_get_task_svrbuf_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 节点ID */
	#类型:uint32
	public nodeid;

	/* 目标收集品ID */
	#类型:uint32
	public itemid;

	/* 已有数量（收集品） */
	#类型:uint32
	public cur_count;

	/* 目标数量（收集品） */
	#类型:uint32
	public des_count;

	/* 目标怪物ID */
	#类型:uint32
	public beastid;

	/* 已有数量（怪物） */
	#类型:uint32
	public beast_cur_count;

	/* 目标数量（怪物） */
	#类型:uint32
	public beast_des_count;

	/* 已PK次数 */
	#类型:uint32
	public pk_cur_count;

	/* PK目标次数 */
	#类型:uint32
	public pk_des_count;

	/* 0可以提交1不可提交 */
	#类型:uint32
	public canfin;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.nodeid=ba.read_uint32();
		if ( self.nodeid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.cur_count=ba.read_uint32();
		if ( self.cur_count== None): return False;
		self.des_count=ba.read_uint32();
		if ( self.des_count== None): return False;
		self.beastid=ba.read_uint32();
		if ( self.beastid== None): return False;
		self.beast_cur_count=ba.read_uint32();
		if ( self.beast_cur_count== None): return False;
		self.beast_des_count=ba.read_uint32();
		if ( self.beast_des_count== None): return False;
		self.pk_cur_count=ba.read_uint32();
		if ( self.pk_cur_count== None): return False;
		self.pk_des_count=ba.read_uint32();
		if ( self.pk_des_count== None): return False;
		self.canfin=ba.read_uint32();
		if ( self.canfin== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.nodeid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.cur_count)):return False;
		if ( not ba.write_uint32(self.des_count)):return False;
		if ( not ba.write_uint32(self.beastid)):return False;
		if ( not ba.write_uint32(self.beast_cur_count)):return False;
		if ( not ba.write_uint32(self.beast_des_count)):return False;
		if ( not ba.write_uint32(self.pk_cur_count)):return False;
		if ( not ba.write_uint32(self.pk_des_count)):return False;
		if ( not ba.write_uint32(self.canfin)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 节点ID */"""
		print tabs+"[nodeid]=%s"%(str(self.nodeid))
		print tabs+"""/* 目标收集品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 已有数量（收集品） */"""
		print tabs+"[cur_count]=%s"%(str(self.cur_count))
		print tabs+"""/* 目标数量（收集品） */"""
		print tabs+"[des_count]=%s"%(str(self.des_count))
		print tabs+"""/* 目标怪物ID */"""
		print tabs+"[beastid]=%s"%(str(self.beastid))
		print tabs+"""/* 已有数量（怪物） */"""
		print tabs+"[beast_cur_count]=%s"%(str(self.beast_cur_count))
		print tabs+"""/* 目标数量（怪物） */"""
		print tabs+"[beast_des_count]=%s"%(str(self.beast_des_count))
		print tabs+"""/* 已PK次数 */"""
		print tabs+"[pk_cur_count]=%s"%(str(self.pk_cur_count))
		print tabs+"""/* PK目标次数 */"""
		print tabs+"[pk_des_count]=%s"%(str(self.pk_des_count))
		print tabs+"""/* 0可以提交1不可提交 */"""
		print tabs+"[canfin]=%s"%(str(self.canfin))
		
		pass;
	




class cli_get_task_time_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public time;


	"""

	def read_from_buf(self, ba ):
		self.time=ba.read_uint32();
		if ( self.time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[time]=%s"%(str(self.time))
		
		pass;
	




class cli_get_team_details_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public teamid;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		
		pass;
	




class stru_team_details :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public level;

	/*  */
	#类型:uint32
	public prof;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.prof)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_get_team_details_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:5, 类型:stru_team_details
	public list =array();


	"""

	def read_from_buf(self, ba ):

		list_count= ba.read_uint32(); 
		if ( list_count==None ): return False;
		self.list=[];
		for i in range(list_count):
			self.list.append(stru_team_details());
			if ( not self.list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		list_count=len(self.list);
		ba.write_uint32(list_count);
		for i in range(list_count):
			if (  not  isinstance(self.list[i] ,stru_team_details) ):return False; 
			if ( not self.list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[list]=>{";
		for i in range(len(self.list)):
			print tabs+"    [%d]=>{"%(i) 
			self.list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_user_detail_in :
	"""
参数列表:
	/* 用户ID号 */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class stru_cloth_simple_t :
	"""
参数列表:
	/* 装扮ID */
	#类型:uint32
	public clothid;

	/* 装扮类型 */
	#类型:uint32
	public clothtype;

	/* 装扮等级 */
	#类型:uint16
	public clothlv;


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.clothlv=ba.read_uint16();
		if ( self.clothlv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint16(self.clothlv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 装扮ID */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 装扮类型 */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/* 装扮等级 */"""
		print tabs+"[clothlv]=%s"%(str(self.clothlv))
		
		pass;
	




class cli_get_user_detail_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public flag;

	/*  */
	#类型:uint32
	public viplv;

	/*  */
	#类型:uint32
	public vipexp;

	/*  */
	#类型:uint32
	public vip_begin;

	/*  */
	#类型:uint32
	public vip_end;

	/*  */
	#类型:uint32
	public hero_team;

	/*  */
	#类型:uint32
	public color;

	/*  */
	#类型:uint32
	public register_time;

	/* 宠物种族 */
	#类型:uint8
	public race;

	/* 职业 */
	#类型:uint8
	public prof;

	/*  */
	#类型:uint32
	public prof_lv;

	/*  */
	#类型:uint32
	public honor;

	/*  */
	#类型:uint32
	public xiaomee;

	/*  */
	#类型:uint32
	public pkpoint_total;

	/*  */
	#类型:uint32
	public energy;

	/*  */
	#类型:uint32
	public level;

	/*  */
	#类型:uint32
	public experience;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 剩余属性点 */
	#类型:uint16
	public attr_addition;

	/* hp当前值 */
	#类型:uint32
	public hp;

	/* mp当前值 */
	#类型:uint32
	public mp;

	/* 五行 */
	#类型:uint8
	public nature;

	/*  */
	#类型:uint64
	public mapid;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;

	/*  */
	#类型:uint32
	public base_action;

	/*  */
	#类型:uint32
	public advance_action;

	/*  */
	#类型:uint8
	public direction;

	/*  */
	#类型:uint8
	public in_front;

	/*  */
	#类型:uint32
	public btr_team;

	/* 在队伍中位置 */
	#类型:uint32
	public idx;

	/*  */
	#类型:uint32
	public hp_max;

	/*  */
	#类型:uint32
	public mp_max;

	/* 物攻 */
	#类型:uint32
	public attack;

	/* 物防 */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdefense;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit_rate;

	/*  */
	#类型:uint16
	public avoid_rate;

	/* 暴击率 */
	#类型:uint16
	public critical_attack;

	/* 致命一击率 */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/* 抗混乱 */
	#类型:uint16
	public rconfusion;

	/* 抗石化 */
	#类型:uint16
	public rstone;

	/* 抗冰冻 */
	#类型:uint16
	public rfreeze;

	/* 抗昏睡 */
	#类型:uint16
	public rsleep;

	/* 抗诅咒 */
	#类型:uint16
	public rcurse;

	/* 反击概率 */
	#类型:uint16
	public fight_back;

	/* 反震概率 */
	#类型:uint16
	public strike_back;

	/* 反震程度 */
	#类型:uint16
	public strike_back_hurt;

	/* 抵御暴击的机率 */
	#类型:uint16
	public rcritical_attack;

	/* 抗致命一击率 */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint32
	public login_day;

	/* 无用数据 */
	#定长数组,长度:28, 类型:uint8_t 
	public ex_data =array();

	/*装扮ID列表*/
	#变长数组,最大长度:1, 类型:stru_cloth_simple_t
	public clothlist =array();


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.viplv=ba.read_uint32();
		if ( self.viplv== None): return False;
		self.vipexp=ba.read_uint32();
		if ( self.vipexp== None): return False;
		self.vip_begin=ba.read_uint32();
		if ( self.vip_begin== None): return False;
		self.vip_end=ba.read_uint32();
		if ( self.vip_end== None): return False;
		self.hero_team=ba.read_uint32();
		if ( self.hero_team== None): return False;
		self.color=ba.read_uint32();
		if ( self.color== None): return False;
		self.register_time=ba.read_uint32();
		if ( self.register_time== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.prof=ba.read_uint8();
		if ( self.prof== None): return False;
		self.prof_lv=ba.read_uint32();
		if ( self.prof_lv== None): return False;
		self.honor=ba.read_uint32();
		if ( self.honor== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.pkpoint_total=ba.read_uint32();
		if ( self.pkpoint_total== None): return False;
		self.energy=ba.read_uint32();
		if ( self.energy== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.nature=ba.read_uint8();
		if ( self.nature== None): return False;
		self.mapid=ba.read_uint64();
		if ( self.mapid== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;
		self.base_action=ba.read_uint32();
		if ( self.base_action== None): return False;
		self.advance_action=ba.read_uint32();
		if ( self.advance_action== None): return False;
		self.direction=ba.read_uint8();
		if ( self.direction== None): return False;
		self.in_front=ba.read_uint8();
		if ( self.in_front== None): return False;
		self.btr_team=ba.read_uint32();
		if ( self.btr_team== None): return False;
		self.idx=ba.read_uint32();
		if ( self.idx== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack=ba.read_uint32();
		if ( self.attack== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdefense=ba.read_uint32();
		if ( self.mdefense== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit_rate=ba.read_uint16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_uint16();
		if ( self.avoid_rate== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.login_day=ba.read_uint32();
		if ( self.login_day== None): return False;
		self.ex_data=[];
		for i in range(28):
			self.ex_data.append(ba.read_uint8());
			if ( self.ex_data[i]== None): return False;


		clothlist_count= ba.read_uint8(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_simple_t());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.viplv)):return False;
		if ( not ba.write_uint32(self.vipexp)):return False;
		if ( not ba.write_uint32(self.vip_begin)):return False;
		if ( not ba.write_uint32(self.vip_end)):return False;
		if ( not ba.write_uint32(self.hero_team)):return False;
		if ( not ba.write_uint32(self.color)):return False;
		if ( not ba.write_uint32(self.register_time)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint8(self.prof)):return False;
		if ( not ba.write_uint32(self.prof_lv)):return False;
		if ( not ba.write_uint32(self.honor)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.pkpoint_total)):return False;
		if ( not ba.write_uint32(self.energy)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.nature)):return False;
		if ( not ba.write_uint64(self.mapid)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		if ( not ba.write_uint32(self.base_action)):return False;
		if ( not ba.write_uint32(self.advance_action)):return False;
		if ( not ba.write_uint8(self.direction)):return False;
		if ( not ba.write_uint8(self.in_front)):return False;
		if ( not ba.write_uint32(self.btr_team)):return False;
		if ( not ba.write_uint32(self.idx)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.attack)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdefense)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit_rate)):return False;
		if ( not ba.write_uint16(self.avoid_rate)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint32(self.login_day)):return False;
		if(len(self.ex_data)<>28):return False; 
		for i in range(28):
			if ( not ba.write_uint8(self.ex_data[i])):return False;

		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_simple_t) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/*  */"""
		print tabs+"[viplv]=%s"%(str(self.viplv))
		print tabs+"""/*  */"""
		print tabs+"[vipexp]=%s"%(str(self.vipexp))
		print tabs+"""/*  */"""
		print tabs+"[vip_begin]=%s"%(str(self.vip_begin))
		print tabs+"""/*  */"""
		print tabs+"[vip_end]=%s"%(str(self.vip_end))
		print tabs+"""/*  */"""
		print tabs+"[hero_team]=%s"%(str(self.hero_team))
		print tabs+"""/*  */"""
		print tabs+"[color]=%s"%(str(self.color))
		print tabs+"""/*  */"""
		print tabs+"[register_time]=%s"%(str(self.register_time))
		print tabs+"""/* 宠物种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 职业 */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		print tabs+"[prof_lv]=%s"%(str(self.prof_lv))
		print tabs+"""/*  */"""
		print tabs+"[honor]=%s"%(str(self.honor))
		print tabs+"""/*  */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/*  */"""
		print tabs+"[pkpoint_total]=%s"%(str(self.pkpoint_total))
		print tabs+"""/*  */"""
		print tabs+"[energy]=%s"%(str(self.energy))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* hp当前值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* mp当前值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 五行 */"""
		print tabs+"[nature]=%s"%(str(self.nature))
		print tabs+"""/*  */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/*  */"""
		print tabs+"[base_action]=%s"%(str(self.base_action))
		print tabs+"""/*  */"""
		print tabs+"[advance_action]=%s"%(str(self.advance_action))
		print tabs+"""/*  */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		print tabs+"""/*  */"""
		print tabs+"[in_front]=%s"%(str(self.in_front))
		print tabs+"""/*  */"""
		print tabs+"[btr_team]=%s"%(str(self.btr_team))
		print tabs+"""/* 在队伍中位置 */"""
		print tabs+"[idx]=%s"%(str(self.idx))
		print tabs+"""/*  */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/*  */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 物攻 */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/* 物防 */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdefense]=%s"%(str(self.mdefense))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/*  */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/* 暴击率 */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/* 致命一击率 */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/* 抗混乱 */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/* 抗石化 */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/* 抗冰冻 */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/* 抗昏睡 */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/* 抗诅咒 */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/* 反击概率 */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/* 反震概率 */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/* 反震程度 */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/* 抵御暴击的机率 */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/* 抗致命一击率 */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[login_day]=%s"%(str(self.login_day))
		print tabs+"""#无用数据"""
		print tabs+"[ex_data]=>{";
		for i in range(28):
			print tabs+"    [%d]="%(i)+str(self.ex_data[i]); 

		print tabs+"}"
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_user_info_in :
	"""
参数列表:
	/* 用户ID号 */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_get_user_pet_list_in :
	"""
参数列表:
	/* 要拉取的人物ID */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要拉取的人物ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_get_user_pet_list_out :
	"""
参数列表:
	/* 要拉取的人物ID */
	#类型:uint32
	public userid;

	/* 宠物数量 */
	#类型:uint32
	public pet_cnt;

	/*宠物信息*/
	#变长数组,最大长度:1000, 类型:stru_pet_allinfo
	public pets =array();


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.pet_cnt=ba.read_uint32();
		if ( self.pet_cnt== None): return False;

		pets_count= ba.read_uint32(); 
		if ( pets_count==None ): return False;
		self.pets=[];
		for i in range(pets_count):
			self.pets.append(stru_pet_allinfo());
			if ( not self.pets[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.pet_cnt)):return False;
		pets_count=len(self.pets);
		ba.write_uint32(pets_count);
		for i in range(pets_count):
			if (  not  isinstance(self.pets[i] ,stru_pet_allinfo) ):return False; 
			if ( not self.pets[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要拉取的人物ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物数量 */"""
		print tabs+"[pet_cnt]=%s"%(str(self.pet_cnt))
		print tabs+"#宠物信息"
		print tabs+"[pets]=>{";
		for i in range(len(self.pets)):
			print tabs+"    [%d]=>{"%(i) 
			self.pets[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_user_simple_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_get_user_simple_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class stru_team_info :
	"""
参数列表:
	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public level;

	/*  */
	#类型:uint32
	public count;

	/*  */
	#定长数组,长度:16, 类型:char 
	public team_nick ;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.team_nick=ba.read_buf(16);
		if( self.team_nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		ba.write_buf(self.team_nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/*  */"""
		tmp_str=str(self.team_nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[team_nick]=%s"%(tmp_str)
		
		pass;
	




class cli_get_valid_team_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:500, 类型:stru_team_info
	public team_list =array();


	"""

	def read_from_buf(self, ba ):

		team_list_count= ba.read_uint32(); 
		if ( team_list_count==None ): return False;
		self.team_list=[];
		for i in range(team_list_count):
			self.team_list.append(stru_team_info());
			if ( not self.team_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		team_list_count=len(self.team_list);
		ba.write_uint32(team_list_count);
		for i in range(team_list_count):
			if (  not  isinstance(self.team_list[i] ,stru_team_info) ):return False; 
			if ( not self.team_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[team_list]=>{";
		for i in range(len(self.team_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.team_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_vip_active_2_out :
	"""
参数列表:
	/* 抽奖次数 */
	#类型:uint32
	public drawcnt;

	/*获取的装扮列表*/
	#变长数组,最大长度:2, 类型:stru_cloth_simple_t
	public clothlist =array();


	"""

	def read_from_buf(self, ba ):
		self.drawcnt=ba.read_uint32();
		if ( self.drawcnt== None): return False;

		clothlist_count= ba.read_uint32(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_simple_t());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.drawcnt)):return False;
		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_simple_t) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 抽奖次数 */"""
		print tabs+"[drawcnt]=%s"%(str(self.drawcnt))
		print tabs+"#获取的装扮列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_vip_active_item_out :
	"""
参数列表:
	/*获得的物品*/
	#变长数组,最大长度:2, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#获得的物品"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_vip_item_cnt_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:9999, 类型:vip_item_info_t
	public item_list =array();


	"""

	def read_from_buf(self, ba ):

		item_list_count= ba.read_uint32(); 
		if ( item_list_count==None ): return False;
		self.item_list=[];
		for i in range(item_list_count):
			self.item_list.append(vip_item_info_t());
			if ( not self.item_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		item_list_count=len(self.item_list);
		ba.write_uint32(item_list_count);
		for i in range(item_list_count):
			if (  not  isinstance(self.item_list[i] ,vip_item_info_t) ):return False; 
			if ( not self.item_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[item_list]=>{";
		for i in range(len(self.item_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.item_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_vip_item_in :
	"""
参数列表:
	/* 领取ID */
	#类型:uint32
	public randid;


	"""

	def read_from_buf(self, ba ):
		self.randid=ba.read_uint32();
		if ( self.randid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.randid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 领取ID */"""
		print tabs+"[randid]=%s"%(str(self.randid))
		
		pass;
	




class cli_get_vip_item_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:10, 类型:stru_item
	public items =array();


	"""

	def read_from_buf(self, ba ):

		items_count= ba.read_uint32(); 
		if ( items_count==None ): return False;
		self.items=[];
		for i in range(items_count):
			self.items.append(stru_item());
			if ( not self.items[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		items_count=len(self.items);
		ba.write_uint32(items_count);
		for i in range(items_count):
			if (  not  isinstance(self.items[i] ,stru_item) ):return False; 
			if ( not self.items[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[items]=>{";
		for i in range(len(self.items)):
			print tabs+"    [%d]=>{"%(i) 
			self.items[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_get_water_cnt_out :
	"""
参数列表:
	/* 浇灌次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 浇灌次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_give_vip_activity_in :
	"""
参数列表:
	/* 0：3天；1：7天；2：14天 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0：3天；1：7天；2：14天 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_grp_challenged_out :
	"""
参数列表:
	/* 刷新组ID */
	#类型:uint32
	public refreshed;

	/* 怪物组ID */
	#类型:uint32
	public grpid;

	/* 被挑战的数量，通常为1 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.refreshed=ba.read_uint32();
		if ( self.refreshed== None): return False;
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.refreshed)):return False;
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 刷新组ID */"""
		print tabs+"[refreshed]=%s"%(str(self.refreshed))
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 被挑战的数量，通常为1 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_item_in_out_in :
	"""
参数列表:
	/* 0从仓库取出1放入仓库 */
	#类型:uint32
	public flag;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 操作的物品数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0从仓库取出1放入仓库 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 操作的物品数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_join_watchers_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class cli_keep_sprite_alive_out :
	"""
参数列表:
	/* 服务器时间 */
	#类型:uint32
	public svr_time;

	/* 经验时间类型 1:当天为双倍经验 0:表示当天为单倍经验 */
	#类型:uint32
	public exptime_teyp;

	/* 剩余在线时间 */
	#类型:uint32
	public onlinetime;

	/* 双倍经验时间 */
	#类型:int32
	public double_exp_time;


	"""

	def read_from_buf(self, ba ):
		self.svr_time=ba.read_uint32();
		if ( self.svr_time== None): return False;
		self.exptime_teyp=ba.read_uint32();
		if ( self.exptime_teyp== None): return False;
		self.onlinetime=ba.read_uint32();
		if ( self.onlinetime== None): return False;
		self.double_exp_time=ba.read_int32();
		if ( self.double_exp_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.svr_time)):return False;
		if ( not ba.write_uint32(self.exptime_teyp)):return False;
		if ( not ba.write_uint32(self.onlinetime)):return False;
		if ( not ba.write_int32(self.double_exp_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 服务器时间 */"""
		print tabs+"[svr_time]=%s"%(str(self.svr_time))
		print tabs+"""/* 经验时间类型 1:当天为双倍经验 0:表示当天为单倍经验 */"""
		print tabs+"[exptime_teyp]=%s"%(str(self.exptime_teyp))
		print tabs+"""/* 剩余在线时间 */"""
		print tabs+"[onlinetime]=%s"%(str(self.onlinetime))
		print tabs+"""/* 双倍经验时间 */"""
		print tabs+"[double_exp_time]=%s"%(str(self.double_exp_time))
		
		pass;
	




class cli_kick_user_offline_out :
	"""
参数列表:
	/* 0:午夜12点,1:心跳超时 */
	#类型:uint32
	public reason;


	"""

	def read_from_buf(self, ba ):
		self.reason=ba.read_uint32();
		if ( self.reason== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.reason)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0:午夜12点,1:心跳超时 */"""
		print tabs+"[reason]=%s"%(str(self.reason))
		
		pass;
	




class cli_leave_map_in :
	"""
参数列表:
	/* 用户ID号 */
	#类型:uint32
	public userid;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		
		pass;
	




class cli_leave_position_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_load_battle_in :
	"""
参数列表:
	/* 用户加载百分比 */
	#类型:uint32
	public rate;


	"""

	def read_from_buf(self, ba ):
		self.rate=ba.read_uint32();
		if ( self.rate== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.rate)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户加载百分比 */"""
		print tabs+"[rate]=%s"%(str(self.rate))
		
		pass;
	




class cli_load_ready_in :
	"""
参数列表:
	/* 0，加载失败；1，成功 */
	#类型:uint8
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.flag=ba.read_uint8();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint8(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0，加载失败；1，成功 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_login_in :
	"""
参数列表:
	/* 随机生成的怪物组素材ID */
	#类型:uint32
	public type_id;


	"""

	def read_from_buf(self, ba ):
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 随机生成的怪物组素材ID */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		
		pass;
	




class expfactor_t :
	"""
参数列表:
	/* 经验倍率（未使用 100） */
	#类型:uint32
	public expfactor;

	/*  */
	#类型:uint32
	public expfactor_count;


	"""

	def read_from_buf(self, ba ):
		self.expfactor=ba.read_uint32();
		if ( self.expfactor== None): return False;
		self.expfactor_count=ba.read_uint32();
		if ( self.expfactor_count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.expfactor)):return False;
		if ( not ba.write_uint32(self.expfactor_count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 经验倍率（未使用 100） */"""
		print tabs+"[expfactor]=%s"%(str(self.expfactor))
		print tabs+"""/*  */"""
		print tabs+"[expfactor_count]=%s"%(str(self.expfactor_count))
		
		pass;
	




class cli_login_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public flag;

	/*  */
	#类型:uint32
	public flag2;

	/*  */
	#类型:uint32
	public viplv;

	/*  */
	#类型:uint32
	public vipexp;

	/*  */
	#类型:uint32
	public vip_begin;

	/*  */
	#类型:uint32
	public vip_end;

	/*  */
	#类型:uint32
	public hero_team;

	/*  */
	#类型:uint32
	public color;

	/*  */
	#类型:uint32
	public register_time;

	/* 宠物种族 */
	#类型:uint8
	public race;

	/* 职业 */
	#类型:uint8
	public prof;

	/*  */
	#类型:uint32
	public prof_lv;

	/*  */
	#类型:uint32
	public honor;

	/*  */
	#类型:uint32
	public xiaomee;

	/*  */
	#类型:uint32
	public pkpoint_total;

	/*  */
	#类型:uint32
	public energy;

	/*  */
	#类型:uint32
	public level;

	/*  */
	#类型:uint32
	public experience;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 剩余属性点 */
	#类型:uint16
	public attr_addition;

	/* hp当前值 */
	#类型:uint32
	public hp;

	/* mp当前值 */
	#类型:uint32
	public mp;

	/* 五行 */
	#类型:uint8
	public nature;

	/*  */
	#类型:uint64
	public mapid;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;

	/*  */
	#类型:uint32
	public base_action;

	/*  */
	#类型:uint32
	public advance_action;

	/*  */
	#类型:uint8
	public direction;

	/*  */
	#类型:uint8
	public in_front;

	/*  */
	#定长数组,长度:2, 类型:uint32_t 
	public vip_buffs =array();

	/*  */
	#类型:uint32
	public hp_max;

	/*  */
	#类型:uint32
	public mp_max;

	/* 物攻 */
	#类型:uint32
	public attack;

	/* 物防 */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdefense;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit_rate;

	/*  */
	#类型:uint16
	public avoid_rate;

	/* 暴击率 */
	#类型:uint16
	public critical_attack;

	/* 致命一击率 */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/* 抗混乱 */
	#类型:uint16
	public rconfusion;

	/* 抗石化 */
	#类型:uint16
	public rstone;

	/* 抗冰冻 */
	#类型:uint16
	public rfreeze;

	/* 抗昏睡 */
	#类型:uint16
	public rsleep;

	/* 抗诅咒 */
	#类型:uint16
	public rcurse;

	/* 反击概率 */
	#类型:uint16
	public fight_back;

	/* 反震概率 */
	#类型:uint16
	public strike_back;

	/* 反震程度 */
	#类型:uint16
	public strike_back_hurt;

	/* 抵御暴击的机率 */
	#类型:uint16
	public rcritical_attack;

	/* 抗致命一击率 */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint32
	public login_day;

	/* 无用数据 */
	#定长数组,长度:28, 类型:uint8_t 
	public ex_data =array();

	/*装扮ID列表*/
	#变长数组,最大长度:1, 类型:stru_cloth_simple_t
	public clothlist =array();

	/* 宠物ID（0表示用户自己） */
	#类型:uint32
	public petid;

	/* 宠物类型ID */
	#类型:uint32
	public pettype;

	/* 种族 */
	#类型:uint8
	public pet_race;

	/*  */
	#定长数组,长度:16, 类型:char 
	public pet_nick ;

	/*  */
	#类型:uint32
	public pet_level;

	/*  */
	#类型:uint32
	public Svr_time;

	/*  */
	#类型:uint32
	public Exptime_teyp;

	/* 剩余在线时间 */
	#类型:uint32
	public onlinetime;

	/* 双倍经验时间 */
	#类型:int32
	public double_exp_time;

	/*  */
	#定长数组,长度:3, 类型:expfactor_t 
	public expfactor_list =array();

	/*  */
	#类型:uint32
	public auto_fight_count;

	/* 0无1徒弟2师傅 */
	#类型:uint32
	public relationtype;

	/*  */
	#类型:uint32
	public relation_level;

	/*  */
	#类型:uint32
	public masterlv;

	/* 师徒值 */
	#类型:uint32
	public relationexp;

	/* 出师数量 */
	#类型:uint32
	public graduation;

	/* 可领取奖励的亲密值 */
	#类型:uint32
	public intimacy;

	/**/
	#变长数组,最大长度:5, 类型:stru_relation_item
	public relations =array();


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.flag2=ba.read_uint32();
		if ( self.flag2== None): return False;
		self.viplv=ba.read_uint32();
		if ( self.viplv== None): return False;
		self.vipexp=ba.read_uint32();
		if ( self.vipexp== None): return False;
		self.vip_begin=ba.read_uint32();
		if ( self.vip_begin== None): return False;
		self.vip_end=ba.read_uint32();
		if ( self.vip_end== None): return False;
		self.hero_team=ba.read_uint32();
		if ( self.hero_team== None): return False;
		self.color=ba.read_uint32();
		if ( self.color== None): return False;
		self.register_time=ba.read_uint32();
		if ( self.register_time== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.prof=ba.read_uint8();
		if ( self.prof== None): return False;
		self.prof_lv=ba.read_uint32();
		if ( self.prof_lv== None): return False;
		self.honor=ba.read_uint32();
		if ( self.honor== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.pkpoint_total=ba.read_uint32();
		if ( self.pkpoint_total== None): return False;
		self.energy=ba.read_uint32();
		if ( self.energy== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.nature=ba.read_uint8();
		if ( self.nature== None): return False;
		self.mapid=ba.read_uint64();
		if ( self.mapid== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;
		self.base_action=ba.read_uint32();
		if ( self.base_action== None): return False;
		self.advance_action=ba.read_uint32();
		if ( self.advance_action== None): return False;
		self.direction=ba.read_uint8();
		if ( self.direction== None): return False;
		self.in_front=ba.read_uint8();
		if ( self.in_front== None): return False;
		self.vip_buffs=[];
		for i in range(2):
			self.vip_buffs.append(ba.read_uint32());
			if ( self.vip_buffs[i]== None): return False;

		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack=ba.read_uint32();
		if ( self.attack== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdefense=ba.read_uint32();
		if ( self.mdefense== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit_rate=ba.read_uint16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_uint16();
		if ( self.avoid_rate== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.login_day=ba.read_uint32();
		if ( self.login_day== None): return False;
		self.ex_data=[];
		for i in range(28):
			self.ex_data.append(ba.read_uint8());
			if ( self.ex_data[i]== None): return False;


		clothlist_count= ba.read_uint8(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_simple_t());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;

		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.pet_race=ba.read_uint8();
		if ( self.pet_race== None): return False;
		self.pet_nick=ba.read_buf(16);
		if( self.pet_nick==None ): return False;
		self.pet_level=ba.read_uint32();
		if ( self.pet_level== None): return False;
		self.Svr_time=ba.read_uint32();
		if ( self.Svr_time== None): return False;
		self.Exptime_teyp=ba.read_uint32();
		if ( self.Exptime_teyp== None): return False;
		self.onlinetime=ba.read_uint32();
		if ( self.onlinetime== None): return False;
		self.double_exp_time=ba.read_int32();
		if ( self.double_exp_time== None): return False;
		self.expfactor_list=[];
		for i in range(3):
			self.expfactor_list.append(expfactor_t());
			if ( not self.expfactor_list[i].read_from_buf(ba)):return False;

		self.auto_fight_count=ba.read_uint32();
		if ( self.auto_fight_count== None): return False;
		self.relationtype=ba.read_uint32();
		if ( self.relationtype== None): return False;
		self.relation_level=ba.read_uint32();
		if ( self.relation_level== None): return False;
		self.masterlv=ba.read_uint32();
		if ( self.masterlv== None): return False;
		self.relationexp=ba.read_uint32();
		if ( self.relationexp== None): return False;
		self.graduation=ba.read_uint32();
		if ( self.graduation== None): return False;
		self.intimacy=ba.read_uint32();
		if ( self.intimacy== None): return False;

		relations_count= ba.read_uint32(); 
		if ( relations_count==None ): return False;
		self.relations=[];
		for i in range(relations_count):
			self.relations.append(stru_relation_item());
			if ( not self.relations[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.flag2)):return False;
		if ( not ba.write_uint32(self.viplv)):return False;
		if ( not ba.write_uint32(self.vipexp)):return False;
		if ( not ba.write_uint32(self.vip_begin)):return False;
		if ( not ba.write_uint32(self.vip_end)):return False;
		if ( not ba.write_uint32(self.hero_team)):return False;
		if ( not ba.write_uint32(self.color)):return False;
		if ( not ba.write_uint32(self.register_time)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint8(self.prof)):return False;
		if ( not ba.write_uint32(self.prof_lv)):return False;
		if ( not ba.write_uint32(self.honor)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.pkpoint_total)):return False;
		if ( not ba.write_uint32(self.energy)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.nature)):return False;
		if ( not ba.write_uint64(self.mapid)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		if ( not ba.write_uint32(self.base_action)):return False;
		if ( not ba.write_uint32(self.advance_action)):return False;
		if ( not ba.write_uint8(self.direction)):return False;
		if ( not ba.write_uint8(self.in_front)):return False;
		if(len(self.vip_buffs)<>2):return False; 
		for i in range(2):
			if ( not ba.write_uint32(self.vip_buffs[i])):return False;

		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.attack)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdefense)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit_rate)):return False;
		if ( not ba.write_uint16(self.avoid_rate)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint32(self.login_day)):return False;
		if(len(self.ex_data)<>28):return False; 
		for i in range(28):
			if ( not ba.write_uint8(self.ex_data[i])):return False;

		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_simple_t) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint8(self.pet_race)):return False;
		ba.write_buf(self.pet_nick,16);
		if ( not ba.write_uint32(self.pet_level)):return False;
		if ( not ba.write_uint32(self.Svr_time)):return False;
		if ( not ba.write_uint32(self.Exptime_teyp)):return False;
		if ( not ba.write_uint32(self.onlinetime)):return False;
		if ( not ba.write_int32(self.double_exp_time)):return False;
		if(len(self.expfactor_list)<>3):return False; 
		for i in range(3):
			if (  not  isinstance(self.expfactor_list[i] ,expfactor_t) ):return False; 
			if ( not self.expfactor_list[i].write_to_buf(ba)): return False;

		if ( not ba.write_uint32(self.auto_fight_count)):return False;
		if ( not ba.write_uint32(self.relationtype)):return False;
		if ( not ba.write_uint32(self.relation_level)):return False;
		if ( not ba.write_uint32(self.masterlv)):return False;
		if ( not ba.write_uint32(self.relationexp)):return False;
		if ( not ba.write_uint32(self.graduation)):return False;
		if ( not ba.write_uint32(self.intimacy)):return False;
		relations_count=len(self.relations);
		ba.write_uint32(relations_count);
		for i in range(relations_count):
			if (  not  isinstance(self.relations[i] ,stru_relation_item) ):return False; 
			if ( not self.relations[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/*  */"""
		print tabs+"[flag2]=%s"%(str(self.flag2))
		print tabs+"""/*  */"""
		print tabs+"[viplv]=%s"%(str(self.viplv))
		print tabs+"""/*  */"""
		print tabs+"[vipexp]=%s"%(str(self.vipexp))
		print tabs+"""/*  */"""
		print tabs+"[vip_begin]=%s"%(str(self.vip_begin))
		print tabs+"""/*  */"""
		print tabs+"[vip_end]=%s"%(str(self.vip_end))
		print tabs+"""/*  */"""
		print tabs+"[hero_team]=%s"%(str(self.hero_team))
		print tabs+"""/*  */"""
		print tabs+"[color]=%s"%(str(self.color))
		print tabs+"""/*  */"""
		print tabs+"[register_time]=%s"%(str(self.register_time))
		print tabs+"""/* 宠物种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 职业 */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		print tabs+"[prof_lv]=%s"%(str(self.prof_lv))
		print tabs+"""/*  */"""
		print tabs+"[honor]=%s"%(str(self.honor))
		print tabs+"""/*  */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/*  */"""
		print tabs+"[pkpoint_total]=%s"%(str(self.pkpoint_total))
		print tabs+"""/*  */"""
		print tabs+"[energy]=%s"%(str(self.energy))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* hp当前值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* mp当前值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 五行 */"""
		print tabs+"[nature]=%s"%(str(self.nature))
		print tabs+"""/*  */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/*  */"""
		print tabs+"[base_action]=%s"%(str(self.base_action))
		print tabs+"""/*  */"""
		print tabs+"[advance_action]=%s"%(str(self.advance_action))
		print tabs+"""/*  */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		print tabs+"""/*  */"""
		print tabs+"[in_front]=%s"%(str(self.in_front))
		print tabs+"""#"""
		print tabs+"[vip_buffs]=>{";
		for i in range(2):
			print tabs+"    [%d]="%(i)+str(self.vip_buffs[i]); 

		print tabs+"}"
		print tabs+"""/*  */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/*  */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 物攻 */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/* 物防 */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdefense]=%s"%(str(self.mdefense))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/*  */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/* 暴击率 */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/* 致命一击率 */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/* 抗混乱 */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/* 抗石化 */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/* 抗冰冻 */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/* 抗昏睡 */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/* 抗诅咒 */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/* 反击概率 */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/* 反震概率 */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/* 反震程度 */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/* 抵御暴击的机率 */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/* 抗致命一击率 */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[login_day]=%s"%(str(self.login_day))
		print tabs+"""#无用数据"""
		print tabs+"[ex_data]=>{";
		for i in range(28):
			print tabs+"    [%d]="%(i)+str(self.ex_data[i]); 

		print tabs+"}"
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"""/* 宠物ID（0表示用户自己） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型ID */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 种族 */"""
		print tabs+"[pet_race]=%s"%(str(self.pet_race))
		print tabs+"""/*  */"""
		tmp_str=str(self.pet_nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[pet_nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[pet_level]=%s"%(str(self.pet_level))
		print tabs+"""/*  */"""
		print tabs+"[Svr_time]=%s"%(str(self.Svr_time))
		print tabs+"""/*  */"""
		print tabs+"[Exptime_teyp]=%s"%(str(self.Exptime_teyp))
		print tabs+"""/* 剩余在线时间 */"""
		print tabs+"[onlinetime]=%s"%(str(self.onlinetime))
		print tabs+"""/* 双倍经验时间 */"""
		print tabs+"[double_exp_time]=%s"%(str(self.double_exp_time))
		print tabs+"""#"""
		print tabs+"[expfactor_list]=>{";
		for i in range(3):
			print tabs+"    [%d]=>{"%(i) 
			self.expfactor_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+"}"
		print tabs+"""/*  */"""
		print tabs+"[auto_fight_count]=%s"%(str(self.auto_fight_count))
		print tabs+"""/* 0无1徒弟2师傅 */"""
		print tabs+"[relationtype]=%s"%(str(self.relationtype))
		print tabs+"""/*  */"""
		print tabs+"[relation_level]=%s"%(str(self.relation_level))
		print tabs+"""/*  */"""
		print tabs+"[masterlv]=%s"%(str(self.masterlv))
		print tabs+"""/* 师徒值 */"""
		print tabs+"[relationexp]=%s"%(str(self.relationexp))
		print tabs+"""/* 出师数量 */"""
		print tabs+"[graduation]=%s"%(str(self.graduation))
		print tabs+"""/* 可领取奖励的亲密值 */"""
		print tabs+"[intimacy]=%s"%(str(self.intimacy))
		print tabs+"#"
		print tabs+"[relations]=>{";
		for i in range(len(self.relations)):
			print tabs+"    [%d]=>{"%(i) 
			self.relations[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_mail_items_get_in :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		
		pass;
	




class cli_mail_items_get_out :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		
		pass;
	




class cli_mail_notify_out :
	"""
参数列表:
	/* 邮件类型 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_mail_set_flag_in :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;

	/* 标志位 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		print tabs+"""/* 标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_mail_set_flag_out :
	"""
参数列表:
	/* 邮件id */
	#类型:uint32
	public mailid;

	/* 标志位 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.mailid=ba.read_uint32();
		if ( self.mailid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mailid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件id */"""
		print tabs+"[mailid]=%s"%(str(self.mailid))
		print tabs+"""/* 标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_map_users_in :
	"""
参数列表:
	/* 地图id */
	#类型:uint32
	public mapid;

	/* 地图类型(0,常规地图) */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图id */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型(0,常规地图) */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_maze_goto_map_out :
	"""
参数列表:
	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 地图ID */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_maze_open_portal_in :
	"""
参数列表:
	/* 迷宫ID */
	#类型:uint32
	public maze_id;


	"""

	def read_from_buf(self, ba ):
		self.maze_id=ba.read_uint32();
		if ( self.maze_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maze_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 迷宫ID */"""
		print tabs+"[maze_id]=%s"%(str(self.maze_id))
		
		pass;
	




class cli_maze_open_portal_out :
	"""
参数列表:
	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 地图ID */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_maze_state_change_out :
	"""
参数列表:
	/* 迷宫ID */
	#类型:uint32
	public maze_id;

	/* 状态，0：关闭，1：开启 */
	#类型:uint32
	public active;

	/* 开启位置，x */
	#类型:int32
	public x;

	/* 开启位置，y */
	#类型:uint32
	public y;

	/* 开启地图ID */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.maze_id=ba.read_uint32();
		if ( self.maze_id== None): return False;
		self.active=ba.read_uint32();
		if ( self.active== None): return False;
		self.x=ba.read_int32();
		if ( self.x== None): return False;
		self.y=ba.read_uint32();
		if ( self.y== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maze_id)):return False;
		if ( not ba.write_uint32(self.active)):return False;
		if ( not ba.write_int32(self.x)):return False;
		if ( not ba.write_uint32(self.y)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 迷宫ID */"""
		print tabs+"[maze_id]=%s"%(str(self.maze_id))
		print tabs+"""/* 状态，0：关闭，1：开启 */"""
		print tabs+"[active]=%s"%(str(self.active))
		print tabs+"""/* 开启位置，x */"""
		print tabs+"[x]=%s"%(str(self.x))
		print tabs+"""/* 开启位置，y */"""
		print tabs+"[y]=%s"%(str(self.y))
		print tabs+"""/* 开启地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_next_fight_step_out :
	"""
参数列表:
	/* 遇怪步数 */
	#类型:uint32
	public step;


	"""

	def read_from_buf(self, ba ):
		self.step=ba.read_uint32();
		if ( self.step== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.step)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 遇怪步数 */"""
		print tabs+"[step]=%s"%(str(self.step))
		
		pass;
	




class cli_notify_user_levelup_out :
	"""
参数列表:
	/* 用户ID */
	#类型:uint32
	public userid;

	/* 升级后的等级 */
	#类型:uint32
	public level;

	/* 剩余属性点 */
	#类型:uint32
	public attr_addition;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.attr_addition=ba.read_uint32();
		if ( self.attr_addition== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.attr_addition)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 升级后的等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		
		pass;
	




class cli_noti_add_skill_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:100, 类型:uint32_t
	public skills =array();


	"""

	def read_from_buf(self, ba ):

		skills_count= ba.read_uint32(); 
		if ( skills_count==None ): return False;
		self.skills=[];
		for i in range(skills_count):
			self.skills.append(ba.read_uint32());
			if ( self.skills[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		skills_count=len(self.skills);
		ba.write_uint32(skills_count);
		for i in range(skills_count):
			if ( not ba.write_uint32(self.skills[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[skills]=>{";
		for i in range(len(self.skills)):
			print tabs+"    [%d]="%(i)+str(self.skills[i]); 

		print tabs+'}'
		
		pass;
	




class cli_noti_battle_accepted_out :
	"""
参数列表:
	/* 被挑战者ID */
	#类型:uint32
	public challengee;

	/* 1战斗被接受2战斗被拒绝 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.challengee=ba.read_uint32();
		if ( self.challengee== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.challengee)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 被挑战者ID */"""
		print tabs+"[challengee]=%s"%(str(self.challengee))
		print tabs+"""/* 1战斗被接受2战斗被拒绝 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_noti_battle_started_out :
	"""
参数列表:
	/* 状态0 正常 1超时 */
	#类型:uint32
	public result;


	"""

	def read_from_buf(self, ba ):
		self.result=ba.read_uint32();
		if ( self.result== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.result)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 状态0 正常 1超时 */"""
		print tabs+"[result]=%s"%(str(self.result))
		
		pass;
	




class cli_noti_friend_del_out :
	"""
参数列表:
	/* 用户id */
	#类型:uint32
	public userid;

	/* 用户昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 用户昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_noti_home_pvp_info_out :
	"""
参数列表:
	/* 1:羸，0：输 */
	#类型:uint32
	public is_win_flag;

	/* 游戏超时结束 */
	#类型:uint32
	public is_time_out;


	"""

	def read_from_buf(self, ba ):
		self.is_win_flag=ba.read_uint32();
		if ( self.is_win_flag== None): return False;
		self.is_time_out=ba.read_uint32();
		if ( self.is_time_out== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.is_win_flag)):return False;
		if ( not ba.write_uint32(self.is_time_out)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1:羸，0：输 */"""
		print tabs+"[is_win_flag]=%s"%(str(self.is_win_flag))
		print tabs+"""/* 游戏超时结束 */"""
		print tabs+"[is_time_out]=%s"%(str(self.is_time_out))
		
		pass;
	




class pvp_score_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public scores;

	/* 是否还在战场上 */
	#类型:uint32
	public is_alive;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;
		self.is_alive=ba.read_uint32();
		if ( self.is_alive== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.scores)):return False;
		if ( not ba.write_uint32(self.is_alive)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		print tabs+"""/* 是否还在战场上 */"""
		print tabs+"[is_alive]=%s"%(str(self.is_alive))
		
		pass;
	




class cli_noti_home_pvp_pk_info_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public winner;

	/*  */
	#类型:uint32
	public loser;

	/**/
	#变长数组,最大长度:100, 类型:pvp_score_t
	public score_list =array();


	"""

	def read_from_buf(self, ba ):
		self.winner=ba.read_uint32();
		if ( self.winner== None): return False;
		self.loser=ba.read_uint32();
		if ( self.loser== None): return False;

		score_list_count= ba.read_uint32(); 
		if ( score_list_count==None ): return False;
		self.score_list=[];
		for i in range(score_list_count):
			self.score_list.append(pvp_score_t());
			if ( not self.score_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.winner)):return False;
		if ( not ba.write_uint32(self.loser)):return False;
		score_list_count=len(self.score_list);
		ba.write_uint32(score_list_count);
		for i in range(score_list_count):
			if (  not  isinstance(self.score_list[i] ,pvp_score_t) ):return False; 
			if ( not self.score_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[winner]=%s"%(str(self.winner))
		print tabs+"""/*  */"""
		print tabs+"[loser]=%s"%(str(self.loser))
		print tabs+"#"
		print tabs+"[score_list]=>{";
		for i in range(len(self.score_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.score_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_noti_load_rate_out :
	"""
参数列表:
	/* 用户id */
	#类型:uint32
	public uid;

	/* 加载比例 */
	#类型:uint8
	public rate;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.rate=ba.read_uint8();
		if ( self.rate== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint8(self.rate)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 加载比例 */"""
		print tabs+"[rate]=%s"%(str(self.rate))
		
		pass;
	




class cli_noti_team_challeged_out :
	"""
参数列表:
	/* 挑战时间戳（与userid组成对战id） */
	#类型:uint32
	public timestamp;

	/* 挑战的用户id */
	#类型:uint32
	public userid;

	/* 标志：1发起挑战2取消挑战 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.timestamp=ba.read_uint32();
		if ( self.timestamp== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.timestamp)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 挑战时间戳（与userid组成对战id） */"""
		print tabs+"[timestamp]=%s"%(str(self.timestamp))
		print tabs+"""/* 挑战的用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 标志：1发起挑战2取消挑战 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_noti_team_challeg_out :
	"""
参数列表:
	/* 挑战的用户id */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 挑战的用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_noti_team_state_out :
	"""
参数列表:
	/* 战队ID */
	#类型:uint32
	public teamid;

	/* 人数 */
	#类型:uint32
	public cnt;

	/* 用户id */
	#类型:uint32
	public uid;

	/* 人物等级 */
	#类型:uint32
	public level;

	/* 当前血量 */
	#类型:uint32
	public hp;

	/* 血上限 */
	#类型:uint32
	public hp_max;

	/* 当前魔法 */
	#类型:uint32
	public mp;

	/* 魔上限 */
	#类型:uint32
	public mp_max;

	/* 受伤等级 */
	#类型:uint32
	public injury_lv;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.cnt=ba.read_uint32();
		if ( self.cnt== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.injury_lv=ba.read_uint32();
		if ( self.injury_lv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.cnt)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.injury_lv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 战队ID */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/* 人数 */"""
		print tabs+"[cnt]=%s"%(str(self.cnt))
		print tabs+"""/* 用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 人物等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 当前血量 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 血上限 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 当前魔法 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 魔上限 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injury_lv]=%s"%(str(self.injury_lv))
		
		pass;
	




class cli_noti_tleader_action_in :
	"""
参数列表:
	/* 行动ID */
	#类型:uint32
	public actionid;

	/* 参数1 */
	#类型:uint32
	public param1;

	/* 参数2 */
	#类型:uint32
	public param2;

	/* 自定义缓存长度（最大1024） */
	#类型:uint32
	public len;


	"""

	def read_from_buf(self, ba ):
		self.actionid=ba.read_uint32();
		if ( self.actionid== None): return False;
		self.param1=ba.read_uint32();
		if ( self.param1== None): return False;
		self.param2=ba.read_uint32();
		if ( self.param2== None): return False;
		self.len=ba.read_uint32();
		if ( self.len== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.actionid)):return False;
		if ( not ba.write_uint32(self.param1)):return False;
		if ( not ba.write_uint32(self.param2)):return False;
		if ( not ba.write_uint32(self.len)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 行动ID */"""
		print tabs+"[actionid]=%s"%(str(self.actionid))
		print tabs+"""/* 参数1 */"""
		print tabs+"[param1]=%s"%(str(self.param1))
		print tabs+"""/* 参数2 */"""
		print tabs+"[param2]=%s"%(str(self.param2))
		print tabs+"""/* 自定义缓存长度（最大1024） */"""
		print tabs+"[len]=%s"%(str(self.len))
		
		pass;
	




class cli_noti_tleader_action_out :
	"""
参数列表:
	/* 队长ID */
	#类型:uint32
	public userid;

	/* 行动ID */
	#类型:uint32
	public actionid;

	/* 参数1 */
	#类型:uint32
	public param1;

	/* 参数2 */
	#类型:uint32
	public param2;

	/* 自定义缓存长度（最大1024） */
	#类型:uint32
	public len;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.actionid=ba.read_uint32();
		if ( self.actionid== None): return False;
		self.param1=ba.read_uint32();
		if ( self.param1== None): return False;
		self.param2=ba.read_uint32();
		if ( self.param2== None): return False;
		self.len=ba.read_uint32();
		if ( self.len== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.actionid)):return False;
		if ( not ba.write_uint32(self.param1)):return False;
		if ( not ba.write_uint32(self.param2)):return False;
		if ( not ba.write_uint32(self.len)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 队长ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 行动ID */"""
		print tabs+"[actionid]=%s"%(str(self.actionid))
		print tabs+"""/* 参数1 */"""
		print tabs+"[param1]=%s"%(str(self.param1))
		print tabs+"""/* 参数2 */"""
		print tabs+"[param2]=%s"%(str(self.param2))
		print tabs+"""/* 自定义缓存长度（最大1024） */"""
		print tabs+"[len]=%s"%(str(self.len))
		
		pass;
	




class cli_noti_user_fighted_out :
	"""
参数列表:
	/* 已发招用户id */
	#类型:uint32
	public uid;

	/* 0，用户已发招；非0，该用户的宠物已发招 */
	#类型:uint32
	public sorp;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.sorp=ba.read_uint32();
		if ( self.sorp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.sorp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 已发招用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 0，用户已发招；非0，该用户的宠物已发招 */"""
		print tabs+"[sorp]=%s"%(str(self.sorp))
		
		pass;
	




class cli_not_entry_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public copyid;


	"""

	def read_from_buf(self, ba ):
		self.copyid=ba.read_uint32();
		if ( self.copyid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.copyid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[copyid]=%s"%(str(self.copyid))
		
		pass;
	




class cli_open_box_in :
	"""
参数列表:
	/* 宝箱id */
	#类型:uint32
	public boxid;


	"""

	def read_from_buf(self, ba ):
		self.boxid=ba.read_uint32();
		if ( self.boxid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.boxid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宝箱id */"""
		print tabs+"[boxid]=%s"%(str(self.boxid))
		
		pass;
	




class cli_open_precious_box_in :
	"""
参数列表:
	/* 宝箱id */
	#类型:uint32
	public boxid;

	/* 使用道具的id */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.boxid=ba.read_uint32();
		if ( self.boxid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.boxid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宝箱id */"""
		print tabs+"[boxid]=%s"%(str(self.boxid))
		print tabs+"""/* 使用道具的id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_open_precious_box_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:16, 类型:stru_item
	public item_list =array();


	"""

	def read_from_buf(self, ba ):

		item_list_count= ba.read_uint32(); 
		if ( item_list_count==None ): return False;
		self.item_list=[];
		for i in range(item_list_count):
			self.item_list.append(stru_item());
			if ( not self.item_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		item_list_count=len(self.item_list);
		ba.write_uint32(item_list_count);
		for i in range(item_list_count):
			if (  not  isinstance(self.item_list[i] ,stru_item) ):return False; 
			if ( not self.item_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[item_list]=>{";
		for i in range(len(self.item_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.item_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_open_pumpkin_lantern_out :
	"""
参数列表:
	/* 0 什么都没有 1 答题 2 南瓜军 3 小游戏 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0 什么都没有 1 答题 2 南瓜军 3 小游戏 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_pet_add_base_attr_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 体力点数增加 */
	#类型:uint16
	public physique;

	/* 耐力点数增加 */
	#类型:uint16
	public strength;

	/* 速度点数增加 */
	#类型:uint16
	public quick;

	/* 智力点数增加 */
	#类型:uint16
	public intelligence;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 体力点数增加 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 耐力点数增加 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 速度点数增加 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力点数增加 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		
		pass;
	




class cli_pet_add_base_attr_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public typid;

	/* 种族 */
	#类型:uint8
	public race;

	/* 宠物标志位 */
	#类型:uint32
	public flag;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 等级 */
	#类型:uint32
	public level;

	/* 经验 */
	#类型:uint32
	public experience;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 剩余配点 */
	#类型:uint16
	public attr_addition;

	/* 已配置属性点 */
	#类型:uint16
	public attr_add;

	/* 生命值 */
	#类型:uint32
	public hp;

	/* 魔法值 */
	#类型:uint32
	public mp;

	/* 地 */
	#类型:uint8
	public earth;

	/* 水 */
	#类型:uint8
	public water;

	/* 火 */
	#类型:uint8
	public fire;

	/* 风 */
	#类型:uint8
	public wind;

	/* 受伤等级 */
	#类型:uint32
	public injury_lv;

	/* 状态：0仓库，1休息，2待命，3出战 */
	#类型:uint8
	public state;

	/* 生命最大值 */
	#类型:uint32
	public hp_max;

	/* 魔法最大值 */
	#类型:uint32
	public mp_max;

	/* 攻击 */
	#类型:uint16
	public attack_value;

	/* 防御 */
	#类型:uint16
	public defense_value;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/* 精神 */
	#类型:uint16
	public spirit;

	/* 恢复 */
	#类型:int16
	public resume;

	/* 命中 */
	#类型:uint16
	public hit_rate;

	/* 闪避 */
	#类型:uint16
	public avoid_rate;

	/* 必杀 */
	#类型:uint16
	public bisha;

	/* 反击 */
	#类型:uint16
	public fight_back;

	/* 宠物成长 */
	#类型:uint16
	public para_all;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.typid=ba.read_uint32();
		if ( self.typid== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.attr_add=ba.read_uint16();
		if ( self.attr_add== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.earth=ba.read_uint8();
		if ( self.earth== None): return False;
		self.water=ba.read_uint8();
		if ( self.water== None): return False;
		self.fire=ba.read_uint8();
		if ( self.fire== None): return False;
		self.wind=ba.read_uint8();
		if ( self.wind== None): return False;
		self.injury_lv=ba.read_uint32();
		if ( self.injury_lv== None): return False;
		self.state=ba.read_uint8();
		if ( self.state== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack_value=ba.read_uint16();
		if ( self.attack_value== None): return False;
		self.defense_value=ba.read_uint16();
		if ( self.defense_value== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.spirit=ba.read_uint16();
		if ( self.spirit== None): return False;
		self.resume=ba.read_int16();
		if ( self.resume== None): return False;
		self.hit_rate=ba.read_uint16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_uint16();
		if ( self.avoid_rate== None): return False;
		self.bisha=ba.read_uint16();
		if ( self.bisha== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.para_all=ba.read_uint16();
		if ( self.para_all== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.typid)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint16(self.attr_add)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.earth)):return False;
		if ( not ba.write_uint8(self.water)):return False;
		if ( not ba.write_uint8(self.fire)):return False;
		if ( not ba.write_uint8(self.wind)):return False;
		if ( not ba.write_uint32(self.injury_lv)):return False;
		if ( not ba.write_uint8(self.state)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint16(self.attack_value)):return False;
		if ( not ba.write_uint16(self.defense_value)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.spirit)):return False;
		if ( not ba.write_int16(self.resume)):return False;
		if ( not ba.write_uint16(self.hit_rate)):return False;
		if ( not ba.write_uint16(self.avoid_rate)):return False;
		if ( not ba.write_uint16(self.bisha)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.para_all)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[typid]=%s"%(str(self.typid))
		print tabs+"""/* 种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 宠物标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 经验 */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 剩余配点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* 已配置属性点 */"""
		print tabs+"[attr_add]=%s"%(str(self.attr_add))
		print tabs+"""/* 生命值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 魔法值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 地 */"""
		print tabs+"[earth]=%s"%(str(self.earth))
		print tabs+"""/* 水 */"""
		print tabs+"[water]=%s"%(str(self.water))
		print tabs+"""/* 火 */"""
		print tabs+"[fire]=%s"%(str(self.fire))
		print tabs+"""/* 风 */"""
		print tabs+"[wind]=%s"%(str(self.wind))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injury_lv]=%s"%(str(self.injury_lv))
		print tabs+"""/* 状态：0仓库，1休息，2待命，3出战 */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/* 生命最大值 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 魔法最大值 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 攻击 */"""
		print tabs+"[attack_value]=%s"%(str(self.attack_value))
		print tabs+"""/* 防御 */"""
		print tabs+"[defense_value]=%s"%(str(self.defense_value))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/* 精神 */"""
		print tabs+"[spirit]=%s"%(str(self.spirit))
		print tabs+"""/* 恢复 */"""
		print tabs+"[resume]=%s"%(str(self.resume))
		print tabs+"""/* 命中 */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/* 闪避 */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/* 必杀 */"""
		print tabs+"[bisha]=%s"%(str(self.bisha))
		print tabs+"""/* 反击 */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/* 宠物成长 */"""
		print tabs+"[para_all]=%s"%(str(self.para_all))
		
		pass;
	




class cli_pet_buy_skill_in :
	"""
参数列表:
	/* 商店ID */
	#类型:uint32
	public shopid;

	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 技能id */
	#类型:uint32
	public skill_id;

	/* 技能等级 */
	#类型:uint8
	public skill_lv;


	"""

	def read_from_buf(self, ba ):
		self.shopid=ba.read_uint32();
		if ( self.shopid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_lv=ba.read_uint8();
		if ( self.skill_lv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.shopid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint8(self.skill_lv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商店ID */"""
		print tabs+"[shopid]=%s"%(str(self.shopid))
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skill_lv]=%s"%(str(self.skill_lv))
		
		pass;
	




class cli_pet_buy_skill_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 技能id */
	#类型:uint32
	public skill_id;

	/* 技能等级 */
	#类型:uint8
	public skill_lv;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 花费 */
	#类型:uint32
	public cost;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_lv=ba.read_uint8();
		if ( self.skill_lv== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint8(self.skill_lv)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skill_lv]=%s"%(str(self.skill_lv))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		
		pass;
	




class cli_pet_del_skill_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 技能id */
	#类型:uint32
	public skill_id;

	/* 技能等级 */
	#类型:uint32
	public skill_lv;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_lv=ba.read_uint32();
		if ( self.skill_lv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint32(self.skill_lv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 技能id */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/* 技能等级 */"""
		print tabs+"[skill_lv]=%s"%(str(self.skill_lv))
		
		pass;
	




class cli_pet_follow_in :
	"""
参数列表:
	/* 宠物id；0：收回宠物 */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物id；0：收回宠物 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_pet_follow_out :
	"""
参数列表:
	/* 用户id */
	#类型:uint32
	public userid;

	/* 宠物id；0：收回宠物 */
	#类型:uint32
	public petid;

	/* 宠物类型id */
	#类型:uint32
	public type_id;

	/* 宠物种族 */
	#类型:uint8
	public race;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 宠物等级 */
	#类型:uint32
	public level;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物id；0：收回宠物 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型id */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/* 宠物种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 宠物等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		
		pass;
	




class cli_pic_srv_ip_port_out :
	"""
参数列表:
	/* IP地址 */
	#定长数组,长度:16, 类型:char 
	public ip ;

	/* 端口 */
	#类型:uint16
	public port;

	/* Session */
	#定长数组,长度:16, 类型:char 
	public session ;


	"""

	def read_from_buf(self, ba ):
		self.ip=ba.read_buf(16);
		if( self.ip==None ): return False;
		self.port=ba.read_uint16();
		if ( self.port== None): return False;
		self.session=ba.read_buf(16);
		if( self.session==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.ip,16);
		if ( not ba.write_uint16(self.port)):return False;
		ba.write_buf(self.session,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* IP地址 */"""
		tmp_str=str(self.ip);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[ip]=%s"%(tmp_str)
		print tabs+"""/* 端口 */"""
		print tabs+"[port]=%s"%(str(self.port))
		print tabs+"""/* Session */"""
		tmp_str=str(self.session);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[session]=%s"%(tmp_str)
		
		pass;
	




class cli_post_msg_in :
	"""
参数列表:
	/* 类型 */
	#类型:uint32
	public type;

	/* 主题 */
	#定长数组,长度:60, 类型:char 
	public title ;

	/* 消息长度（最大不超过3000个） */
	#类型:uint32
	public msglen;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.title=ba.read_buf(60);
		if( self.title==None ): return False;
		self.msglen=ba.read_uint32();
		if ( self.msglen== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.title,60);
		if ( not ba.write_uint32(self.msglen)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 主题 */"""
		tmp_str=str(self.title);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[title]=%s"%(tmp_str)
		print tabs+"""/* 消息长度（最大不超过3000个） */"""
		print tabs+"[msglen]=%s"%(str(self.msglen))
		
		pass;
	




class cli_pvp_game_noti_time_out_out :
	"""
参数列表:
	/* 1:游戏开始前等待开始时间，2：游戏开始后,超时结束剩余的时间 */
	#类型:uint32
	public time_out_type;

	/* 游戏 剩余时间 */
	#类型:uint32
	public left_time;


	"""

	def read_from_buf(self, ba ):
		self.time_out_type=ba.read_uint32();
		if ( self.time_out_type== None): return False;
		self.left_time=ba.read_uint32();
		if ( self.left_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.time_out_type)):return False;
		if ( not ba.write_uint32(self.left_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1:游戏开始前等待开始时间，2：游戏开始后,超时结束剩余的时间 */"""
		print tabs+"[time_out_type]=%s"%(str(self.time_out_type))
		print tabs+"""/* 游戏 剩余时间 */"""
		print tabs+"[left_time]=%s"%(str(self.left_time))
		
		pass;
	




class cli_pvp_get_honor_in :
	"""
参数列表:
	/* 称号ID */
	#类型:uint32
	public honorid;


	"""

	def read_from_buf(self, ba ):
		self.honorid=ba.read_uint32();
		if ( self.honorid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.honorid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 称号ID */"""
		print tabs+"[honorid]=%s"%(str(self.honorid))
		
		pass;
	




class cli_pvp_get_honor_out :
	"""
参数列表:
	/* 称号ID */
	#类型:uint32
	public honorid;

	/**/
	#变长数组,最大长度:16, 类型:stru_item
	public item_list =array();


	"""

	def read_from_buf(self, ba ):
		self.honorid=ba.read_uint32();
		if ( self.honorid== None): return False;

		item_list_count= ba.read_uint32(); 
		if ( item_list_count==None ): return False;
		self.item_list=[];
		for i in range(item_list_count):
			self.item_list.append(stru_item());
			if ( not self.item_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.honorid)):return False;
		item_list_count=len(self.item_list);
		ba.write_uint32(item_list_count);
		for i in range(item_list_count):
			if (  not  isinstance(self.item_list[i] ,stru_item) ):return False; 
			if ( not self.item_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 称号ID */"""
		print tabs+"[honorid]=%s"%(str(self.honorid))
		print tabs+"#"
		print tabs+"[item_list]=>{";
		for i in range(len(self.item_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.item_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_read_news_in :
	"""
参数列表:
	/* 1阅读时报 2阅读VIP说明 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1阅读时报 2阅读VIP说明 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_recover_duration_in :
	"""
参数列表:
	/* 道具物品 */
	#类型:uint32
	public itemid;

	/* 装备id */
	#类型:uint32
	public clothid;

	/* 装备type */
	#类型:uint32
	public clothtype;

	/* 位置 */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 道具物品 */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 装备id */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 装备type */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/* 位置 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_recv_task_in :
	"""
参数列表:
	/* 任务Id，从1开始 */
	#类型:uint32
	public taskid;

	/* 客户端buffer */
	#定长数组,长度:128, 类型:char 
	public buffer ;

	/* 客户端标识 */
	#类型:uint32
	public clival;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.buffer=ba.read_buf(128);
		if( self.buffer==None ): return False;
		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		ba.write_buf(self.buffer,128);
		if ( not ba.write_uint32(self.clival)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务Id，从1开始 */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 客户端buffer */"""
		tmp_str=str(self.buffer);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[buffer]=%s"%(tmp_str)
		print tabs+"""/* 客户端标识 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		
		pass;
	




class cli_recv_task_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 客户端标识 */
	#类型:uint32
	public clival;

	/* 节点ID */
	#类型:uint32
	public nodeid;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;
		self.nodeid=ba.read_uint32();
		if ( self.nodeid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.clival)):return False;
		if ( not ba.write_uint32(self.nodeid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 客户端标识 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		print tabs+"""/* 节点ID */"""
		print tabs+"[nodeid]=%s"%(str(self.nodeid))
		
		pass;
	




class cli_refresh_loopgrp_in :
	"""
参数列表:
	/* 怪物组ID（0低级1中级2高级） */
	#类型:uint32
	public grpid;


	"""

	def read_from_buf(self, ba ):
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.grpid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 怪物组ID（0低级1中级2高级） */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		
		pass;
	




class cli_refresh_loopgrp_out :
	"""
参数列表:
	/*获得的物品奖励*/
	#变长数组,最大长度:10, 类型:stru_item
	public itemlist =array();

	/*精灵挑战信息*/
	#变长数组,最大长度:3, 类型:stru_loop_grp
	public grplist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		grplist_count= ba.read_uint32(); 
		if ( grplist_count==None ): return False;
		self.grplist=[];
		for i in range(grplist_count):
			self.grplist.append(stru_loop_grp());
			if ( not self.grplist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		grplist_count=len(self.grplist);
		ba.write_uint32(grplist_count);
		for i in range(grplist_count):
			if (  not  isinstance(self.grplist[i] ,stru_loop_grp) ):return False; 
			if ( not self.grplist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#获得的物品奖励"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#精灵挑战信息"
		print tabs+"[grplist]=>{";
		for i in range(len(self.grplist)):
			print tabs+"    [%d]=>{"%(i) 
			self.grplist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_register_bird_map_in :
	"""
参数列表:
	/* 地图ID（陆行鸟ID） */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID（陆行鸟ID） */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_register_boss_map_in :
	"""
参数列表:
	/* 地图ID（陆行鸟ID） */
	#类型:uint32
	public mapid;


	"""

	def read_from_buf(self, ba ):
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.mapid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图ID（陆行鸟ID） */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		
		pass;
	




class cli_register_boss_map_out :
	"""
参数列表:
	/* 0成功1之前已注册 */
	#类型:uint32
	public succ;


	"""

	def read_from_buf(self, ba ):
		self.succ=ba.read_uint32();
		if ( self.succ== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.succ)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0成功1之前已注册 */"""
		print tabs+"[succ]=%s"%(str(self.succ))
		
		pass;
	




class cli_register_for_team_in :
	"""
参数列表:
	/* 队伍昵称 */
	#定长数组,长度:16, 类型:char 
	public team_nick ;


	"""

	def read_from_buf(self, ba ):
		self.team_nick=ba.read_buf(16);
		if( self.team_nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.team_nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 队伍昵称 */"""
		tmp_str=str(self.team_nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[team_nick]=%s"%(tmp_str)
		
		pass;
	




class cli_register_for_team_out :
	"""
参数列表:
	/* 用户ID */
	#类型:uint32
	public userid;

	/* 队伍昵称 */
	#类型:uint32
	public team_nick;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.team_nick=ba.read_uint32();
		if ( self.team_nick== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.team_nick)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 队伍昵称 */"""
		print tabs+"[team_nick]=%s"%(str(self.team_nick))
		
		pass;
	




class cli_reject_challenge_in :
	"""
参数列表:
	/* 对战时间戳 */
	#类型:uint32
	public timestamp;

	/* 用户id（挑战时的挑战方队长ID） */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.timestamp=ba.read_uint32();
		if ( self.timestamp== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.timestamp)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 对战时间戳 */"""
		print tabs+"[timestamp]=%s"%(str(self.timestamp))
		print tabs+"""/* 用户id（挑战时的挑战方队长ID） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_reject_challenge_out :
	"""
参数列表:
	/* 用户ID号（挑战方队长id） */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID号（挑战方队长id） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class cli_repair_cloth_in :
	"""
参数列表:
	/* 装扮位置（0身上1背包） */
	#类型:uint32
	public pos;

	/* 装扮ID */
	#类型:uint32
	public clothid;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 装扮位置（0身上1背包） */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		print tabs+"""/* 装扮ID */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		
		pass;
	




class cli_repair_cloth_out :
	"""
参数列表:
	/* 修理花费 */
	#类型:uint32
	public cost;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 装扮ID */
	#类型:uint32
	public clothid;

	/* 修理后的最大耐久 */
	#类型:uint32
	public duration_max;

	/* 修理后的当前耐久 */
	#类型:uint32
	public duration;


	"""

	def read_from_buf(self, ba ):
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.duration_max=ba.read_uint32();
		if ( self.duration_max== None): return False;
		self.duration=ba.read_uint32();
		if ( self.duration== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.cost)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.duration_max)):return False;
		if ( not ba.write_uint32(self.duration)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 修理花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 装扮ID */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 修理后的最大耐久 */"""
		print tabs+"[duration_max]=%s"%(str(self.duration_max))
		print tabs+"""/* 修理后的当前耐久 */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		
		pass;
	




class cli_reply_add_relation_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 类型1响应被加徒弟2被加师父 */
	#类型:uint32
	public type;

	/* 校验字符串 */
	#定长数组,长度:32, 类型:char 
	public session ;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.session=ba.read_buf(32);
		if( self.session==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.session,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 类型1响应被加徒弟2被加师父 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 校验字符串 */"""
		tmp_str=str(self.session);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[session]=%s"%(tmp_str)
		
		pass;
	




class cli_reply_add_relation_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 类型：1加徒弟2加师父成功 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 类型：1加徒弟2加师父成功 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_reset_pet_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class stru_cli_pet_info :
	"""
参数列表:
	/* 需要重置的宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 宠物种族 */
	#类型:uint8
	public race;

	/* 宠物标识 */
	#类型:uint32
	public flag;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 等级 */
	#类型:uint32
	public level;

	/* 宠物经验 */
	#类型:uint32
	public experience;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 剩余属性点 */
	#类型:uint16
	public attr_addition;

	/* 已配置属性点 */
	#类型:uint16
	public attr_add;

	/* hp */
	#类型:uint32
	public hp;

	/* mp */
	#类型:uint32
	public mp;

	/* 地 */
	#类型:uint8
	public earth;

	/* 水 */
	#类型:uint8
	public water;

	/* 火 */
	#类型:uint8
	public fire;

	/* 风 */
	#类型:uint8
	public wind;

	/* 受伤等级 */
	#类型:uint32
	public injurylv;

	/* 出战状态 */
	#类型:uint8
	public state;

	/* hp上限 */
	#类型:uint32
	public hpmax;

	/* mp上限 */
	#类型:uint32
	public mpmax;

	/* 物攻 */
	#类型:uint16
	public attack;

	/* 物防 */
	#类型:uint16
	public defense;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/* 精神 */
	#类型:uint16
	public spirit;

	/* 回复 */
	#类型:int16
	public resume;

	/* 命中 */
	#类型:uint16
	public hit;

	/* 闪避 */
	#类型:uint16
	public avoid;

	/* 必杀 */
	#类型:uint16
	public bisha;

	/* 反击 */
	#类型:uint16
	public fightback;

	/* 成长值 */
	#类型:uint16
	public para_all;

	/*宠物技能*/
	#变长数组,最大长度:10, 类型:stru_user_skill
	public skills =array();


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.experience=ba.read_uint32();
		if ( self.experience== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.attr_add=ba.read_uint16();
		if ( self.attr_add== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.earth=ba.read_uint8();
		if ( self.earth== None): return False;
		self.water=ba.read_uint8();
		if ( self.water== None): return False;
		self.fire=ba.read_uint8();
		if ( self.fire== None): return False;
		self.wind=ba.read_uint8();
		if ( self.wind== None): return False;
		self.injurylv=ba.read_uint32();
		if ( self.injurylv== None): return False;
		self.state=ba.read_uint8();
		if ( self.state== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.attack=ba.read_uint16();
		if ( self.attack== None): return False;
		self.defense=ba.read_uint16();
		if ( self.defense== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.spirit=ba.read_uint16();
		if ( self.spirit== None): return False;
		self.resume=ba.read_int16();
		if ( self.resume== None): return False;
		self.hit=ba.read_uint16();
		if ( self.hit== None): return False;
		self.avoid=ba.read_uint16();
		if ( self.avoid== None): return False;
		self.bisha=ba.read_uint16();
		if ( self.bisha== None): return False;
		self.fightback=ba.read_uint16();
		if ( self.fightback== None): return False;
		self.para_all=ba.read_uint16();
		if ( self.para_all== None): return False;

		skills_count= ba.read_uint32(); 
		if ( skills_count==None ): return False;
		self.skills=[];
		for i in range(skills_count):
			self.skills.append(stru_user_skill());
			if ( not self.skills[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.experience)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint16(self.attr_add)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.earth)):return False;
		if ( not ba.write_uint8(self.water)):return False;
		if ( not ba.write_uint8(self.fire)):return False;
		if ( not ba.write_uint8(self.wind)):return False;
		if ( not ba.write_uint32(self.injurylv)):return False;
		if ( not ba.write_uint8(self.state)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint16(self.attack)):return False;
		if ( not ba.write_uint16(self.defense)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.spirit)):return False;
		if ( not ba.write_int16(self.resume)):return False;
		if ( not ba.write_uint16(self.hit)):return False;
		if ( not ba.write_uint16(self.avoid)):return False;
		if ( not ba.write_uint16(self.bisha)):return False;
		if ( not ba.write_uint16(self.fightback)):return False;
		if ( not ba.write_uint16(self.para_all)):return False;
		skills_count=len(self.skills);
		ba.write_uint32(skills_count);
		for i in range(skills_count):
			if (  not  isinstance(self.skills[i] ,stru_user_skill) ):return False; 
			if ( not self.skills[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 需要重置的宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 宠物种族 */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 宠物经验 */"""
		print tabs+"[experience]=%s"%(str(self.experience))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* 已配置属性点 */"""
		print tabs+"[attr_add]=%s"%(str(self.attr_add))
		print tabs+"""/* hp */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* mp */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 地 */"""
		print tabs+"[earth]=%s"%(str(self.earth))
		print tabs+"""/* 水 */"""
		print tabs+"[water]=%s"%(str(self.water))
		print tabs+"""/* 火 */"""
		print tabs+"[fire]=%s"%(str(self.fire))
		print tabs+"""/* 风 */"""
		print tabs+"[wind]=%s"%(str(self.wind))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injurylv]=%s"%(str(self.injurylv))
		print tabs+"""/* 出战状态 */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/* hp上限 */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/* mp上限 */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/* 物攻 */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/* 物防 */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/* 精神 */"""
		print tabs+"[spirit]=%s"%(str(self.spirit))
		print tabs+"""/* 回复 */"""
		print tabs+"[resume]=%s"%(str(self.resume))
		print tabs+"""/* 命中 */"""
		print tabs+"[hit]=%s"%(str(self.hit))
		print tabs+"""/* 闪避 */"""
		print tabs+"[avoid]=%s"%(str(self.avoid))
		print tabs+"""/* 必杀 */"""
		print tabs+"[bisha]=%s"%(str(self.bisha))
		print tabs+"""/* 反击 */"""
		print tabs+"[fightback]=%s"%(str(self.fightback))
		print tabs+"""/* 成长值 */"""
		print tabs+"[para_all]=%s"%(str(self.para_all))
		print tabs+"#宠物技能"
		print tabs+"[skills]=>{";
		for i in range(len(self.skills)):
			print tabs+"    [%d]=>{"%(i) 
			self.skills[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_reset_pet_out :
	"""
参数列表:
	/* 宠物信息 */
	#类型:stru_cli_pet_info
	public pet;


	"""

	def read_from_buf(self, ba ):
		self.pet=stru_cli_pet_info();
		if ( not self.pet.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.pet,stru_cli_pet_info)): return False; 
		if ( not self.pet.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物信息 */""";
		print tabs+"[pet]=>{";
		self.pet.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_reset_user_walk_out :
	"""
参数列表:
	/* 剩余遇敌步数 */
	#类型:uint32
	public leftstep;

	/* 最近正确走路协议的起始x */
	#类型:uint32
	public startx;

	/* 最近正确走路协议的起始y */
	#类型:uint32
	public starty;

	/* 目标x */
	#类型:uint32
	public posx;

	/* 目标y */
	#类型:uint32
	public posy;


	"""

	def read_from_buf(self, ba ):
		self.leftstep=ba.read_uint32();
		if ( self.leftstep== None): return False;
		self.startx=ba.read_uint32();
		if ( self.startx== None): return False;
		self.starty=ba.read_uint32();
		if ( self.starty== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.leftstep)):return False;
		if ( not ba.write_uint32(self.startx)):return False;
		if ( not ba.write_uint32(self.starty)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 剩余遇敌步数 */"""
		print tabs+"[leftstep]=%s"%(str(self.leftstep))
		print tabs+"""/* 最近正确走路协议的起始x */"""
		print tabs+"[startx]=%s"%(str(self.startx))
		print tabs+"""/* 最近正确走路协议的起始y */"""
		print tabs+"[starty]=%s"%(str(self.starty))
		print tabs+"""/* 目标x */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* 目标y */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		
		pass;
	




class cli_re_birth_in :
	"""
参数列表:
	/* 宠物ID（0表示给人物使用） */
	#类型:uint32
	public petid;

	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（0表示给人物使用） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_re_birth_out :
	"""
参数列表:
	/* 宠物ID（0表示用户自己） */
	#类型:uint32
	public petid;

	/* 剩余属性点 */
	#类型:uint32
	public attr_addition;

	/* 血量 */
	#类型:uint32
	public hp;

	/* 魔法值 */
	#类型:uint32
	public mp;

	/* 最大血量 */
	#类型:uint32
	public hp_max;

	/* 最大魔法值 */
	#类型:uint32
	public mp_max;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.attr_addition=ba.read_uint32();
		if ( self.attr_addition== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.attr_addition)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（0表示用户自己） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* 血量 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 魔法值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 最大血量 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 最大魔法值 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		
		pass;
	




class cli_round_info_in :
	"""
参数列表:
	/* 回合总数 */
	#类型:uint16
	public round_cnt;

	/* 当前回合数 */
	#类型:uint16
	public round_idx;


	"""

	def read_from_buf(self, ba ):
		self.round_cnt=ba.read_uint16();
		if ( self.round_cnt== None): return False;
		self.round_idx=ba.read_uint16();
		if ( self.round_idx== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint16(self.round_cnt)):return False;
		if ( not ba.write_uint16(self.round_idx)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 回合总数 */"""
		print tabs+"[round_cnt]=%s"%(str(self.round_cnt))
		print tabs+"""/* 当前回合数 */"""
		print tabs+"[round_idx]=%s"%(str(self.round_idx))
		
		pass;
	




class cli_round_info_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/* 回合总数 */
	#类型:uint16
	public round_cnt;

	/* 当前回合数 */
	#类型:uint16
	public round_idx;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.round_cnt=ba.read_uint16();
		if ( self.round_cnt== None): return False;
		self.round_idx=ba.read_uint16();
		if ( self.round_idx== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint16(self.round_cnt)):return False;
		if ( not ba.write_uint16(self.round_idx)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 回合总数 */"""
		print tabs+"[round_cnt]=%s"%(str(self.round_cnt))
		print tabs+"""/* 当前回合数 */"""
		print tabs+"[round_idx]=%s"%(str(self.round_idx))
		
		pass;
	




class cli_rsp_friend_add_in :
	"""
参数列表:
	/* 好友ID */
	#类型:uint32
	public userid;

	/* 0，拒绝；1，接受 */
	#类型:uint8
	public accept;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.accept=ba.read_uint8();
		if ( self.accept== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint8(self.accept)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 好友ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 0，拒绝；1，接受 */"""
		print tabs+"[accept]=%s"%(str(self.accept))
		
		pass;
	




class cli_rsp_team_info_out :
	"""
参数列表:
	/* 战队ID */
	#类型:uint32
	public teamid;

	/* 战队昵称 */
	#定长数组,长度:16, 类型:char 
	public team_nick ;

	/* 人数 */
	#类型:uint32
	public cnt;

	/* 用户id */
	#类型:uint32
	public uid;

	/* 地图id */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 人物等级 */
	#类型:uint32
	public level;

	/* 当前血量 */
	#类型:uint32
	public hp;

	/* 血上限 */
	#类型:uint32
	public hp_max;

	/* 当前魔法 */
	#类型:uint32
	public mp;

	/* 魔上限 */
	#类型:uint32
	public mp_max;

	/* 受伤等级 */
	#类型:uint32
	public injury_lv;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.team_nick=ba.read_buf(16);
		if( self.team_nick==None ): return False;
		self.cnt=ba.read_uint32();
		if ( self.cnt== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.injury_lv=ba.read_uint32();
		if ( self.injury_lv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		ba.write_buf(self.team_nick,16);
		if ( not ba.write_uint32(self.cnt)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.injury_lv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 战队ID */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/* 战队昵称 */"""
		tmp_str=str(self.team_nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[team_nick]=%s"%(tmp_str)
		print tabs+"""/* 人数 */"""
		print tabs+"[cnt]=%s"%(str(self.cnt))
		print tabs+"""/* 用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 地图id */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 人物等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 当前血量 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* 血上限 */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/* 当前魔法 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 魔上限 */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 受伤等级 */"""
		print tabs+"[injury_lv]=%s"%(str(self.injury_lv))
		
		pass;
	




class cli_sell_clothes_in :
	"""
参数列表:
	/*装扮ID列表*/
	#变长数组,最大长度:10, 类型:uint32_t
	public clothlist =array();


	"""

	def read_from_buf(self, ba ):

		clothlist_count= ba.read_uint32(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(ba.read_uint32());
			if ( self.clothlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if ( not ba.write_uint32(self.clothlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]="%(i)+str(self.clothlist[i]); 

		print tabs+'}'
		
		pass;
	




class cli_sell_clothes_out :
	"""
参数列表:
	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 获得的小米 */
	#类型:uint32
	public addxm;


	"""

	def read_from_buf(self, ba ):
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.addxm=ba.read_uint32();
		if ( self.addxm== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.addxm)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 获得的小米 */"""
		print tabs+"[addxm]=%s"%(str(self.addxm))
		
		pass;
	




class cli_sell_items_in :
	"""
参数列表:
	/* 物品列表数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品列表数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_sell_items_out :
	"""
参数列表:
	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 实际增加的小米数量 */
	#类型:uint32
	public add_value;


	"""

	def read_from_buf(self, ba ):
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.add_value=ba.read_uint32();
		if ( self.add_value== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.add_value)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 实际增加的小米数量 */"""
		print tabs+"[add_value]=%s"%(str(self.add_value))
		
		pass;
	




class cli_send_mail_in :
	"""
参数列表:
	/* 邮件背景的id */
	#类型:uint32
	public themeid;

	/* 邮件标题 */
	#定长数组,长度:64, 类型:char 
	public title ;

	/* 收件人数量，最多10个 */
	#类型:uint32
	public rec_cnt;

	/* 邮件内容字节数 */
	#类型:uint32
	public msg_cnt;


	"""

	def read_from_buf(self, ba ):
		self.themeid=ba.read_uint32();
		if ( self.themeid== None): return False;
		self.title=ba.read_buf(64);
		if( self.title==None ): return False;
		self.rec_cnt=ba.read_uint32();
		if ( self.rec_cnt== None): return False;
		self.msg_cnt=ba.read_uint32();
		if ( self.msg_cnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.themeid)):return False;
		ba.write_buf(self.title,64);
		if ( not ba.write_uint32(self.rec_cnt)):return False;
		if ( not ba.write_uint32(self.msg_cnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 邮件背景的id */"""
		print tabs+"[themeid]=%s"%(str(self.themeid))
		print tabs+"""/* 邮件标题 */"""
		tmp_str=str(self.title);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[title]=%s"%(tmp_str)
		print tabs+"""/* 收件人数量，最多10个 */"""
		print tabs+"[rec_cnt]=%s"%(str(self.rec_cnt))
		print tabs+"""/* 邮件内容字节数 */"""
		print tabs+"[msg_cnt]=%s"%(str(self.msg_cnt))
		
		pass;
	




class stru_pet_state :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_all_pet_state_in :
	"""
参数列表:
	/**/
	#变长数组,最大长度:6, 类型:stru_pet_state
	public pets_list =array();


	"""

	def read_from_buf(self, ba ):

		pets_list_count= ba.read_uint32(); 
		if ( pets_list_count==None ): return False;
		self.pets_list=[];
		for i in range(pets_list_count):
			self.pets_list.append(stru_pet_state());
			if ( not self.pets_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		pets_list_count=len(self.pets_list);
		ba.write_uint32(pets_list_count);
		for i in range(pets_list_count):
			if (  not  isinstance(self.pets_list[i] ,stru_pet_state) ):return False; 
			if ( not self.pets_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[pets_list]=>{";
		for i in range(len(self.pets_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.pets_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_set_body_clothes_in :
	"""
参数列表:
	/*装扮列表*/
	#变长数组,最大长度:16, 类型:stru_cloth_simple_t
	public cloth_list =array();


	"""

	def read_from_buf(self, ba ):

		cloth_list_count= ba.read_uint32(); 
		if ( cloth_list_count==None ): return False;
		self.cloth_list=[];
		for i in range(cloth_list_count):
			self.cloth_list.append(stru_cloth_simple_t());
			if ( not self.cloth_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		cloth_list_count=len(self.cloth_list);
		ba.write_uint32(cloth_list_count);
		for i in range(cloth_list_count):
			if (  not  isinstance(self.cloth_list[i] ,stru_cloth_simple_t) ):return False; 
			if ( not self.cloth_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#装扮列表"
		print tabs+"[cloth_list]=>{";
		for i in range(len(self.cloth_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.cloth_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_set_body_clothes_out :
	"""
参数列表:
	/* 换装用户的米米号 */
	#类型:uint32
	public id;

	/* 标志 */
	#类型:uint32
	public flag;

	/* 称号 */
	#类型:uint32
	public title;

	/*装扮列表*/
	#变长数组,最大长度:16, 类型:stru_cloth_simple_t
	public cloth_list =array();


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.title=ba.read_uint32();
		if ( self.title== None): return False;

		cloth_list_count= ba.read_uint32(); 
		if ( cloth_list_count==None ): return False;
		self.cloth_list=[];
		for i in range(cloth_list_count):
			self.cloth_list.append(stru_cloth_simple_t());
			if ( not self.cloth_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.title)):return False;
		cloth_list_count=len(self.cloth_list);
		ba.write_uint32(cloth_list_count);
		for i in range(cloth_list_count):
			if (  not  isinstance(self.cloth_list[i] ,stru_cloth_simple_t) ):return False; 
			if ( not self.cloth_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 换装用户的米米号 */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/* 标志 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* 称号 */"""
		print tabs+"[title]=%s"%(str(self.title))
		print tabs+"#装扮列表"
		print tabs+"[cloth_list]=>{";
		for i in range(len(self.cloth_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.cloth_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_set_buff_in :
	"""
参数列表:
	/* ID */
	#类型:uint32
	public id;

	/* 数据 */
	#定长数组,长度:32, 类型:uint8_t 
	public buff =array();


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.buff=[];
		for i in range(32):
			self.buff.append(ba.read_uint8());
			if ( self.buff[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if(len(self.buff)<>32):return False; 
		for i in range(32):
			if ( not ba.write_uint8(self.buff[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* ID */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""#数据"""
		print tabs+"[buff]=>{";
		for i in range(32):
			print tabs+"    [%d]="%(i)+str(self.buff[i]); 

		print tabs+"}"
		
		pass;
	




class cli_set_busy_state_in :
	"""
参数列表:
	/* 类型：0组队开关；1普通忙状态；2 PK开关 */
	#类型:uint32
	public type;

	/* 组队开关：1 组队开 0 组队关  普通忙状态：0 离开 1 空闲 2 战斗 3 时报 4 NPC对话 5 游戏或剧情 6 查看信息  PK开关：1 pk开 0 pk关 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 类型：0组队开关；1普通忙状态；2 PK开关 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 组队开关：1 组队开 0 组队关  普通忙状态：0 离开 1 空闲 2 战斗 3 时报 4 NPC对话 5 游戏或剧情 6 查看信息  PK开关：1 pk开 0 pk关 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_busy_state_out :
	"""
参数列表:
	/* 用户ID */
	#类型:uint32
	public userid;

	/* 同请求包 */
	#类型:uint32
	public type;

	/* 同请求包 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 同请求包 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 同请求包 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_flag_in :
	"""
参数列表:
	/* Flag位（0~31 4：有无新活动） */
	#类型:uint32
	public bit;

	/* 0或1 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.bit=ba.read_uint32();
		if ( self.bit== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.bit)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* Flag位（0~31 4：有无新活动） */"""
		print tabs+"[bit]=%s"%(str(self.bit))
		print tabs+"""/* 0或1 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_set_map_state_in :
	"""
参数列表:
	/* 状态标识符 */
	#类型:uint32
	public stateid;

	/* 对应状态 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.stateid=ba.read_uint32();
		if ( self.stateid== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.stateid)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 状态标识符 */"""
		print tabs+"[stateid]=%s"%(str(self.stateid))
		print tabs+"""/* 对应状态 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_map_state_out :
	"""
参数列表:
	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 状态标识符 */
	#类型:uint32
	public stateid;

	/* 对应状态 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.stateid=ba.read_uint32();
		if ( self.stateid== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.stateid)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 状态标识符 */"""
		print tabs+"[stateid]=%s"%(str(self.stateid))
		print tabs+"""/* 对应状态 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_pet_flag_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/* 第xx位 0～31 */
	#类型:uint32
	public bit;

	/* 0或1 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.bit=ba.read_uint32();
		if ( self.bit== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.bit)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 第xx位 0～31 */"""
		print tabs+"[bit]=%s"%(str(self.bit))
		print tabs+"""/* 0或1 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_set_pet_nick_in :
	"""
参数列表:
	/* 宠物标识 */
	#类型:uint32
	public petid;

	/* 要修改的宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 要修改的宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_set_pet_nick_out :
	"""
参数列表:
	/* 用户id */
	#类型:uint32
	public userid;

	/* 宠物id */
	#类型:uint32
	public petid;

	/* 宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户id */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物id */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_set_pet_state_in :
	"""
参数列表:
	/* 宠物标识 */
	#类型:uint32
	public petid;

	/* 状态标志，0：仓库，1：非待命，2：待命 3：出战 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物标识 */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 状态标志，0：仓库，1：非待命，2：待命 3：出战 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_set_pet_state_out :
	"""
参数列表:
	/* 需设置的宠物ID */
	#类型:uint32
	public petid;

	/* 改为待命的宠物ID */
	#类型:uint32
	public petid_other;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.petid_other=ba.read_uint32();
		if ( self.petid_other== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.petid_other)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 需设置的宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 改为待命的宠物ID */"""
		print tabs+"[petid_other]=%s"%(str(self.petid_other))
		
		pass;
	




class cli_set_sth_done_in :
	"""
参数列表:
	/* 物品id，1:是否对话过 3：是否对话过2 */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id，1:是否对话过 3：是否对话过2 */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_set_sth_done_out :
	"""
参数列表:
	/* 物品id */
	#类型:uint32
	public itemid;

	/* 完成次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 完成次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_set_task_clibuf_in :
	"""
参数列表:
	/* 要获取buf的任务ID */
	#类型:uint32
	public taskid;

	/* Buf内容 */
	#定长数组,长度:128, 类型:uint8_t 
	public as_buf =array();

	/* 客户端标识 */
	#类型:uint32
	public clival;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.as_buf=[];
		for i in range(128):
			self.as_buf.append(ba.read_uint8());
			if ( self.as_buf[i]== None): return False;

		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if(len(self.as_buf)<>128):return False; 
		for i in range(128):
			if ( not ba.write_uint8(self.as_buf[i])):return False;

		if ( not ba.write_uint32(self.clival)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要获取buf的任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""#Buf内容"""
		print tabs+"[as_buf]=>{";
		for i in range(128):
			print tabs+"    [%d]="%(i)+str(self.as_buf[i]); 

		print tabs+"}"
		print tabs+"""/* 客户端标识 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		
		pass;
	




class cli_set_task_clibuf_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 客户端标识 */
	#类型:uint32
	public clival;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.clival)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 客户端标识 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		
		pass;
	




class cli_set_user_color_in :
	"""
参数列表:
	/* 颜色果实ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 颜色果实ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_set_user_color_out :
	"""
参数列表:
	/* 修改颜色的用户ID */
	#类型:uint32
	public userid;

	/* 修改后的颜色 */
	#类型:uint32
	public color;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.color=ba.read_uint32();
		if ( self.color== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.color)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 修改颜色的用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 修改后的颜色 */"""
		print tabs+"[color]=%s"%(str(self.color))
		
		pass;
	




class cli_set_user_nick_in :
	"""
参数列表:
	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_set_user_nick_out :
	"""
参数列表:
	/* 修改昵称的用户ID */
	#类型:uint32
	public userid;

	/* 修改后的昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 修改昵称的用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 修改后的昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_signin_day_out :
	"""
参数列表:
	/*获得的物品*/
	#变长数组,最大长度:3, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#获得的物品"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_start_double_exp_out :
	"""
参数列表:
	/* 服务器时间 */
	#类型:uint32
	public svr_time;

	/* 经验时间类型 1:当天为双倍经验 0:表示当天为单倍经验 */
	#类型:uint32
	public exptime_teyp;

	/* 剩余在线时间 */
	#类型:uint32
	public onlinetime;

	/* 双倍经验时间 */
	#类型:int32
	public double_exp_time;


	"""

	def read_from_buf(self, ba ):
		self.svr_time=ba.read_uint32();
		if ( self.svr_time== None): return False;
		self.exptime_teyp=ba.read_uint32();
		if ( self.exptime_teyp== None): return False;
		self.onlinetime=ba.read_uint32();
		if ( self.onlinetime== None): return False;
		self.double_exp_time=ba.read_int32();
		if ( self.double_exp_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.svr_time)):return False;
		if ( not ba.write_uint32(self.exptime_teyp)):return False;
		if ( not ba.write_uint32(self.onlinetime)):return False;
		if ( not ba.write_int32(self.double_exp_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 服务器时间 */"""
		print tabs+"[svr_time]=%s"%(str(self.svr_time))
		print tabs+"""/* 经验时间类型 1:当天为双倍经验 0:表示当天为单倍经验 */"""
		print tabs+"[exptime_teyp]=%s"%(str(self.exptime_teyp))
		print tabs+"""/* 剩余在线时间 */"""
		print tabs+"[onlinetime]=%s"%(str(self.onlinetime))
		print tabs+"""/* 双倍经验时间 */"""
		print tabs+"[double_exp_time]=%s"%(str(self.double_exp_time))
		
		pass;
	




class cli_start_game_in :
	"""
参数列表:
	/* 游戏类型 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 游戏类型 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_start_hangup_in :
	"""
参数列表:
	/* 座位号 */
	#类型:uint32
	public seatid;

	/* 挂机类型（1挂经验2挂宠物经验3挂技能经验） */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.seatid=ba.read_uint32();
		if ( self.seatid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.seatid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 座位号 */"""
		print tabs+"[seatid]=%s"%(str(self.seatid))
		print tabs+"""/* 挂机类型（1挂经验2挂宠物经验3挂技能经验） */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_start_hangup_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 座位号 */
	#类型:uint32
	public seatid;

	/* 挂机类型（1挂经验2挂宠物经验3挂技能经验） */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.seatid=ba.read_uint32();
		if ( self.seatid== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.seatid)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 座位号 */"""
		print tabs+"[seatid]=%s"%(str(self.seatid))
		print tabs+"""/* 挂机类型（1挂经验2挂宠物经验3挂技能经验） */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_stop_hangup_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 停止挂机原因（0主动停止1防沉迷时间到） */
	#类型:uint32
	public reason;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.reason=ba.read_uint32();
		if ( self.reason== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.reason)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 停止挂机原因（0主动停止1防沉迷时间到） */"""
		print tabs+"[reason]=%s"%(str(self.reason))
		
		pass;
	




class cli_sync_beast_kill_out :
	"""
参数列表:
	/* 全局杀怪数量 */
	#类型:uint32
	public beastcnt;


	"""

	def read_from_buf(self, ba ):
		self.beastcnt=ba.read_uint32();
		if ( self.beastcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.beastcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 全局杀怪数量 */"""
		print tabs+"[beastcnt]=%s"%(str(self.beastcnt))
		
		pass;
	




class cli_sync_pkinfo_out :
	"""
参数列表:
	/* 是否显示积分结算（1显示0不显示） */
	#类型:uint32
	public show;

	/* 总的积分结余 */
	#类型:uint32
	public pktotal;

	/* 当日积分结余 */
	#类型:uint32
	public pkday;

	/* 对战获得积分 */
	#类型:uint32
	public pkget;


	"""

	def read_from_buf(self, ba ):
		self.show=ba.read_uint32();
		if ( self.show== None): return False;
		self.pktotal=ba.read_uint32();
		if ( self.pktotal== None): return False;
		self.pkday=ba.read_uint32();
		if ( self.pkday== None): return False;
		self.pkget=ba.read_uint32();
		if ( self.pkget== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.show)):return False;
		if ( not ba.write_uint32(self.pktotal)):return False;
		if ( not ba.write_uint32(self.pkday)):return False;
		if ( not ba.write_uint32(self.pkget)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 是否显示积分结算（1显示0不显示） */"""
		print tabs+"[show]=%s"%(str(self.show))
		print tabs+"""/* 总的积分结余 */"""
		print tabs+"[pktotal]=%s"%(str(self.pktotal))
		print tabs+"""/* 当日积分结余 */"""
		print tabs+"[pkday]=%s"%(str(self.pkday))
		print tabs+"""/* 对战获得积分 */"""
		print tabs+"[pkget]=%s"%(str(self.pkget))
		
		pass;
	




class cli_sync_user_time_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public time;


	"""

	def read_from_buf(self, ba ):
		self.time=ba.read_uint32();
		if ( self.time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[time]=%s"%(str(self.time))
		
		pass;
	




class cli_talk_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public obj_userid;

	/**/
	#变长数组,最大长度:100000, 类型:char
	public msg ;


	"""

	def read_from_buf(self, ba ):
		self.obj_userid=ba.read_uint32();
		if ( self.obj_userid== None): return False;

		msg_count= ba.read_uint32(); 
		if ( msg_count==None ): return False;
		self.msg=ba.read_buf(msg_count);
		if( self.msg==None ):return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.obj_userid)):return False;
		msg_count=len(self.msg);
		ba.write_uint32(msg_count);
		ba.write_buf(self.msg,msg_count);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[obj_userid]=%s"%(str(self.obj_userid))
		print tabs+"""/*  */"""
		print tabs+"[msg]=%s"%(str(self.msg))
		
		pass;
	




class cli_text_notify_in :
	"""
参数列表:
	/* 1051，申请加为好友 1052，同意/拒绝加为好友 1323，邀请加入队伍 1325，同意/拒绝加入队伍 1327，申请加入队伍 1329，同意/拒绝对方申请 */
	#类型:uint32
	public type;

	/* 地图ID，该字段暂时未用 */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;

	/* 用户ID号 */
	#类型:uint32
	public userid;

	/* 用户昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 是否接受 */
	#类型:uint32
	public accept;

	/* 时间 */
	#类型:uint32
	public now;

	/* 暂时未用 */
	#类型:uint32
	public pic;

	/* 消息的长度 */
	#类型:uint32
	public infomsglen;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.accept=ba.read_uint32();
		if ( self.accept== None): return False;
		self.now=ba.read_uint32();
		if ( self.now== None): return False;
		self.pic=ba.read_uint32();
		if ( self.pic== None): return False;
		self.infomsglen=ba.read_uint32();
		if ( self.infomsglen== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.accept)):return False;
		if ( not ba.write_uint32(self.now)):return False;
		if ( not ba.write_uint32(self.pic)):return False;
		if ( not ba.write_uint32(self.infomsglen)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1051，申请加为好友 1052，同意/拒绝加为好友 1323，邀请加入队伍 1325，同意/拒绝加入队伍 1327，申请加入队伍 1329，同意/拒绝对方申请 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 地图ID，该字段暂时未用 */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		print tabs+"""/* 用户ID号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 用户昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 是否接受 */"""
		print tabs+"[accept]=%s"%(str(self.accept))
		print tabs+"""/* 时间 */"""
		print tabs+"[now]=%s"%(str(self.now))
		print tabs+"""/* 暂时未用 */"""
		print tabs+"[pic]=%s"%(str(self.pic))
		print tabs+"""/* 消息的长度 */"""
		print tabs+"[infomsglen]=%s"%(str(self.infomsglen))
		
		pass;
	




class stru_add_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public itemcnt;

	/* 价 格 */
	#类型:uint32
	public price;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		print tabs+"""/* 价 格 */"""
		print tabs+"[price]=%s"%(str(self.price))
		
		pass;
	




class cli_trade_add_item_in :
	"""
参数列表:
	/**/
	#变长数组,最大长度:1000, 类型:stru_add_item
	public items =array();


	"""

	def read_from_buf(self, ba ):

		items_count= ba.read_uint32(); 
		if ( items_count==None ): return False;
		self.items=[];
		for i in range(items_count):
			self.items.append(stru_add_item());
			if ( not self.items[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		items_count=len(self.items);
		ba.write_uint32(items_count);
		for i in range(items_count):
			if (  not  isinstance(self.items[i] ,stru_add_item) ):return False; 
			if ( not self.items[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[items]=>{";
		for i in range(len(self.items)):
			print tabs+"    [%d]=>{"%(i) 
			self.items[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_trade_add_item_out :
	"""
参数列表:
	/* 成功上架商品个数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 成功上架商品个数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_trade_buy_item_in :
	"""
参数列表:
	/* 对方id */
	#类型:uint32
	public uid;

	/* 交易id */
	#类型:uint32
	public tradeid;

	/* 物品id */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public itemcnt;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.tradeid=ba.read_uint32();
		if ( self.tradeid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.tradeid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 对方id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 交易id */"""
		print tabs+"[tradeid]=%s"%(str(self.tradeid))
		print tabs+"""/* 物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		
		pass;
	




class cli_trade_buy_item_out :
	"""
参数列表:
	/* 卖家id */
	#类型:uint32
	public uid;

	/* 物品id */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public itemcnt;

	/* 交易花费 */
	#类型:uint32
	public money;

	/* 税 */
	#类型:uint32
	public tax;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;
		self.money=ba.read_uint32();
		if ( self.money== None): return False;
		self.tax=ba.read_uint32();
		if ( self.tax== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		if ( not ba.write_uint32(self.money)):return False;
		if ( not ba.write_uint32(self.tax)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 卖家id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		print tabs+"""/* 交易花费 */"""
		print tabs+"[money]=%s"%(str(self.money))
		print tabs+"""/* 税 */"""
		print tabs+"[tax]=%s"%(str(self.tax))
		
		pass;
	




class cli_trade_change_shop_in :
	"""
参数列表:
	/* 0 抢占店铺 1 中止店铺 2 开店 3 关闭店铺  5修改名字 */
	#类型:uint32
	public cmd;

	/* 占位时添位置号 其他情况不用添 */
	#类型:uint32
	public sid;

	/* 店铺名字 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.cmd=ba.read_uint32();
		if ( self.cmd== None): return False;
		self.sid=ba.read_uint32();
		if ( self.sid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.cmd)):return False;
		if ( not ba.write_uint32(self.sid)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0 抢占店铺 1 中止店铺 2 开店 3 关闭店铺  5修改名字 */"""
		print tabs+"[cmd]=%s"%(str(self.cmd))
		print tabs+"""/* 占位时添位置号 其他情况不用添 */"""
		print tabs+"[sid]=%s"%(str(self.sid))
		print tabs+"""/* 店铺名字 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_trade_change_shop_out :
	"""
参数列表:
	/* 0 抢占店铺 1中止店铺 2 开店 3 关闭店铺 4超时关闭 5 店铺名字改变 */
	#类型:uint32
	public cmd;

	/* 位置号 */
	#类型:uint32
	public sid;

	/*  */
	#类型:uint32
	public uid;

	/* 状态  0空闲 1准备中2开店中 */
	#类型:uint32
	public state;


	"""

	def read_from_buf(self, ba ):
		self.cmd=ba.read_uint32();
		if ( self.cmd== None): return False;
		self.sid=ba.read_uint32();
		if ( self.sid== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.cmd)):return False;
		if ( not ba.write_uint32(self.sid)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0 抢占店铺 1中止店铺 2 开店 3 关闭店铺 4超时关闭 5 店铺名字改变 */"""
		print tabs+"[cmd]=%s"%(str(self.cmd))
		print tabs+"""/* 位置号 */"""
		print tabs+"[sid]=%s"%(str(self.sid))
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 状态  0空闲 1准备中2开店中 */"""
		print tabs+"[state]=%s"%(str(self.state))
		
		pass;
	




class cli_trade_get_items_in :
	"""
参数列表:
	/* 店主id */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 店主id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class stru_trade_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public tradeid;

	/*  */
	#类型:uint32
	public itemid;

	/* 物品数量 */
	#类型:uint32
	public itemcnt;

	/*  */
	#类型:uint32
	public price;

	/*  */
	#类型:uint32
	public tax;


	"""

	def read_from_buf(self, ba ):
		self.tradeid=ba.read_uint32();
		if ( self.tradeid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.tax=ba.read_uint32();
		if ( self.tax== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.tradeid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.tax)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[tradeid]=%s"%(str(self.tradeid))
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 物品数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		print tabs+"""/*  */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/*  */"""
		print tabs+"[tax]=%s"%(str(self.tax))
		
		pass;
	




class stru_body_cloth :
	"""
参数列表:
	/*  */
	#类型:uint32
	public clothid;

	/*  */
	#类型:uint32
	public clothtype;

	/*  */
	#类型:uint32
	public gridid;

	/*  */
	#类型:uint32
	public hpmax;

	/*  */
	#类型:uint32
	public mpmax;

	/*  */
	#类型:uint16
	public level;

	/*  */
	#类型:uint16
	public duration;

	/*  */
	#类型:uint16
	public mduration;

	/*  */
	#类型:uint32
	public atk;

	/*  */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdef;

	/*  */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit;

	/*  */
	#类型:uint16
	public avoid;

	/*  */
	#类型:uint16
	public critical_attack;

	/*  */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/*  */
	#类型:uint16
	public rconfusion;

	/*  */
	#类型:uint16
	public rstone;

	/*  */
	#类型:uint16
	public rfreeze;

	/*  */
	#类型:uint16
	public rsleep;

	/*  */
	#类型:uint16
	public rcurse;

	/*  */
	#类型:uint16
	public fight_back;

	/*  */
	#类型:uint16
	public strike_back;

	/*  */
	#类型:uint16
	public strike_back_hurt;

	/*  */
	#类型:uint16
	public rcritical_attack;

	/*  */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint16
	public quality;


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.gridid=ba.read_uint32();
		if ( self.gridid== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.level=ba.read_uint16();
		if ( self.level== None): return False;
		self.duration=ba.read_uint16();
		if ( self.duration== None): return False;
		self.mduration=ba.read_uint16();
		if ( self.mduration== None): return False;
		self.atk=ba.read_uint32();
		if ( self.atk== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdef=ba.read_uint32();
		if ( self.mdef== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit=ba.read_uint16();
		if ( self.hit== None): return False;
		self.avoid=ba.read_uint16();
		if ( self.avoid== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.quality=ba.read_uint16();
		if ( self.quality== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.gridid)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint16(self.level)):return False;
		if ( not ba.write_uint16(self.duration)):return False;
		if ( not ba.write_uint16(self.mduration)):return False;
		if ( not ba.write_uint32(self.atk)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdef)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit)):return False;
		if ( not ba.write_uint16(self.avoid)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint16(self.quality)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/*  */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/*  */"""
		print tabs+"[gridid]=%s"%(str(self.gridid))
		print tabs+"""/*  */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/*  */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		print tabs+"""/*  */"""
		print tabs+"[mduration]=%s"%(str(self.mduration))
		print tabs+"""/*  */"""
		print tabs+"[atk]=%s"%(str(self.atk))
		print tabs+"""/*  */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdef]=%s"%(str(self.mdef))
		print tabs+"""/*  */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit]=%s"%(str(self.hit))
		print tabs+"""/*  */"""
		print tabs+"[avoid]=%s"%(str(self.avoid))
		print tabs+"""/*  */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/*  */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/*  */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/*  */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/*  */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/*  */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/*  */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/*  */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/*  */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/*  */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[quality]=%s"%(str(self.quality))
		
		pass;
	




class stru_trade_cloth :
	"""
参数列表:
	/*  */
	#类型:uint32
	public tradeid;

	/* 衣服id */
	#类型:uint32
	public clothid;

	/* 类型 */
	#类型:uint32
	public clothtype;

	/* 价 格 */
	#类型:uint32
	public price;

	/* 税收 */
	#类型:uint32
	public tax;

	/*  */
	#类型:stru_body_cloth
	public attr;


	"""

	def read_from_buf(self, ba ):
		self.tradeid=ba.read_uint32();
		if ( self.tradeid== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.tax=ba.read_uint32();
		if ( self.tax== None): return False;
		self.attr=stru_body_cloth();
		if ( not self.attr.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.tradeid)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.tax)):return False;
		if ( not isinstance(self.attr,stru_body_cloth)): return False; 
		if ( not self.attr.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[tradeid]=%s"%(str(self.tradeid))
		print tabs+"""/* 衣服id */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 类型 */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/* 价 格 */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/* 税收 */"""
		print tabs+"[tax]=%s"%(str(self.tax))
		print tabs+"""/*  */""";
		print tabs+"[attr]=>{";
		self.attr.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class cli_trade_get_items_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;

	/* 剩余时间 */
	#类型:uint32
	public lefttime;

	/*物品列表*/
	#变长数组,最大长度:1000, 类型:stru_trade_item
	public items =array();

	/*装备列表*/
	#变长数组,最大长度:1000, 类型:stru_trade_cloth
	public cloths =array();


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.lefttime=ba.read_uint32();
		if ( self.lefttime== None): return False;

		items_count= ba.read_uint32(); 
		if ( items_count==None ): return False;
		self.items=[];
		for i in range(items_count):
			self.items.append(stru_trade_item());
			if ( not self.items[i].read_from_buf(ba)):return False;


		cloths_count= ba.read_uint32(); 
		if ( cloths_count==None ): return False;
		self.cloths=[];
		for i in range(cloths_count):
			self.cloths.append(stru_trade_cloth());
			if ( not self.cloths[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.lefttime)):return False;
		items_count=len(self.items);
		ba.write_uint32(items_count);
		for i in range(items_count):
			if (  not  isinstance(self.items[i] ,stru_trade_item) ):return False; 
			if ( not self.items[i].write_to_buf(ba)): return False;

		cloths_count=len(self.cloths);
		ba.write_uint32(cloths_count);
		for i in range(cloths_count):
			if (  not  isinstance(self.cloths[i] ,stru_trade_cloth) ):return False; 
			if ( not self.cloths[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 剩余时间 */"""
		print tabs+"[lefttime]=%s"%(str(self.lefttime))
		print tabs+"#物品列表"
		print tabs+"[items]=>{";
		for i in range(len(self.items)):
			print tabs+"    [%d]=>{"%(i) 
			self.items[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#装备列表"
		print tabs+"[cloths]=>{";
		for i in range(len(self.cloths)):
			print tabs+"    [%d]=>{"%(i) 
			self.cloths[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_trade_get_mapid_in :
	"""
参数列表:
	/* 房间号  0xFFFFFFFF表示第一次由系统分配 */
	#类型:uint32
	public roomid;


	"""

	def read_from_buf(self, ba ):
		self.roomid=ba.read_uint32();
		if ( self.roomid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.roomid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 房间号  0xFFFFFFFF表示第一次由系统分配 */"""
		print tabs+"[roomid]=%s"%(str(self.roomid))
		
		pass;
	




class cli_trade_get_mapid_out :
	"""
参数列表:
	/* 房间号 */
	#类型:uint32
	public roomid;

	/* 地图ID */
	#类型:uint32
	public mapid;

	/* 地图类型 */
	#类型:uint32
	public maptype;


	"""

	def read_from_buf(self, ba ):
		self.roomid=ba.read_uint32();
		if ( self.roomid== None): return False;
		self.mapid=ba.read_uint32();
		if ( self.mapid== None): return False;
		self.maptype=ba.read_uint32();
		if ( self.maptype== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.roomid)):return False;
		if ( not ba.write_uint32(self.mapid)):return False;
		if ( not ba.write_uint32(self.maptype)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 房间号 */"""
		print tabs+"[roomid]=%s"%(str(self.roomid))
		print tabs+"""/* 地图ID */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* 地图类型 */"""
		print tabs+"[maptype]=%s"%(str(self.maptype))
		
		pass;
	




class cli_trade_get_records_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		
		pass;
	




class stru_trade_record :
	"""
参数列表:
	/* 物品id或者装备类型clothtype */
	#类型:uint32
	public itemid;

	/* 数量 */
	#类型:uint32
	public itemcnt;

	/* 交易价格 */
	#类型:uint32
	public price;

	/* 税收 */
	#类型:uint32
	public tax;

	/* 交易时间 */
	#类型:uint32
	public opt_time;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.itemcnt=ba.read_uint32();
		if ( self.itemcnt== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.tax=ba.read_uint32();
		if ( self.tax== None): return False;
		self.opt_time=ba.read_uint32();
		if ( self.opt_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.itemcnt)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.tax)):return False;
		if ( not ba.write_uint32(self.opt_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品id或者装备类型clothtype */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 数量 */"""
		print tabs+"[itemcnt]=%s"%(str(self.itemcnt))
		print tabs+"""/* 交易价格 */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/* 税收 */"""
		print tabs+"[tax]=%s"%(str(self.tax))
		print tabs+"""/* 交易时间 */"""
		print tabs+"[opt_time]=%s"%(str(self.opt_time))
		
		pass;
	




class cli_trade_get_records_out :
	"""
参数列表:
	/* 拉取卖家的id */
	#类型:uint32
	public uid;

	/*交易记录*/
	#变长数组,最大长度:1000, 类型:stru_trade_record
	public info =array();


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;

		info_count= ba.read_uint32(); 
		if ( info_count==None ): return False;
		self.info=[];
		for i in range(info_count):
			self.info.append(stru_trade_record());
			if ( not self.info[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		info_count=len(self.info);
		ba.write_uint32(info_count);
		for i in range(info_count):
			if (  not  isinstance(self.info[i] ,stru_trade_record) ):return False; 
			if ( not self.info[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 拉取卖家的id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"#交易记录"
		print tabs+"[info]=>{";
		for i in range(len(self.info)):
			print tabs+"    [%d]=>{"%(i) 
			self.info[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_trade_shop :
	"""
参数列表:
	/*  */
	#类型:uint32
	public state;

	/*  */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public prof;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.state=ba.read_uint32();
		if ( self.state== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.state)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.prof)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class cli_trade_get_shop_info_out :
	"""
参数列表:
	/*  */
	#定长数组,长度:6, 类型:stru_trade_shop 
	public info =array();


	"""

	def read_from_buf(self, ba ):
		self.info=[];
		for i in range(6):
			self.info.append(stru_trade_shop());
			if ( not self.info[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if(len(self.info)<>6):return False; 
		for i in range(6):
			if (  not  isinstance(self.info[i] ,stru_trade_shop) ):return False; 
			if ( not self.info[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""#"""
		print tabs+"[info]=>{";
		for i in range(6):
			print tabs+"    [%d]=>{"%(i) 
			self.info[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+"}"
		
		pass;
	




class cli_train_race_skill_in :
	"""
参数列表:
	/* 药丸id */
	#类型:uint32
	public itemid;

	/* 额外物品 */
	#类型:uint32
	public extra_itemid;

	/*  */
	#类型:uint32
	public petid;

	/* 额外物品数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.extra_itemid=ba.read_uint32();
		if ( self.extra_itemid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.extra_itemid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 药丸id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 额外物品 */"""
		print tabs+"[extra_itemid]=%s"%(str(self.extra_itemid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 额外物品数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_train_race_skill_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:3, 类型:uint32_t
	public skill_list =array();


	"""

	def read_from_buf(self, ba ):

		skill_list_count= ba.read_uint32(); 
		if ( skill_list_count==None ): return False;
		self.skill_list=[];
		for i in range(skill_list_count):
			self.skill_list.append(ba.read_uint32());
			if ( self.skill_list[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		skill_list_count=len(self.skill_list);
		ba.write_uint32(skill_list_count);
		for i in range(skill_list_count):
			if ( not ba.write_uint32(self.skill_list[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[skill_list]=>{";
		for i in range(len(self.skill_list)):
			print tabs+"    [%d]="%(i)+str(self.skill_list[i]); 

		print tabs+'}'
		
		pass;
	




class cli_unlock_pet_talent_skill_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_unlock_pet_talent_skill_out :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 剩余小米 */
	#类型:uint32
	public xiaomee;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.xiaomee)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		
		pass;
	




class cli_update_home_flag_in :
	"""
参数列表:
	/* 小屋flag位0-31（0小屋教程） */
	#类型:uint32
	public bit;

	/* 0或1，部分位只能设置1 */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.bit=ba.read_uint32();
		if ( self.bit== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.bit)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 小屋flag位0-31（0小屋教程） */"""
		print tabs+"[bit]=%s"%(str(self.bit))
		print tabs+"""/* 0或1，部分位只能设置1 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class cli_update_pet_location_in :
	"""
参数列表:
	/* 宠物id */
	#类型:uint32
	public petid1;

	/* 更新后的位置 */
	#类型:uint32
	public location1;

	/* 宠物ID */
	#类型:uint32
	public petid2;

	/* 更新后的位置 */
	#类型:uint32
	public location2;


	"""

	def read_from_buf(self, ba ):
		self.petid1=ba.read_uint32();
		if ( self.petid1== None): return False;
		self.location1=ba.read_uint32();
		if ( self.location1== None): return False;
		self.petid2=ba.read_uint32();
		if ( self.petid2== None): return False;
		self.location2=ba.read_uint32();
		if ( self.location2== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid1)):return False;
		if ( not ba.write_uint32(self.location1)):return False;
		if ( not ba.write_uint32(self.petid2)):return False;
		if ( not ba.write_uint32(self.location2)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物id */"""
		print tabs+"[petid1]=%s"%(str(self.petid1))
		print tabs+"""/* 更新后的位置 */"""
		print tabs+"[location1]=%s"%(str(self.location1))
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid2]=%s"%(str(self.petid2))
		print tabs+"""/* 更新后的位置 */"""
		print tabs+"[location2]=%s"%(str(self.location2))
		
		pass;
	




class cli_upgrade_cloth_use_level_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public clothid;

	/*获得的物品*/
	#变长数组,最大长度:2, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.clothid)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"#获得的物品"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_upgrade_cloth_use_level_out :
	"""
参数列表:
	/* 盘古之力 */
	#类型:uint32
	public pangu_energy;

	/*  */
	#类型:uint32
	public clothid;

	/* 衣服等级 */
	#类型:uint32
	public clothlv;

	/*获得的物品*/
	#变长数组,最大长度:2, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.pangu_energy=ba.read_uint32();
		if ( self.pangu_energy== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothlv=ba.read_uint32();
		if ( self.clothlv== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pangu_energy)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothlv)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 盘古之力 */"""
		print tabs+"[pangu_energy]=%s"%(str(self.pangu_energy))
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 衣服等级 */"""
		print tabs+"[clothlv]=%s"%(str(self.clothlv))
		print tabs+"#获得的物品"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class cli_user_cure_in :
	"""
参数列表:
	/* 1:hp 2:mp 3:受伤治疗 4:人物一键治疗 5:全部一键治疗 */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 1:hp 2:mp 3:受伤治疗 4:人物一键治疗 5:全部一键治疗 */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_user_cure_out :
	"""
参数列表:
	/* 剩余小米 */
	#类型:uint32
	public xiaomee;

	/* 治疗花费 */
	#类型:uint32
	public cost;

	/* 被治疗的人宠数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.xiaomee=ba.read_uint32();
		if ( self.xiaomee== None): return False;
		self.cost=ba.read_uint32();
		if ( self.cost== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.xiaomee)):return False;
		if ( not ba.write_uint32(self.cost)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 剩余小米 */"""
		print tabs+"[xiaomee]=%s"%(str(self.xiaomee))
		print tabs+"""/* 治疗花费 */"""
		print tabs+"[cost]=%s"%(str(self.cost))
		print tabs+"""/* 被治疗的人宠数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_user_set_position_in :
	"""
参数列表:
	/* 人物位置（1：前排，0：后排） */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 人物位置（1：前排，0：后排） */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_user_set_position_out :
	"""
参数列表:
	/* 人物位置（1：前排，0：后排） */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 人物位置（1：前排，0：后排） */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_user_shapeshifting_in :
	"""
参数列表:
	/* 变身卡id */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 变身卡id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_user_shapeshifting_out :
	"""
参数列表:
	/* 变身的用户id */
	#类型:uint32
	public uid;

	/* 宠物id */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 变身的用户id */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 宠物id */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class cli_user_show_in :
	"""
参数列表:
	/* 动作类型 */
	#类型:uint32
	public show_type;

	/* 方向 */
	#类型:uint32
	public direction;


	"""

	def read_from_buf(self, ba ):
		self.show_type=ba.read_uint32();
		if ( self.show_type== None): return False;
		self.direction=ba.read_uint32();
		if ( self.direction== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.show_type)):return False;
		if ( not ba.write_uint32(self.direction)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 动作类型 */"""
		print tabs+"[show_type]=%s"%(str(self.show_type))
		print tabs+"""/* 方向 */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		
		pass;
	




class cli_user_show_out :
	"""
参数列表:
	/* 动作类型 */
	#类型:uint32
	public show_type;

	/* 方向 */
	#类型:uint32
	public direction;


	"""

	def read_from_buf(self, ba ):
		self.show_type=ba.read_uint32();
		if ( self.show_type== None): return False;
		self.direction=ba.read_uint32();
		if ( self.direction== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.show_type)):return False;
		if ( not ba.write_uint32(self.direction)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 动作类型 */"""
		print tabs+"[show_type]=%s"%(str(self.show_type))
		print tabs+"""/* 方向 */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		
		pass;
	




class cli_user_walk_in :
	"""
参数列表:
	/*  */
	#类型:uint16
	public sx;

	/*  */
	#类型:uint16
	public sy;

	/*  */
	#类型:uint32
	public ex;

	/*  */
	#类型:uint32
	public ey;

	/*  */
	#类型:uint16
	public step;

	/*  */
	#类型:uint32
	public direction;

	/*  */
	#类型:uint32
	public type;

	/*  */
	#类型:uint16
	public nouse;


	"""

	def read_from_buf(self, ba ):
		self.sx=ba.read_uint16();
		if ( self.sx== None): return False;
		self.sy=ba.read_uint16();
		if ( self.sy== None): return False;
		self.ex=ba.read_uint32();
		if ( self.ex== None): return False;
		self.ey=ba.read_uint32();
		if ( self.ey== None): return False;
		self.step=ba.read_uint16();
		if ( self.step== None): return False;
		self.direction=ba.read_uint32();
		if ( self.direction== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.nouse=ba.read_uint16();
		if ( self.nouse== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint16(self.sx)):return False;
		if ( not ba.write_uint16(self.sy)):return False;
		if ( not ba.write_uint32(self.ex)):return False;
		if ( not ba.write_uint32(self.ey)):return False;
		if ( not ba.write_uint16(self.step)):return False;
		if ( not ba.write_uint32(self.direction)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint16(self.nouse)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[sx]=%s"%(str(self.sx))
		print tabs+"""/*  */"""
		print tabs+"[sy]=%s"%(str(self.sy))
		print tabs+"""/*  */"""
		print tabs+"[ex]=%s"%(str(self.ex))
		print tabs+"""/*  */"""
		print tabs+"[ey]=%s"%(str(self.ey))
		print tabs+"""/*  */"""
		print tabs+"[step]=%s"%(str(self.step))
		print tabs+"""/*  */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		print tabs+"""/*  */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/*  */"""
		print tabs+"[nouse]=%s"%(str(self.nouse))
		
		pass;
	




class cli_user_walk_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/*  */
	#类型:uint32
	public posX;

	/*  */
	#类型:uint32
	public posY;

	/*  */
	#类型:uint16
	public left_step;

	/*  */
	#类型:uint32
	public direction;

	/*  */
	#类型:uint32
	public type;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.posX=ba.read_uint32();
		if ( self.posX== None): return False;
		self.posY=ba.read_uint32();
		if ( self.posY== None): return False;
		self.left_step=ba.read_uint16();
		if ( self.left_step== None): return False;
		self.direction=ba.read_uint32();
		if ( self.direction== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.posX)):return False;
		if ( not ba.write_uint32(self.posY)):return False;
		if ( not ba.write_uint16(self.left_step)):return False;
		if ( not ba.write_uint32(self.direction)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/*  */"""
		print tabs+"[posX]=%s"%(str(self.posX))
		print tabs+"""/*  */"""
		print tabs+"[posY]=%s"%(str(self.posY))
		print tabs+"""/*  */"""
		print tabs+"[left_step]=%s"%(str(self.left_step))
		print tabs+"""/*  */"""
		print tabs+"[direction]=%s"%(str(self.direction))
		print tabs+"""/*  */"""
		print tabs+"[type]=%s"%(str(self.type))
		
		pass;
	




class cli_use_beast_card_in :
	"""
参数列表:
	/* 0，己方；1，对方（目前必须填0） */
	#类型:uint32
	public atk_team;

	/* [0,9]表示位置信息 */
	#类型:uint32
	public atk_pos;

	/* 使用的物品id */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.atk_team=ba.read_uint32();
		if ( self.atk_team== None): return False;
		self.atk_pos=ba.read_uint32();
		if ( self.atk_pos== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.atk_team)):return False;
		if ( not ba.write_uint32(self.atk_pos)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0，己方；1，对方（目前必须填0） */"""
		print tabs+"[atk_team]=%s"%(str(self.atk_team))
		print tabs+"""/* [0,9]表示位置信息 */"""
		print tabs+"[atk_pos]=%s"%(str(self.atk_pos))
		print tabs+"""/* 使用的物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_use_buff_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 宠物还是人（0表示人1表示宠） */
	#类型:uint32
	public sorp;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.sorp=ba.read_uint32();
		if ( self.sorp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.sorp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 宠物还是人（0表示人1表示宠） */"""
		print tabs+"[sorp]=%s"%(str(self.sorp))
		
		pass;
	




class cli_use_buff_item_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 经验倍率（未使用 100） */
	#类型:uint32
	public expfactor;

	/* 剩余回合数（未使用-1） */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.expfactor=ba.read_uint32();
		if ( self.expfactor== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.expfactor)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 经验倍率（未使用 100） */"""
		print tabs+"[expfactor]=%s"%(str(self.expfactor))
		print tabs+"""/* 剩余回合数（未使用-1） */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_use_energy_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_use_energy_item_out :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 使用后的精力值 */
	#类型:uint32
	public energy;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.energy=ba.read_uint32();
		if ( self.energy== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.energy)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 使用后的精力值 */"""
		print tabs+"[energy]=%s"%(str(self.energy))
		
		pass;
	




class cli_use_handbook_item_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_use_honor_in :
	"""
参数列表:
	/* 称号ID */
	#类型:uint32
	public honorid;


	"""

	def read_from_buf(self, ba ):
		self.honorid=ba.read_uint32();
		if ( self.honorid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.honorid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 称号ID */"""
		print tabs+"[honorid]=%s"%(str(self.honorid))
		
		pass;
	




class cli_use_magic_code_in :
	"""
参数列表:
	/* 神奇密码，不足32位补0 */
	#定长数组,长度:32, 类型:char 
	public code ;

	/* 兑换物品种类数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.code=ba.read_buf(32);
		if( self.code==None ): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.code,32);
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 神奇密码，不足32位补0 */"""
		tmp_str=str(self.code);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[code]=%s"%(tmp_str)
		print tabs+"""/* 兑换物品种类数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_use_medical_in :
	"""
参数列表:
	/* 0，己方；1，对方（目前必须填0） */
	#类型:uint32
	public atk_team;

	/* [0,9]表示位置信息 */
	#类型:uint32
	public atk_pos;

	/* 使用的物品id */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.atk_team=ba.read_uint32();
		if ( self.atk_team== None): return False;
		self.atk_pos=ba.read_uint32();
		if ( self.atk_pos== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.atk_team)):return False;
		if ( not ba.write_uint32(self.atk_pos)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 0，己方；1，对方（目前必须填0） */"""
		print tabs+"[atk_team]=%s"%(str(self.atk_team))
		print tabs+"""/* [0,9]表示位置信息 */"""
		print tabs+"[atk_pos]=%s"%(str(self.atk_pos))
		print tabs+"""/* 使用的物品id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_use_medical_item_in :
	"""
参数列表:
	/* 人物ID（给其他人使用必须在队伍中） */
	#类型:uint32
	public userid;

	/* 宠物ID（0表示给人物使用） */
	#类型:uint32
	public petid;

	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 人物ID（给其他人使用必须在队伍中） */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 宠物ID（0表示给人物使用） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class cli_use_medical_item_out :
	"""
参数列表:
	/* 使用物品的人物ID */
	#类型:uint32
	public userid_user;

	/* 被使用物品的人物ID */
	#类型:uint32
	public userid_higher;

	/* 宠物ID（0表示宠物） */
	#类型:uint32
	public petid;

	/* 宠物昵称（非宠物时无效） */
	#类型:uint32
	public petnick;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 增加的血量 */
	#类型:uint32
	public hp_up;

	/* 增加的魔力 */
	#类型:uint32
	public mp_up;


	"""

	def read_from_buf(self, ba ):
		self.userid_user=ba.read_uint32();
		if ( self.userid_user== None): return False;
		self.userid_higher=ba.read_uint32();
		if ( self.userid_higher== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.petnick=ba.read_uint32();
		if ( self.petnick== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.hp_up=ba.read_uint32();
		if ( self.hp_up== None): return False;
		self.mp_up=ba.read_uint32();
		if ( self.mp_up== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid_user)):return False;
		if ( not ba.write_uint32(self.userid_higher)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.petnick)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.hp_up)):return False;
		if ( not ba.write_uint32(self.mp_up)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 使用物品的人物ID */"""
		print tabs+"[userid_user]=%s"%(str(self.userid_user))
		print tabs+"""/* 被使用物品的人物ID */"""
		print tabs+"[userid_higher]=%s"%(str(self.userid_higher))
		print tabs+"""/* 宠物ID（0表示宠物） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物昵称（非宠物时无效） */"""
		print tabs+"[petnick]=%s"%(str(self.petnick))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 增加的血量 */"""
		print tabs+"[hp_up]=%s"%(str(self.hp_up))
		print tabs+"""/* 增加的魔力 */"""
		print tabs+"[mp_up]=%s"%(str(self.mp_up))
		
		pass;
	




class cli_use_water_in :
	"""
参数列表:
	/* 浇灌数量 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 浇灌数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_use_water_out :
	"""
参数列表:
	/* 当前树的浇灌次数 */
	#类型:uint32
	public tree_count;

	/* 当前实际浇灌次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.tree_count=ba.read_uint32();
		if ( self.tree_count== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.tree_count)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 当前树的浇灌次数 */"""
		print tabs+"[tree_count]=%s"%(str(self.tree_count))
		print tabs+"""/* 当前实际浇灌次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class cli_vip_update_out :
	"""
参数列表:
	/* 用户ID */
	#类型:uint32
	public userid;

	/* 人物标志位 */
	#类型:uint32
	public flag;

	/* Vip等级 */
	#类型:uint32
	public viplv;

	/* Vip经验 */
	#类型:uint32
	public vipexp;

	/* Vip开始时间 */
	#类型:uint32
	public vipbengin;

	/* Vip结束时间 */
	#类型:uint32
	public vipend;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.viplv=ba.read_uint32();
		if ( self.viplv== None): return False;
		self.vipexp=ba.read_uint32();
		if ( self.vipexp== None): return False;
		self.vipbengin=ba.read_uint32();
		if ( self.vipbengin== None): return False;
		self.vipend=ba.read_uint32();
		if ( self.vipend== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.viplv)):return False;
		if ( not ba.write_uint32(self.vipexp)):return False;
		if ( not ba.write_uint32(self.vipbengin)):return False;
		if ( not ba.write_uint32(self.vipend)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 用户ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 人物标志位 */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/* Vip等级 */"""
		print tabs+"[viplv]=%s"%(str(self.viplv))
		print tabs+"""/* Vip经验 */"""
		print tabs+"[vipexp]=%s"%(str(self.vipexp))
		print tabs+"""/* Vip开始时间 */"""
		print tabs+"[vipbengin]=%s"%(str(self.vipbengin))
		print tabs+"""/* Vip结束时间 */"""
		print tabs+"[vipend]=%s"%(str(self.vipend))
		
		pass;
	




class cli_war_challenge_pos_in :
	"""
参数列表:
	/* 要挑战的位置 */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 要挑战的位置 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_war_challenge_pos_out :
	"""
参数列表:
	/* 挑战者米米号 */
	#类型:uint32
	public challenger;

	/* 被挑战者米米号 */
	#类型:uint32
	public challengee;

	/* 位置 */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.challenger=ba.read_uint32();
		if ( self.challenger== None): return False;
		self.challengee=ba.read_uint32();
		if ( self.challengee== None): return False;
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.challenger)):return False;
		if ( not ba.write_uint32(self.challengee)):return False;
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 挑战者米米号 */"""
		print tabs+"[challenger]=%s"%(str(self.challenger))
		print tabs+"""/* 被挑战者米米号 */"""
		print tabs+"[challengee]=%s"%(str(self.challengee))
		print tabs+"""/* 位置 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class cli_war_play_card_in :
	"""
参数列表:
	/* 卡牌类型 */
	#类型:uint32
	public card;


	"""

	def read_from_buf(self, ba ):
		self.card=ba.read_uint32();
		if ( self.card== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.card)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 卡牌类型 */"""
		print tabs+"[card]=%s"%(str(self.card))
		
		pass;
	




class cli_write_task_diary_in :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 任务日记 */
	#定长数组,长度:156, 类型:char 
	public diary ;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.diary=ba.read_buf(156);
		if( self.diary==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		ba.write_buf(self.diary,156);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 任务日记 */"""
		tmp_str=str(self.diary);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[diary]=%s"%(tmp_str)
		
		pass;
	




class stru_pet_type :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public pettype;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		
		pass;
	




class finish_task_node_in :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 节点ID */
	#类型:uint32
	public nodeid;

	/* 奖励选项 */
	#类型:uint32
	public outid;

	/* 客户端buf */
	#定长数组,长度:128, 类型:char 
	public cli_buf ;

	/* 客户端值 */
	#类型:uint32
	public clival;

	/*要删除的宠物列表*/
	#变长数组,最大长度:10, 类型:stru_pet_type
	public delpetlist =array();


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.nodeid=ba.read_uint32();
		if ( self.nodeid== None): return False;
		self.outid=ba.read_uint32();
		if ( self.outid== None): return False;
		self.cli_buf=ba.read_buf(128);
		if( self.cli_buf==None ): return False;
		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;

		delpetlist_count= ba.read_uint32(); 
		if ( delpetlist_count==None ): return False;
		self.delpetlist=[];
		for i in range(delpetlist_count):
			self.delpetlist.append(stru_pet_type());
			if ( not self.delpetlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.nodeid)):return False;
		if ( not ba.write_uint32(self.outid)):return False;
		ba.write_buf(self.cli_buf,128);
		if ( not ba.write_uint32(self.clival)):return False;
		delpetlist_count=len(self.delpetlist);
		ba.write_uint32(delpetlist_count);
		for i in range(delpetlist_count):
			if (  not  isinstance(self.delpetlist[i] ,stru_pet_type) ):return False; 
			if ( not self.delpetlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 节点ID */"""
		print tabs+"[nodeid]=%s"%(str(self.nodeid))
		print tabs+"""/* 奖励选项 */"""
		print tabs+"[outid]=%s"%(str(self.outid))
		print tabs+"""/* 客户端buf */"""
		tmp_str=str(self.cli_buf);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[cli_buf]=%s"%(tmp_str)
		print tabs+"""/* 客户端值 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		print tabs+"#要删除的宠物列表"
		print tabs+"[delpetlist]=>{";
		for i in range(len(self.delpetlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.delpetlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class finish_task_node_out :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 客户端值 */
	#类型:uint32
	public clival;

	/* 节点ID */
	#类型:uint32
	public nodeid;

	/* 奖励选项 */
	#类型:uint32
	public outid;

	/* 是否可再接 */
	#类型:uint32
	public recvable;

	/*  */
	#类型:uint32
	public ishalf;

	/*获得的物品奖励 （包括特殊物品）*/
	#变长数组,最大长度:100, 类型:stru_item
	public itemlist =array();

	/*装扮ID列表*/
	#变长数组,最大长度:10, 类型:stru_cloth_detail
	public clothlist =array();

	/*获得的技能*/
	#变长数组,最大长度:10, 类型:stru_user_skill
	public skills =array();

	/*宠物列表*/
	#变长数组,最大长度:100, 类型:stru_cli_pet_info
	public petlist =array();


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.clival=ba.read_uint32();
		if ( self.clival== None): return False;
		self.nodeid=ba.read_uint32();
		if ( self.nodeid== None): return False;
		self.outid=ba.read_uint32();
		if ( self.outid== None): return False;
		self.recvable=ba.read_uint32();
		if ( self.recvable== None): return False;
		self.ishalf=ba.read_uint32();
		if ( self.ishalf== None): return False;

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		clothlist_count= ba.read_uint32(); 
		if ( clothlist_count==None ): return False;
		self.clothlist=[];
		for i in range(clothlist_count):
			self.clothlist.append(stru_cloth_detail());
			if ( not self.clothlist[i].read_from_buf(ba)):return False;


		skills_count= ba.read_uint32(); 
		if ( skills_count==None ): return False;
		self.skills=[];
		for i in range(skills_count):
			self.skills.append(stru_user_skill());
			if ( not self.skills[i].read_from_buf(ba)):return False;


		petlist_count= ba.read_uint32(); 
		if ( petlist_count==None ): return False;
		self.petlist=[];
		for i in range(petlist_count):
			self.petlist.append(stru_cli_pet_info());
			if ( not self.petlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.clival)):return False;
		if ( not ba.write_uint32(self.nodeid)):return False;
		if ( not ba.write_uint32(self.outid)):return False;
		if ( not ba.write_uint32(self.recvable)):return False;
		if ( not ba.write_uint32(self.ishalf)):return False;
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		clothlist_count=len(self.clothlist);
		ba.write_uint32(clothlist_count);
		for i in range(clothlist_count):
			if (  not  isinstance(self.clothlist[i] ,stru_cloth_detail) ):return False; 
			if ( not self.clothlist[i].write_to_buf(ba)): return False;

		skills_count=len(self.skills);
		ba.write_uint32(skills_count);
		for i in range(skills_count):
			if (  not  isinstance(self.skills[i] ,stru_user_skill) ):return False; 
			if ( not self.skills[i].write_to_buf(ba)): return False;

		petlist_count=len(self.petlist);
		ba.write_uint32(petlist_count);
		for i in range(petlist_count):
			if (  not  isinstance(self.petlist[i] ,stru_cli_pet_info) ):return False; 
			if ( not self.petlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 客户端值 */"""
		print tabs+"[clival]=%s"%(str(self.clival))
		print tabs+"""/* 节点ID */"""
		print tabs+"[nodeid]=%s"%(str(self.nodeid))
		print tabs+"""/* 奖励选项 */"""
		print tabs+"[outid]=%s"%(str(self.outid))
		print tabs+"""/* 是否可再接 */"""
		print tabs+"[recvable]=%s"%(str(self.recvable))
		print tabs+"""/*  */"""
		print tabs+"[ishalf]=%s"%(str(self.ishalf))
		print tabs+"#获得的物品奖励 （包括特殊物品）"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#装扮ID列表"
		print tabs+"[clothlist]=>{";
		for i in range(len(self.clothlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.clothlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#获得的技能"
		print tabs+"[skills]=>{";
		for i in range(len(self.skills)):
			print tabs+"    [%d]=>{"%(i) 
			self.skills[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#宠物列表"
		print tabs+"[petlist]=>{";
		for i in range(len(self.petlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.petlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class get_box_active_list_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:99999, 类型:box_active_t
	public box_active_list =array();


	"""

	def read_from_buf(self, ba ):

		box_active_list_count= ba.read_uint32(); 
		if ( box_active_list_count==None ): return False;
		self.box_active_list=[];
		for i in range(box_active_list_count):
			self.box_active_list.append(box_active_t());
			if ( not self.box_active_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		box_active_list_count=len(self.box_active_list);
		ba.write_uint32(box_active_list_count);
		for i in range(box_active_list_count):
			if (  not  isinstance(self.box_active_list[i] ,box_active_t) ):return False; 
			if ( not self.box_active_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[box_active_list]=>{";
		for i in range(len(self.box_active_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.box_active_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class get_bus_friend_base_info_in :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		
		pass;
	




class get_bus_friend_base_info_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/* 性别 */
	#类型:uint32
	public sex;

	/* 生日 */
	#类型:uint32
	public birthday;

	/* 省 */
	#定长数组,长度:32, 类型:char 
	public province ;

	/* 市 */
	#定长数组,长度:32, 类型:char 
	public city ;

	/* 区 */
	#定长数组,长度:32, 类型:char 
	public district ;

	/* 姓名 */
	#定长数组,长度:50, 类型:char 
	public name ;

	/* 学校名字 */
	#定长数组,长度:50, 类型:char 
	public school_name ;

	/* 班级名字 */
	#定长数组,长度:50, 类型:char 
	public class_name ;

	/* 头像 */
	#定长数组,长度:80, 类型:char 
	public head_photo ;

	/* 类型 0未更新 1日记 2yy */
	#类型:uint32
	public type;

	/*标题*/
	#变长数组,最大长度:500, 类型:char
	public title ;

	/*内容*/
	#变长数组,最大长度:50000, 类型:char
	public context ;

	/*照片地址 ；以分号隔开*/
	#变长数组,最大长度:5000, 类型:char
	public photo_url ;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.sex=ba.read_uint32();
		if ( self.sex== None): return False;
		self.birthday=ba.read_uint32();
		if ( self.birthday== None): return False;
		self.province=ba.read_buf(32);
		if( self.province==None ): return False;
		self.city=ba.read_buf(32);
		if( self.city==None ): return False;
		self.district=ba.read_buf(32);
		if( self.district==None ): return False;
		self.name=ba.read_buf(50);
		if( self.name==None ): return False;
		self.school_name=ba.read_buf(50);
		if( self.school_name==None ): return False;
		self.class_name=ba.read_buf(50);
		if( self.class_name==None ): return False;
		self.head_photo=ba.read_buf(80);
		if( self.head_photo==None ): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;

		title_count= ba.read_uint32(); 
		if ( title_count==None ): return False;
		self.title=ba.read_buf(title_count);
		if( self.title==None ):return False;

		context_count= ba.read_uint32(); 
		if ( context_count==None ): return False;
		self.context=ba.read_buf(context_count);
		if( self.context==None ):return False;

		photo_url_count= ba.read_uint32(); 
		if ( photo_url_count==None ): return False;
		self.photo_url=ba.read_buf(photo_url_count);
		if( self.photo_url==None ):return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.sex)):return False;
		if ( not ba.write_uint32(self.birthday)):return False;
		ba.write_buf(self.province,32);
		ba.write_buf(self.city,32);
		ba.write_buf(self.district,32);
		ba.write_buf(self.name,50);
		ba.write_buf(self.school_name,50);
		ba.write_buf(self.class_name,50);
		ba.write_buf(self.head_photo,80);
		if ( not ba.write_uint32(self.type)):return False;
		title_count=len(self.title);
		ba.write_uint32(title_count);
		ba.write_buf(self.title,title_count);
		context_count=len(self.context);
		ba.write_uint32(context_count);
		ba.write_buf(self.context,context_count);
		photo_url_count=len(self.photo_url);
		ba.write_uint32(photo_url_count);
		ba.write_buf(self.photo_url,photo_url_count);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 性别 */"""
		print tabs+"[sex]=%s"%(str(self.sex))
		print tabs+"""/* 生日 */"""
		print tabs+"[birthday]=%s"%(str(self.birthday))
		print tabs+"""/* 省 */"""
		tmp_str=str(self.province);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[province]=%s"%(tmp_str)
		print tabs+"""/* 市 */"""
		tmp_str=str(self.city);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[city]=%s"%(tmp_str)
		print tabs+"""/* 区 */"""
		tmp_str=str(self.district);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[district]=%s"%(tmp_str)
		print tabs+"""/* 姓名 */"""
		tmp_str=str(self.name);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[name]=%s"%(tmp_str)
		print tabs+"""/* 学校名字 */"""
		tmp_str=str(self.school_name);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[school_name]=%s"%(tmp_str)
		print tabs+"""/* 班级名字 */"""
		tmp_str=str(self.class_name);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[class_name]=%s"%(tmp_str)
		print tabs+"""/* 头像 */"""
		tmp_str=str(self.head_photo);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[head_photo]=%s"%(tmp_str)
		print tabs+"""/* 类型 0未更新 1日记 2yy */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* 标题 */"""
		print tabs+"[title]=%s"%(str(self.title))
		print tabs+"""/* 内容 */"""
		print tabs+"[context]=%s"%(str(self.context))
		print tabs+"""/* 照片地址 ；以分号隔开 */"""
		print tabs+"[photo_url]=%s"%(str(self.photo_url))
		
		pass;
	




class get_bus_friend_uplist_in :
	"""
参数列表:
	/*需要拉取的好友列表*/
	#变长数组,最大长度:1000, 类型:uint32_t
	public friendlist =array();


	"""

	def read_from_buf(self, ba ):

		friendlist_count= ba.read_uint32(); 
		if ( friendlist_count==None ): return False;
		self.friendlist=[];
		for i in range(friendlist_count):
			self.friendlist.append(ba.read_uint32());
			if ( self.friendlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		friendlist_count=len(self.friendlist);
		ba.write_uint32(friendlist_count);
		for i in range(friendlist_count):
			if ( not ba.write_uint32(self.friendlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#需要拉取的好友列表"
		print tabs+"[friendlist]=>{";
		for i in range(len(self.friendlist)):
			print tabs+"    [%d]="%(i)+str(self.friendlist[i]); 

		print tabs+'}'
		
		pass;
	




class get_bus_friend_uplist_out :
	"""
参数列表:
	/*有信息更新的好友列表*/
	#变长数组,最大长度:1000, 类型:uint32_t
	public friendlist =array();


	"""

	def read_from_buf(self, ba ):

		friendlist_count= ba.read_uint32(); 
		if ( friendlist_count==None ): return False;
		self.friendlist=[];
		for i in range(friendlist_count):
			self.friendlist.append(ba.read_uint32());
			if ( self.friendlist[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		friendlist_count=len(self.friendlist);
		ba.write_uint32(friendlist_count);
		for i in range(friendlist_count):
			if ( not ba.write_uint32(self.friendlist[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#有信息更新的好友列表"
		print tabs+"[friendlist]=>{";
		for i in range(len(self.friendlist)):
			print tabs+"    [%d]="%(i)+str(self.friendlist[i]); 

		print tabs+'}'
		
		pass;
	




class get_exchange_cnt_info_out :
	"""
参数列表:
	/*兑换次数信息*/
	#变长数组,最大长度:10000, 类型:stru_id_cnt
	public e_info =array();


	"""

	def read_from_buf(self, ba ):

		e_info_count= ba.read_uint32(); 
		if ( e_info_count==None ): return False;
		self.e_info=[];
		for i in range(e_info_count):
			self.e_info.append(stru_id_cnt());
			if ( not self.e_info[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		e_info_count=len(self.e_info);
		ba.write_uint32(e_info_count);
		for i in range(e_info_count):
			if (  not  isinstance(self.e_info[i] ,stru_id_cnt) ):return False; 
			if ( not self.e_info[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#兑换次数信息"
		print tabs+"[e_info]=>{";
		for i in range(len(self.e_info)):
			print tabs+"    [%d]=>{"%(i) 
			self.e_info[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class stru_task_recv :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 节点ID */
	#类型:uint32
	public nodeid;

	/* 完成次数 */
	#类型:uint32
	public finnum;

	/* 完成时间 */
	#类型:uint32
	public fintime;

	/* 目标（物品） */
	#类型:uint32
	public itemid;

	/* 目标物品数量 */
	#类型:uint32
	public count;

	/* 接任务时间 */
	#类型:uint32
	public optdate;

	/* 客户端BUFF */
	#定长数组,长度:128, 类型:char 
	public cli_buff ;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.nodeid=ba.read_uint32();
		if ( self.nodeid== None): return False;
		self.finnum=ba.read_uint32();
		if ( self.finnum== None): return False;
		self.fintime=ba.read_uint32();
		if ( self.fintime== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.optdate=ba.read_uint32();
		if ( self.optdate== None): return False;
		self.cli_buff=ba.read_buf(128);
		if( self.cli_buff==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.nodeid)):return False;
		if ( not ba.write_uint32(self.finnum)):return False;
		if ( not ba.write_uint32(self.fintime)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.optdate)):return False;
		ba.write_buf(self.cli_buff,128);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 节点ID */"""
		print tabs+"[nodeid]=%s"%(str(self.nodeid))
		print tabs+"""/* 完成次数 */"""
		print tabs+"[finnum]=%s"%(str(self.finnum))
		print tabs+"""/* 完成时间 */"""
		print tabs+"[fintime]=%s"%(str(self.fintime))
		print tabs+"""/* 目标（物品） */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 目标物品数量 */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/* 接任务时间 */"""
		print tabs+"[optdate]=%s"%(str(self.optdate))
		print tabs+"""/* 客户端BUFF */"""
		tmp_str=str(self.cli_buff);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[cli_buff]=%s"%(tmp_str)
		
		pass;
	




class stru_task_other :
	"""
参数列表:
	/* 任务ID */
	#类型:uint32
	public taskid;

	/* 状态 */
	#类型:uint32
	public state;

	/* 完成次数 */
	#类型:uint32
	public finnum;

	/* 首次完成时间 */
	#类型:uint32
	public fintime;


	"""

	def read_from_buf(self, ba ):
		self.taskid=ba.read_uint32();
		if ( self.taskid== None): return False;
		self.state=ba.read_uint32();
		if ( self.state== None): return False;
		self.finnum=ba.read_uint32();
		if ( self.finnum== None): return False;
		self.fintime=ba.read_uint32();
		if ( self.fintime== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.taskid)):return False;
		if ( not ba.write_uint32(self.state)):return False;
		if ( not ba.write_uint32(self.finnum)):return False;
		if ( not ba.write_uint32(self.fintime)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 任务ID */"""
		print tabs+"[taskid]=%s"%(str(self.taskid))
		print tabs+"""/* 状态 */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"""/* 完成次数 */"""
		print tabs+"[finnum]=%s"%(str(self.finnum))
		print tabs+"""/* 首次完成时间 */"""
		print tabs+"[fintime]=%s"%(str(self.fintime))
		
		pass;
	




class get_task_all_out :
	"""
参数列表:
	/*进行中任务*/
	#变长数组,最大长度:200, 类型:stru_task_recv
	public recvtasks =array();

	/*其他任务信息*/
	#变长数组,最大长度:10000, 类型:stru_task_other
	public othertasks =array();


	"""

	def read_from_buf(self, ba ):

		recvtasks_count= ba.read_uint32(); 
		if ( recvtasks_count==None ): return False;
		self.recvtasks=[];
		for i in range(recvtasks_count):
			self.recvtasks.append(stru_task_recv());
			if ( not self.recvtasks[i].read_from_buf(ba)):return False;


		othertasks_count= ba.read_uint32(); 
		if ( othertasks_count==None ): return False;
		self.othertasks=[];
		for i in range(othertasks_count):
			self.othertasks.append(stru_task_other());
			if ( not self.othertasks[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		recvtasks_count=len(self.recvtasks);
		ba.write_uint32(recvtasks_count);
		for i in range(recvtasks_count):
			if (  not  isinstance(self.recvtasks[i] ,stru_task_recv) ):return False; 
			if ( not self.recvtasks[i].write_to_buf(ba)): return False;

		othertasks_count=len(self.othertasks);
		ba.write_uint32(othertasks_count);
		for i in range(othertasks_count):
			if (  not  isinstance(self.othertasks[i] ,stru_task_other) ):return False; 
			if ( not self.othertasks[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#进行中任务"
		print tabs+"[recvtasks]=>{";
		for i in range(len(self.recvtasks)):
			print tabs+"    [%d]=>{"%(i) 
			self.recvtasks[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"#其他任务信息"
		print tabs+"[othertasks]=>{";
		for i in range(len(self.othertasks)):
			print tabs+"    [%d]=>{"%(i) 
			self.othertasks[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class get_vacancy_cnt_out :
	"""
参数列表:
	/* 次数 */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 次数 */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class mall_buy_item_in :
	"""
参数列表:
	/*  */
	#定长数组,长度:32, 类型:char 
	public passwd ;

	/* 商品ID */
	#类型:uint32
	public itemid;

	/*  */
	#类型:uint16
	public count;


	"""

	def read_from_buf(self, ba ):
		self.passwd=ba.read_buf(32);
		if( self.passwd==None ): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.count=ba.read_uint16();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.passwd,32);
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint16(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		tmp_str=str(self.passwd);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[passwd]=%s"%(tmp_str)
		print tabs+"""/* 商品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class mall_buy_item_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public product_id;

	/*  */
	#类型:uint32
	public product_count;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/*  */
	#类型:uint32
	public m1_used;

	/*  */
	#类型:uint32
	public m1_balance;

	/*  */
	#类型:uint32
	public m2_add;

	/*  */
	#类型:uint32
	public m2_balance;


	"""

	def read_from_buf(self, ba ):
		self.product_id=ba.read_uint32();
		if ( self.product_id== None): return False;
		self.product_count=ba.read_uint32();
		if ( self.product_count== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.m1_used=ba.read_uint32();
		if ( self.m1_used== None): return False;
		self.m1_balance=ba.read_uint32();
		if ( self.m1_balance== None): return False;
		self.m2_add=ba.read_uint32();
		if ( self.m2_add== None): return False;
		self.m2_balance=ba.read_uint32();
		if ( self.m2_balance== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.product_id)):return False;
		if ( not ba.write_uint32(self.product_count)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.m1_used)):return False;
		if ( not ba.write_uint32(self.m1_balance)):return False;
		if ( not ba.write_uint32(self.m2_add)):return False;
		if ( not ba.write_uint32(self.m2_balance)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[product_id]=%s"%(str(self.product_id))
		print tabs+"""/*  */"""
		print tabs+"[product_count]=%s"%(str(self.product_count))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/*  */"""
		print tabs+"[m1_used]=%s"%(str(self.m1_used))
		print tabs+"""/*  */"""
		print tabs+"[m1_balance]=%s"%(str(self.m1_balance))
		print tabs+"""/*  */"""
		print tabs+"[m2_add]=%s"%(str(self.m2_add))
		print tabs+"""/*  */"""
		print tabs+"[m2_balance]=%s"%(str(self.m2_balance))
		
		pass;
	




class mall_get_items_price_in :
	"""
参数列表:
	/**/
	#变长数组,最大长度:150, 类型:uint32_t
	public items =array();


	"""

	def read_from_buf(self, ba ):

		items_count= ba.read_uint32(); 
		if ( items_count==None ): return False;
		self.items=[];
		for i in range(items_count):
			self.items.append(ba.read_uint32());
			if ( self.items[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		items_count=len(self.items);
		ba.write_uint32(items_count);
		for i in range(items_count):
			if ( not ba.write_uint32(self.items[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[items]=>{";
		for i in range(len(self.items)):
			print tabs+"    [%d]="%(i)+str(self.items[i]); 

		print tabs+'}'
		
		pass;
	




class stru_item_price :
	"""
参数列表:
	/* 商品ID */
	#类型:uint32
	public itemid;

	/* 状态 */
	#类型:uint16
	public status;

	/*  */
	#类型:uint32
	public price;

	/*  */
	#类型:uint32
	public vip_price;

	/*  */
	#类型:uint32
	public nonvip_price;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.status=ba.read_uint16();
		if ( self.status== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.vip_price=ba.read_uint32();
		if ( self.vip_price== None): return False;
		self.nonvip_price=ba.read_uint32();
		if ( self.nonvip_price== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint16(self.status)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.vip_price)):return False;
		if ( not ba.write_uint32(self.nonvip_price)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 状态 */"""
		print tabs+"[status]=%s"%(str(self.status))
		print tabs+"""/*  */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/*  */"""
		print tabs+"[vip_price]=%s"%(str(self.vip_price))
		print tabs+"""/*  */"""
		print tabs+"[nonvip_price]=%s"%(str(self.nonvip_price))
		
		pass;
	




class mall_get_items_price_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:150, 类型:stru_item_price
	public prices =array();


	"""

	def read_from_buf(self, ba ):

		prices_count= ba.read_uint32(); 
		if ( prices_count==None ): return False;
		self.prices=[];
		for i in range(prices_count):
			self.prices.append(stru_item_price());
			if ( not self.prices[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		prices_count=len(self.prices);
		ba.write_uint32(prices_count);
		for i in range(prices_count):
			if (  not  isinstance(self.prices[i] ,stru_item_price) ):return False; 
			if ( not self.prices[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[prices]=>{";
		for i in range(len(self.prices)):
			print tabs+"    [%d]=>{"%(i) 
			self.prices[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class mall_get_item_detail_in :
	"""
参数列表:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class mall_get_item_detail_out :
	"""
参数列表:
	/* 商品ID */
	#类型:uint32
	public itemid;

	/*  */
	#类型:uint32
	public price;

	/*  */
	#类型:uint32
	public vip_price;

	/*  */
	#类型:uint32
	public nonvip_price;

	/*  */
	#类型:uint32
	public type;

	/*  */
	#类型:uint32
	public category;

	/*  */
	#类型:uint32
	public gift_money_num;

	/*  */
	#类型:uint32
	public must_vip;

	/*  */
	#类型:uint32
	public max_limit;

	/*  */
	#类型:uint32
	public total_count;

	/*  */
	#类型:uint32
	public current_count;

	/*  */
	#类型:uint32
	public is_valid;

	/*  */
	#类型:uint32
	public flag;


	"""

	def read_from_buf(self, ba ):
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.vip_price=ba.read_uint32();
		if ( self.vip_price== None): return False;
		self.nonvip_price=ba.read_uint32();
		if ( self.nonvip_price== None): return False;
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.category=ba.read_uint32();
		if ( self.category== None): return False;
		self.gift_money_num=ba.read_uint32();
		if ( self.gift_money_num== None): return False;
		self.must_vip=ba.read_uint32();
		if ( self.must_vip== None): return False;
		self.max_limit=ba.read_uint32();
		if ( self.max_limit== None): return False;
		self.total_count=ba.read_uint32();
		if ( self.total_count== None): return False;
		self.current_count=ba.read_uint32();
		if ( self.current_count== None): return False;
		self.is_valid=ba.read_uint32();
		if ( self.is_valid== None): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.vip_price)):return False;
		if ( not ba.write_uint32(self.nonvip_price)):return False;
		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.category)):return False;
		if ( not ba.write_uint32(self.gift_money_num)):return False;
		if ( not ba.write_uint32(self.must_vip)):return False;
		if ( not ba.write_uint32(self.max_limit)):return False;
		if ( not ba.write_uint32(self.total_count)):return False;
		if ( not ba.write_uint32(self.current_count)):return False;
		if ( not ba.write_uint32(self.is_valid)):return False;
		if ( not ba.write_uint32(self.flag)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 商品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/*  */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/*  */"""
		print tabs+"[vip_price]=%s"%(str(self.vip_price))
		print tabs+"""/*  */"""
		print tabs+"[nonvip_price]=%s"%(str(self.nonvip_price))
		print tabs+"""/*  */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/*  */"""
		print tabs+"[category]=%s"%(str(self.category))
		print tabs+"""/*  */"""
		print tabs+"[gift_money_num]=%s"%(str(self.gift_money_num))
		print tabs+"""/*  */"""
		print tabs+"[must_vip]=%s"%(str(self.must_vip))
		print tabs+"""/*  */"""
		print tabs+"[max_limit]=%s"%(str(self.max_limit))
		print tabs+"""/*  */"""
		print tabs+"[total_count]=%s"%(str(self.total_count))
		print tabs+"""/*  */"""
		print tabs+"[current_count]=%s"%(str(self.current_count))
		print tabs+"""/*  */"""
		print tabs+"[is_valid]=%s"%(str(self.is_valid))
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		
		pass;
	




class mall_get_money_balance_out :
	"""
参数列表:
	/*  */
	#类型:uint32
	public balance;


	"""

	def read_from_buf(self, ba ):
		self.balance=ba.read_uint32();
		if ( self.balance== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.balance)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[balance]=%s"%(str(self.balance))
		
		pass;
	




class noti_cli_can_get_dragon_out :
	"""
参数列表:
	/* 是否显示充vip通知 */
	#类型:uint32
	public show_vip_niti;

	/* 旧活动蛋数量 */
	#类型:uint32
	public count_old;

	/* 新活动蛋数量 */
	#类型:uint32
	public count_new;

	/* 第三次活动蛋数量 */
	#类型:uint32
	public count_3;

	/* 第五次活动蛋数量 */
	#类型:uint32
	public count_5;

	/* 第六次活动兑换精灵蛋数量 */
	#类型:uint32
	public count_6;

	/* 第六次兑换是否通知充值vip */
	#类型:uint32
	public noti_count_6;


	"""

	def read_from_buf(self, ba ):
		self.show_vip_niti=ba.read_uint32();
		if ( self.show_vip_niti== None): return False;
		self.count_old=ba.read_uint32();
		if ( self.count_old== None): return False;
		self.count_new=ba.read_uint32();
		if ( self.count_new== None): return False;
		self.count_3=ba.read_uint32();
		if ( self.count_3== None): return False;
		self.count_5=ba.read_uint32();
		if ( self.count_5== None): return False;
		self.count_6=ba.read_uint32();
		if ( self.count_6== None): return False;
		self.noti_count_6=ba.read_uint32();
		if ( self.noti_count_6== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.show_vip_niti)):return False;
		if ( not ba.write_uint32(self.count_old)):return False;
		if ( not ba.write_uint32(self.count_new)):return False;
		if ( not ba.write_uint32(self.count_3)):return False;
		if ( not ba.write_uint32(self.count_5)):return False;
		if ( not ba.write_uint32(self.count_6)):return False;
		if ( not ba.write_uint32(self.noti_count_6)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 是否显示充vip通知 */"""
		print tabs+"[show_vip_niti]=%s"%(str(self.show_vip_niti))
		print tabs+"""/* 旧活动蛋数量 */"""
		print tabs+"[count_old]=%s"%(str(self.count_old))
		print tabs+"""/* 新活动蛋数量 */"""
		print tabs+"[count_new]=%s"%(str(self.count_new))
		print tabs+"""/* 第三次活动蛋数量 */"""
		print tabs+"[count_3]=%s"%(str(self.count_3))
		print tabs+"""/* 第五次活动蛋数量 */"""
		print tabs+"[count_5]=%s"%(str(self.count_5))
		print tabs+"""/* 第六次活动兑换精灵蛋数量 */"""
		print tabs+"[count_6]=%s"%(str(self.count_6))
		print tabs+"""/* 第六次兑换是否通知充值vip */"""
		print tabs+"[noti_count_6]=%s"%(str(self.noti_count_6))
		
		pass;
	




class noti_cli_get_box_item_out :
	"""
参数列表:
	/*物品列表*/
	#变长数组,最大长度:100, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#物品列表"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class noti_cli_get_item_out :
	"""
参数列表:
	/*物品列表*/
	#变长数组,最大长度:100, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):

		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#物品列表"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class noti_cli_hang_get_exp_out :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public uid;

	/* 技能挂机剩余时间 */
	#类型:uint32
	public hang_skill_time;

	/* 获得经验等 */
	#类型:stru_item
	public item;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.hang_skill_time=ba.read_uint32();
		if ( self.hang_skill_time== None): return False;
		self.item=stru_item();
		if ( not self.item.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.hang_skill_time)):return False;
		if ( not isinstance(self.item,stru_item)): return False; 
		if ( not self.item.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 技能挂机剩余时间 */"""
		print tabs+"[hang_skill_time]=%s"%(str(self.hang_skill_time))
		print tabs+"""/* 获得经验等 */""";
		print tabs+"[item]=>{";
		self.item.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class noti_cli_home_pvp_game_start_out :
	"""
参数列表:
	/* 游戏剩余时间 */
	#类型:uint32
	public left_time;


	"""

	def read_from_buf(self, ba ):
		self.left_time=ba.read_uint32();
		if ( self.left_time== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.left_time)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 游戏剩余时间 */"""
		print tabs+"[left_time]=%s"%(str(self.left_time))
		
		pass;
	




class noti_cli_task_loop_update_out :
	"""
参数列表:
	/* 环任务信息 */
	#类型:stru_loop_task_info
	public looptask;


	"""

	def read_from_buf(self, ba ):
		self.looptask=stru_loop_task_info();
		if ( not self.looptask.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.looptask,stru_loop_task_info)): return False; 
		if ( not self.looptask.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 环任务信息 */""";
		print tabs+"[looptask]=>{";
		self.looptask.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class noti_cli_war_be_attacked_out :
	"""
参数列表:
	/*被打的用户列表*/
	#变长数组,最大长度:5, 类型:stru_pos_uid
	public idlist =array();


	"""

	def read_from_buf(self, ba ):

		idlist_count= ba.read_uint32(); 
		if ( idlist_count==None ): return False;
		self.idlist=[];
		for i in range(idlist_count):
			self.idlist.append(stru_pos_uid());
			if ( not self.idlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		idlist_count=len(self.idlist);
		ba.write_uint32(idlist_count);
		for i in range(idlist_count):
			if (  not  isinstance(self.idlist[i] ,stru_pos_uid) ):return False; 
			if ( not self.idlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#被打的用户列表"
		print tabs+"[idlist]=>{";
		for i in range(len(self.idlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.idlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class noti_cli_war_challenge_result_out :
	"""
参数列表:
	/* 胜利者（平=0） */
	#类型:uint32
	public winner;

	/*  */
	#类型:uint32
	public winner_card;

	/*  */
	#类型:uint32
	public fail;

	/*  */
	#类型:uint32
	public fail_card;

	/* 挑战的位置 */
	#类型:uint32
	public pos;


	"""

	def read_from_buf(self, ba ):
		self.winner=ba.read_uint32();
		if ( self.winner== None): return False;
		self.winner_card=ba.read_uint32();
		if ( self.winner_card== None): return False;
		self.fail=ba.read_uint32();
		if ( self.fail== None): return False;
		self.fail_card=ba.read_uint32();
		if ( self.fail_card== None): return False;
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.winner)):return False;
		if ( not ba.write_uint32(self.winner_card)):return False;
		if ( not ba.write_uint32(self.fail)):return False;
		if ( not ba.write_uint32(self.fail_card)):return False;
		if ( not ba.write_uint32(self.pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 胜利者（平=0） */"""
		print tabs+"[winner]=%s"%(str(self.winner))
		print tabs+"""/*  */"""
		print tabs+"[winner_card]=%s"%(str(self.winner_card))
		print tabs+"""/*  */"""
		print tabs+"[fail]=%s"%(str(self.fail))
		print tabs+"""/*  */"""
		print tabs+"[fail_card]=%s"%(str(self.fail_card))
		print tabs+"""/* 挑战的位置 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		
		pass;
	




class noti_cli_war_over_out :
	"""
参数列表:
	/* 排名信息 */
	#定长数组,长度:4, 类型:stru_id_cnt 
	public rank =array();

	/*奖励物品*/
	#变长数组,最大长度:100, 类型:stru_item
	public itemlist =array();


	"""

	def read_from_buf(self, ba ):
		self.rank=[];
		for i in range(4):
			self.rank.append(stru_id_cnt());
			if ( not self.rank[i].read_from_buf(ba)):return False;


		itemlist_count= ba.read_uint32(); 
		if ( itemlist_count==None ): return False;
		self.itemlist=[];
		for i in range(itemlist_count):
			self.itemlist.append(stru_item());
			if ( not self.itemlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if(len(self.rank)<>4):return False; 
		for i in range(4):
			if (  not  isinstance(self.rank[i] ,stru_id_cnt) ):return False; 
			if ( not self.rank[i].write_to_buf(ba)): return False;

		itemlist_count=len(self.itemlist);
		ba.write_uint32(itemlist_count);
		for i in range(itemlist_count):
			if (  not  isinstance(self.itemlist[i] ,stru_item) ):return False; 
			if ( not self.itemlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""#排名信息"""
		print tabs+"[rank]=>{";
		for i in range(4):
			print tabs+"    [%d]=>{"%(i) 
			self.rank[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+"}"
		print tabs+"#奖励物品"
		print tabs+"[itemlist]=>{";
		for i in range(len(self.itemlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.itemlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class noti_cli_war_update_score_out :
	"""
参数列表:
	/* 攻击者的位置 */
	#类型:uint32
	public pos;

	/* 米米号 */
	#类型:uint32
	public userid;

	/* 得分 */
	#类型:uint32
	public scores;

	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public team_score;


	"""

	def read_from_buf(self, ba ):
		self.pos=ba.read_uint32();
		if ( self.pos== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.team_score=ba.read_uint32();
		if ( self.team_score== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.pos)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.scores)):return False;
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.team_score)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 攻击者的位置 */"""
		print tabs+"[pos]=%s"%(str(self.pos))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 得分 */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[team_score]=%s"%(str(self.team_score))
		
		pass;
	




class stru_pet_simple_info :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 宠物类型 */
	#类型:uint32
	public pettype;

	/* 位置 */
	#类型:uint32
	public location;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.pettype=ba.read_uint32();
		if ( self.pettype== None): return False;
		self.location=ba.read_uint32();
		if ( self.location== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.pettype)):return False;
		if ( not ba.write_uint32(self.location)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 宠物类型 */"""
		print tabs+"[pettype]=%s"%(str(self.pettype))
		print tabs+"""/* 位置 */"""
		print tabs+"[location]=%s"%(str(self.location))
		
		pass;
	




class noti_get_pets_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:100, 类型:stru_pet_simple_info
	public petlist =array();


	"""

	def read_from_buf(self, ba ):

		petlist_count= ba.read_uint32(); 
		if ( petlist_count==None ): return False;
		self.petlist=[];
		for i in range(petlist_count):
			self.petlist.append(stru_pet_simple_info());
			if ( not self.petlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		petlist_count=len(self.petlist);
		ba.write_uint32(petlist_count);
		for i in range(petlist_count):
			if (  not  isinstance(self.petlist[i] ,stru_pet_simple_info) ):return False; 
			if ( not self.petlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[petlist]=>{";
		for i in range(len(self.petlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.petlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class user_id_nick_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class noti_global_msg_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:9999, 类型:user_id_nick_t
	public user_list =array();

	/* 0服务器状态 1击败boss 2获得稀有物品或装扮 3获得稀有宠物 4迷宫刷新 9：活动宝箱刷新 */
	#类型:uint32
	public type;

	/* Id（服务器状态（0重启、1关闭）、物品或装扮或宠物或迷宫ID） */
	#类型:uint32
	public val1;

	/**/
	#变长数组,最大长度:9999, 类型:uint32_t
	public value_list =array();

	/**/
	#变长数组,最大长度:2000, 类型:char
	public msg ;


	"""

	def read_from_buf(self, ba ):

		user_list_count= ba.read_uint32(); 
		if ( user_list_count==None ): return False;
		self.user_list=[];
		for i in range(user_list_count):
			self.user_list.append(user_id_nick_t());
			if ( not self.user_list[i].read_from_buf(ba)):return False;

		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.val1=ba.read_uint32();
		if ( self.val1== None): return False;

		value_list_count= ba.read_uint32(); 
		if ( value_list_count==None ): return False;
		self.value_list=[];
		for i in range(value_list_count):
			self.value_list.append(ba.read_uint32());
			if ( self.value_list[i]== None): return False;


		msg_count= ba.read_uint32(); 
		if ( msg_count==None ): return False;
		self.msg=ba.read_buf(msg_count);
		if( self.msg==None ):return False;

		return True;


	def write_to_buf(self,ba):
		user_list_count=len(self.user_list);
		ba.write_uint32(user_list_count);
		for i in range(user_list_count):
			if (  not  isinstance(self.user_list[i] ,user_id_nick_t) ):return False; 
			if ( not self.user_list[i].write_to_buf(ba)): return False;

		if ( not ba.write_uint32(self.type)):return False;
		if ( not ba.write_uint32(self.val1)):return False;
		value_list_count=len(self.value_list);
		ba.write_uint32(value_list_count);
		for i in range(value_list_count):
			if ( not ba.write_uint32(self.value_list[i])):return False;

		msg_count=len(self.msg);
		ba.write_uint32(msg_count);
		ba.write_buf(self.msg,msg_count);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[user_list]=>{";
		for i in range(len(self.user_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.user_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		print tabs+"""/* 0服务器状态 1击败boss 2获得稀有物品或装扮 3获得稀有宠物 4迷宫刷新 9：活动宝箱刷新 */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/* Id（服务器状态（0重启、1关闭）、物品或装扮或宠物或迷宫ID） */"""
		print tabs+"[val1]=%s"%(str(self.val1))
		print tabs+"#"
		print tabs+"[value_list]=>{";
		for i in range(len(self.value_list)):
			print tabs+"    [%d]="%(i)+str(self.value_list[i]); 

		print tabs+'}'
		print tabs+"""/*  */"""
		print tabs+"[msg]=%s"%(str(self.msg))
		
		pass;
	




class stru_pet_lvinfo :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;

	/* 当前等级 */
	#类型:uint32
	public level;

	/* 剩余属性点 */
	#类型:uint32
	public attraddtion;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.attraddtion=ba.read_uint32();
		if ( self.attraddtion== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint32(self.attraddtion)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 当前等级 */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attraddtion]=%s"%(str(self.attraddtion))
		
		pass;
	




class noti_pet_levelup_out :
	"""
参数列表:
	/*宠物列表*/
	#变长数组,最大长度:6, 类型:stru_pet_lvinfo
	public petlist =array();


	"""

	def read_from_buf(self, ba ):

		petlist_count= ba.read_uint32(); 
		if ( petlist_count==None ): return False;
		self.petlist=[];
		for i in range(petlist_count):
			self.petlist.append(stru_pet_lvinfo());
			if ( not self.petlist[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		petlist_count=len(self.petlist);
		ba.write_uint32(petlist_count);
		for i in range(petlist_count):
			if (  not  isinstance(self.petlist[i] ,stru_pet_lvinfo) ):return False; 
			if ( not self.petlist[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#宠物列表"
		print tabs+"[petlist]=>{";
		for i in range(len(self.petlist)):
			print tabs+"    [%d]=>{"%(i) 
			self.petlist[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class prof_compensation_in :
	"""
参数列表:
	/* 职业 */
	#类型:uint32
	public prof;


	"""

	def read_from_buf(self, ba ):
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.prof)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 职业 */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		
		pass;
	




class recommend_pet_add_attr_in :
	"""
参数列表:
	/* 宠物ID */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class reset_pet_add_attr_in :
	"""
参数列表:
	/* 需要重置的宠物ID */
	#类型:uint32
	public petid;

	/* 重置需要的物品 */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 需要重置的宠物ID */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 重置需要的物品 */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class reset_pet_add_attr_out :
	"""
参数列表:
	/* 宠物信息 */
	#类型:stru_cli_pet_info
	public pet;


	"""

	def read_from_buf(self, ba ):
		self.pet=stru_cli_pet_info();
		if ( not self.pet.read_from_buf(ba)) :return False;

		return True;


	def write_to_buf(self,ba):
		if ( not isinstance(self.pet,stru_cli_pet_info)): return False; 
		if ( not self.pet.write_to_buf(ba)): return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物信息 */""";
		print tabs+"[pet]=>{";
		self.pet.echo(print_hex,tabs+"    ");
		print tabs+"}";
		
		pass;
	




class set_default_skill_level_in :
	"""
参数列表:
	/* 宠物ID（0为用户） */
	#类型:uint32
	public petid;

	/* 技能ID */
	#类型:uint32
	public skillid;

	/* 默认等级 */
	#类型:uint32
	public defaultlv;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.skillid=ba.read_uint32();
		if ( self.skillid== None): return False;
		self.defaultlv=ba.read_uint32();
		if ( self.defaultlv== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.skillid)):return False;
		if ( not ba.write_uint32(self.defaultlv)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 宠物ID（0为用户） */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/* 技能ID */"""
		print tabs+"[skillid]=%s"%(str(self.skillid))
		print tabs+"""/* 默认等级 */"""
		print tabs+"[defaultlv]=%s"%(str(self.defaultlv))
		
		pass;
	




class user_init_info_in :
	"""
参数列表:
	/* 颜色 */
	#类型:uint32
	public color;

	/* 水晶ID */
	#类型:uint32
	public crystal_id;

	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/* 职业 */
	#类型:uint32
	public prof;


	"""

	def read_from_buf(self, ba ):
		self.color=ba.read_uint32();
		if ( self.color== None): return False;
		self.crystal_id=ba.read_uint32();
		if ( self.crystal_id== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.color)):return False;
		if ( not ba.write_uint32(self.crystal_id)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.prof)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 颜色 */"""
		print tabs+"[color]=%s"%(str(self.color))
		print tabs+"""/* 水晶ID */"""
		print tabs+"[crystal_id]=%s"%(str(self.crystal_id))
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/* 职业 */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		
		pass;
	




class user_init_info_out :
	"""
参数列表:
	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public flag;

	/*  */
	#类型:uint32
	public prof;

	/*  */
	#类型:uint32
	public color;

	/*  */
	#类型:uint32
	public register_time;

	/*  */
	#类型:uint32
	public energy;

	/* 体力 */
	#类型:uint16
	public physique;

	/* 力量 */
	#类型:uint16
	public strength;

	/* 耐力 */
	#类型:uint16
	public endurance;

	/* 速度 */
	#类型:uint16
	public quick;

	/* 智力 */
	#类型:uint16
	public intelligence;

	/* 剩余属性点 */
	#类型:uint16
	public attr_addition;

	/* hp当前值 */
	#类型:uint32
	public hp;

	/* mp当前值 */
	#类型:uint32
	public mp;

	/* 五行 */
	#类型:uint8
	public nature;

	/*  */
	#类型:uint64
	public mapid;

	/* x坐标 */
	#类型:uint32
	public posx;

	/* y坐标 */
	#类型:uint32
	public posy;

	/*  */
	#类型:uint32
	public hp_max;

	/*  */
	#类型:uint32
	public mp_max;

	/* 物攻 */
	#类型:uint32
	public attack;

	/* 物防 */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdefense;

	/* 敏捷 */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit_rate;

	/*  */
	#类型:uint16
	public avoid_rate;

	/* 暴击率 */
	#类型:uint16
	public critical_attack;

	/* 致命一击率 */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/* 抗混乱 */
	#类型:uint16
	public rconfusion;

	/* 抗石化 */
	#类型:uint16
	public rstone;

	/* 抗冰冻 */
	#类型:uint16
	public rfreeze;

	/* 抗昏睡 */
	#类型:uint16
	public rsleep;

	/* 抗诅咒 */
	#类型:uint16
	public rcurse;

	/* 反击概率 */
	#类型:uint16
	public fight_back;

	/* 反震概率 */
	#类型:uint16
	public strike_back;

	/* 反震程度 */
	#类型:uint16
	public strike_back_hurt;

	/* 抵御暴击的机率 */
	#类型:uint16
	public rcritical_attack;

	/* 抗致命一击率 */
	#类型:uint16
	public rdeadly_attack;


	"""

	def read_from_buf(self, ba ):
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.prof=ba.read_uint32();
		if ( self.prof== None): return False;
		self.color=ba.read_uint32();
		if ( self.color== None): return False;
		self.register_time=ba.read_uint32();
		if ( self.register_time== None): return False;
		self.energy=ba.read_uint32();
		if ( self.energy== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.endurance=ba.read_uint16();
		if ( self.endurance== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.nature=ba.read_uint8();
		if ( self.nature== None): return False;
		self.mapid=ba.read_uint64();
		if ( self.mapid== None): return False;
		self.posx=ba.read_uint32();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint32();
		if ( self.posy== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack=ba.read_uint32();
		if ( self.attack== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdefense=ba.read_uint32();
		if ( self.mdefense== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit_rate=ba.read_uint16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_uint16();
		if ( self.avoid_rate== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.prof)):return False;
		if ( not ba.write_uint32(self.color)):return False;
		if ( not ba.write_uint32(self.register_time)):return False;
		if ( not ba.write_uint32(self.energy)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.endurance)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.nature)):return False;
		if ( not ba.write_uint64(self.mapid)):return False;
		if ( not ba.write_uint32(self.posx)):return False;
		if ( not ba.write_uint32(self.posy)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.attack)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdefense)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit_rate)):return False;
		if ( not ba.write_uint16(self.avoid_rate)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 昵称 */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/*  */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		print tabs+"[color]=%s"%(str(self.color))
		print tabs+"""/*  */"""
		print tabs+"[register_time]=%s"%(str(self.register_time))
		print tabs+"""/*  */"""
		print tabs+"[energy]=%s"%(str(self.energy))
		print tabs+"""/* 体力 */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/* 力量 */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/* 耐力 */"""
		print tabs+"[endurance]=%s"%(str(self.endurance))
		print tabs+"""/* 速度 */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/* 智力 */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/* 剩余属性点 */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/* hp当前值 */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/* mp当前值 */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/* 五行 */"""
		print tabs+"[nature]=%s"%(str(self.nature))
		print tabs+"""/*  */"""
		print tabs+"[mapid]=%s"%(str(self.mapid))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/*  */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/*  */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/* 物攻 */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/* 物防 */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdefense]=%s"%(str(self.mdefense))
		print tabs+"""/* 敏捷 */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/*  */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/* 暴击率 */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/* 致命一击率 */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/* 抗混乱 */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/* 抗石化 */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/* 抗冰冻 */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/* 抗昏睡 */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/* 抗诅咒 */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/* 反击概率 */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/* 反震概率 */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/* 反震程度 */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/* 抵御暴击的机率 */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/* 抗致命一击率 */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		
		pass;
	




class use_broadcast_item_in :
	"""
参数列表:
	/* 对象用户ID */
	#类型:uint32
	public uid;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 使用方式 */
	#类型:uint32
	public way;

	/* x坐标 */
	#类型:uint16
	public posx;

	/* y坐标 */
	#类型:uint16
	public posy;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.way=ba.read_uint32();
		if ( self.way== None): return False;
		self.posx=ba.read_uint16();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint16();
		if ( self.posy== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.way)):return False;
		if ( not ba.write_uint16(self.posx)):return False;
		if ( not ba.write_uint16(self.posy)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 对象用户ID */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 使用方式 */"""
		print tabs+"[way]=%s"%(str(self.way))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		
		pass;
	




class use_broadcast_item_out :
	"""
参数列表:
	/* 使用者ID */
	#类型:uint32
	public userid;

	/* 对象ID */
	#类型:uint32
	public uid;

	/* 物品ID */
	#类型:uint32
	public itemid;

	/* 使用方式 */
	#类型:uint32
	public way;

	/* x坐标 */
	#类型:uint16
	public posx;

	/* y坐标 */
	#类型:uint16
	public posy;

	/* 额外信息（怪物ID） */
	#类型:uint32
	public info;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.way=ba.read_uint32();
		if ( self.way== None): return False;
		self.posx=ba.read_uint16();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint16();
		if ( self.posy== None): return False;
		self.info=ba.read_uint32();
		if ( self.info== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.way)):return False;
		if ( not ba.write_uint16(self.posx)):return False;
		if ( not ba.write_uint16(self.posy)):return False;
		if ( not ba.write_uint32(self.info)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 使用者ID */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/* 对象ID */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/* 物品ID */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 使用方式 */"""
		print tabs+"[way]=%s"%(str(self.way))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/* 额外信息（怪物ID） */"""
		print tabs+"[info]=%s"%(str(self.info))
		
		pass;
	




class use_spacetime_code_in :
	"""
参数列表:
	/* 时空密码 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""

	def read_from_buf(self, ba ):
		self.code=ba.read_buf(32);
		if( self.code==None ): return False;

		return True;


	def write_to_buf(self,ba):
		ba.write_buf(self.code,32);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 时空密码 */"""
		tmp_str=str(self.code);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[code]=%s"%(tmp_str)
		
		pass;
	




class use_spacetime_code_out :
	"""
参数列表:
	/*得到的礼品*/
	#变长数组,最大长度:100, 类型:uint32_t
	public gifts =array();


	"""

	def read_from_buf(self, ba ):

		gifts_count= ba.read_uint32(); 
		if ( gifts_count==None ): return False;
		self.gifts=[];
		for i in range(gifts_count):
			self.gifts.append(ba.read_uint32());
			if ( self.gifts[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		gifts_count=len(self.gifts);
		ba.write_uint32(gifts_count);
		for i in range(gifts_count):
			if ( not ba.write_uint32(self.gifts[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#得到的礼品"
		print tabs+"[gifts]=>{";
		for i in range(len(self.gifts)):
			print tabs+"    [%d]="%(i)+str(self.gifts[i]); 

		print tabs+'}'
		
		pass;
	




class stru_cloth_info :
	"""
参数列表:
	/*  */
	#类型:uint32
	public gettime;

	/*  */
	#类型:uint32
	public clothid;

	/*  */
	#类型:uint32
	public gridid;

	/*  */
	#类型:uint32
	public hpmax;

	/*  */
	#类型:uint32
	public mpmax;

	/*  */
	#类型:uint16
	public level;

	/*  */
	#类型:uint16
	public duration;

	/*  */
	#类型:uint16
	public mduration;

	/*  */
	#类型:uint32
	public atk;

	/*  */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdef;

	/*  */
	#类型:uint16
	public speed;

	/*  */
	#类型:uint16
	public hit;

	/*  */
	#类型:uint16
	public avoid;

	/*  */
	#类型:uint16
	public critical_attack;

	/*  */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/*  */
	#类型:uint16
	public rconfusion;

	/*  */
	#类型:uint16
	public rstone;

	/*  */
	#类型:uint16
	public rfreeze;

	/*  */
	#类型:uint16
	public rsleep;

	/*  */
	#类型:uint16
	public rcurse;

	/*  */
	#类型:uint16
	public fight_back;

	/*  */
	#类型:uint16
	public strike_back;

	/*  */
	#类型:uint16
	public strike_back_hurt;

	/*  */
	#类型:uint16
	public rcritical_attack;

	/*  */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint16
	public quality;


	"""

	def read_from_buf(self, ba ):
		self.gettime=ba.read_uint32();
		if ( self.gettime== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.gridid=ba.read_uint32();
		if ( self.gridid== None): return False;
		self.hpmax=ba.read_uint32();
		if ( self.hpmax== None): return False;
		self.mpmax=ba.read_uint32();
		if ( self.mpmax== None): return False;
		self.level=ba.read_uint16();
		if ( self.level== None): return False;
		self.duration=ba.read_uint16();
		if ( self.duration== None): return False;
		self.mduration=ba.read_uint16();
		if ( self.mduration== None): return False;
		self.atk=ba.read_uint32();
		if ( self.atk== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdef=ba.read_uint32();
		if ( self.mdef== None): return False;
		self.speed=ba.read_uint16();
		if ( self.speed== None): return False;
		self.hit=ba.read_uint16();
		if ( self.hit== None): return False;
		self.avoid=ba.read_uint16();
		if ( self.avoid== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.quality=ba.read_uint16();
		if ( self.quality== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.gettime)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.gridid)):return False;
		if ( not ba.write_uint32(self.hpmax)):return False;
		if ( not ba.write_uint32(self.mpmax)):return False;
		if ( not ba.write_uint16(self.level)):return False;
		if ( not ba.write_uint16(self.duration)):return False;
		if ( not ba.write_uint16(self.mduration)):return False;
		if ( not ba.write_uint32(self.atk)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdef)):return False;
		if ( not ba.write_uint16(self.speed)):return False;
		if ( not ba.write_uint16(self.hit)):return False;
		if ( not ba.write_uint16(self.avoid)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint16(self.quality)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[gettime]=%s"%(str(self.gettime))
		print tabs+"""/*  */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/*  */"""
		print tabs+"[gridid]=%s"%(str(self.gridid))
		print tabs+"""/*  */"""
		print tabs+"[hpmax]=%s"%(str(self.hpmax))
		print tabs+"""/*  */"""
		print tabs+"[mpmax]=%s"%(str(self.mpmax))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		print tabs+"""/*  */"""
		print tabs+"[mduration]=%s"%(str(self.mduration))
		print tabs+"""/*  */"""
		print tabs+"[atk]=%s"%(str(self.atk))
		print tabs+"""/*  */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdef]=%s"%(str(self.mdef))
		print tabs+"""/*  */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit]=%s"%(str(self.hit))
		print tabs+"""/*  */"""
		print tabs+"[avoid]=%s"%(str(self.avoid))
		print tabs+"""/*  */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/*  */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/*  */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/*  */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/*  */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/*  */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/*  */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/*  */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/*  */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/*  */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[quality]=%s"%(str(self.quality))
		
		pass;
	




class stru_game_change_add :
	"""
参数列表:
	/*  */
	#类型:uint32
	public gameid;

	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public logtime;

	/*  */
	#类型:uint32
	public opt_type;

	/*  */
	#类型:int32
	public ex_v1;

	/*  */
	#类型:int32
	public ex_v2;

	/*  */
	#类型:int32
	public ex_v3;

	/*  */
	#类型:int32
	public ex_v4;


	"""

	def read_from_buf(self, ba ):
		self.gameid=ba.read_uint32();
		if ( self.gameid== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.logtime=ba.read_uint32();
		if ( self.logtime== None): return False;
		self.opt_type=ba.read_uint32();
		if ( self.opt_type== None): return False;
		self.ex_v1=ba.read_int32();
		if ( self.ex_v1== None): return False;
		self.ex_v2=ba.read_int32();
		if ( self.ex_v2== None): return False;
		self.ex_v3=ba.read_int32();
		if ( self.ex_v3== None): return False;
		self.ex_v4=ba.read_int32();
		if ( self.ex_v4== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.gameid)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.logtime)):return False;
		if ( not ba.write_uint32(self.opt_type)):return False;
		if ( not ba.write_int32(self.ex_v1)):return False;
		if ( not ba.write_int32(self.ex_v2)):return False;
		if ( not ba.write_int32(self.ex_v3)):return False;
		if ( not ba.write_int32(self.ex_v4)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[gameid]=%s"%(str(self.gameid))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[logtime]=%s"%(str(self.logtime))
		print tabs+"""/*  */"""
		print tabs+"[opt_type]=%s"%(str(self.opt_type))
		print tabs+"""/*  */"""
		print tabs+"[ex_v1]=%s"%(str(self.ex_v1))
		print tabs+"""/*  */"""
		print tabs+"[ex_v2]=%s"%(str(self.ex_v2))
		print tabs+"""/*  */"""
		print tabs+"[ex_v3]=%s"%(str(self.ex_v3))
		print tabs+"""/*  */"""
		print tabs+"[ex_v4]=%s"%(str(self.ex_v4))
		
		pass;
	




class stru_petfight_rank_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public scores;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.scores)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		
		pass;
	




class stru_trade_cloth_new :
	"""
参数列表:
	/*  */
	#类型:uint32
	public tradeid;

	/* 衣服id */
	#类型:uint32
	public clothid;

	/* 类型 */
	#类型:uint32
	public clothtype;

	/* 价 格 */
	#类型:uint32
	public price;

	/* 税收 */
	#类型:uint32
	public tax;


	"""

	def read_from_buf(self, ba ):
		self.tradeid=ba.read_uint32();
		if ( self.tradeid== None): return False;
		self.clothid=ba.read_uint32();
		if ( self.clothid== None): return False;
		self.clothtype=ba.read_uint32();
		if ( self.clothtype== None): return False;
		self.price=ba.read_uint32();
		if ( self.price== None): return False;
		self.tax=ba.read_uint32();
		if ( self.tax== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.tradeid)):return False;
		if ( not ba.write_uint32(self.clothid)):return False;
		if ( not ba.write_uint32(self.clothtype)):return False;
		if ( not ba.write_uint32(self.price)):return False;
		if ( not ba.write_uint32(self.tax)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[tradeid]=%s"%(str(self.tradeid))
		print tabs+"""/* 衣服id */"""
		print tabs+"[clothid]=%s"%(str(self.clothid))
		print tabs+"""/* 类型 */"""
		print tabs+"[clothtype]=%s"%(str(self.clothtype))
		print tabs+"""/* 价 格 */"""
		print tabs+"[price]=%s"%(str(self.price))
		print tabs+"""/* 税收 */"""
		print tabs+"[tax]=%s"%(str(self.tax))
		
		pass;
	




class stru_user_rank_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public medals;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.medals=ba.read_uint32();
		if ( self.medals== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.medals)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[medals]=%s"%(str(self.medals))
		
		pass;
	




class stru_warrior_cloth :
	"""
参数列表:
	/*  */
	#类型:uint32
	public cloth_id;

	/*  */
	#类型:uint32
	public type_id;

	/*  */
	#类型:uint16
	public clevel;

	/*  */
	#类型:uint16
	public duration;

	/*  */
	#类型:uint8
	public equip_pos;


	"""

	def read_from_buf(self, ba ):
		self.cloth_id=ba.read_uint32();
		if ( self.cloth_id== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.clevel=ba.read_uint16();
		if ( self.clevel== None): return False;
		self.duration=ba.read_uint16();
		if ( self.duration== None): return False;
		self.equip_pos=ba.read_uint8();
		if ( self.equip_pos== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.cloth_id)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		if ( not ba.write_uint16(self.clevel)):return False;
		if ( not ba.write_uint16(self.duration)):return False;
		if ( not ba.write_uint8(self.equip_pos)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[cloth_id]=%s"%(str(self.cloth_id))
		print tabs+"""/*  */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/*  */"""
		print tabs+"[clevel]=%s"%(str(self.clevel))
		print tabs+"""/*  */"""
		print tabs+"[duration]=%s"%(str(self.duration))
		print tabs+"""/*  */"""
		print tabs+"[equip_pos]=%s"%(str(self.equip_pos))
		
		pass;
	




class stru_warrior_skill :
	"""
参数列表:
	/*  */
	#类型:uint32
	public skill_id;

	/*  */
	#类型:uint8
	public skill_level;

	/*  */
	#类型:uint8
	public use_level;

	/*  */
	#类型:uint32
	public skill_exp;

	/*  */
	#类型:uint16
	public rand_rate;

	/*  */
	#类型:uint8
	public cool_round;

	/*  */
	#类型:uint8
	public cool_update;


	"""

	def read_from_buf(self, ba ):
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_level=ba.read_uint8();
		if ( self.skill_level== None): return False;
		self.use_level=ba.read_uint8();
		if ( self.use_level== None): return False;
		self.skill_exp=ba.read_uint32();
		if ( self.skill_exp== None): return False;
		self.rand_rate=ba.read_uint16();
		if ( self.rand_rate== None): return False;
		self.cool_round=ba.read_uint8();
		if ( self.cool_round== None): return False;
		self.cool_update=ba.read_uint8();
		if ( self.cool_update== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint8(self.skill_level)):return False;
		if ( not ba.write_uint8(self.use_level)):return False;
		if ( not ba.write_uint32(self.skill_exp)):return False;
		if ( not ba.write_uint16(self.rand_rate)):return False;
		if ( not ba.write_uint8(self.cool_round)):return False;
		if ( not ba.write_uint8(self.cool_update)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/*  */"""
		print tabs+"[skill_level]=%s"%(str(self.skill_level))
		print tabs+"""/*  */"""
		print tabs+"[use_level]=%s"%(str(self.use_level))
		print tabs+"""/*  */"""
		print tabs+"[skill_exp]=%s"%(str(self.skill_exp))
		print tabs+"""/*  */"""
		print tabs+"[rand_rate]=%s"%(str(self.rand_rate))
		print tabs+"""/*  */"""
		print tabs+"[cool_round]=%s"%(str(self.cool_round))
		print tabs+"""/*  */"""
		print tabs+"[cool_update]=%s"%(str(self.cool_update))
		
		pass;
	




class stru_warrior_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public type_id;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public flag;

	/*  */
	#类型:uint32
	public viplv;

	/*  */
	#类型:uint32
	public color;

	/*  */
	#类型:uint8
	public race;

	/*  */
	#类型:uint8
	public prof;

	/*  */
	#类型:uint32
	public level;

	/*  */
	#类型:uint16
	public physique;

	/*  */
	#类型:uint16
	public strength;

	/*  */
	#类型:uint16
	public quick;

	/*  */
	#类型:uint16
	public intelligence;

	/*  */
	#类型:uint16
	public attr_addition;

	/*  */
	#类型:uint32
	public hp;

	/*  */
	#类型:uint32
	public mp;

	/*  */
	#类型:uint8
	public in_front;

	/*  */
	#类型:uint8
	public nature;

	/*  */
	#类型:uint32
	public hp_max;

	/*  */
	#类型:uint32
	public mp_max;

	/*  */
	#类型:uint32
	public attack;

	/*  */
	#类型:int16
	public speed;

	/*  */
	#类型:int16
	public hit_rate;

	/*  */
	#类型:int16
	public avoid_rate;

	/*  */
	#类型:uint32
	public defense;

	/*  */
	#类型:uint32
	public mdefense;

	/*  */
	#类型:uint16
	public critical_attack;

	/*  */
	#类型:uint16
	public deadly_attack;

	/* 抗毒 */
	#类型:uint16
	public rpoison;

	/*  */
	#类型:uint16
	public rconfusion;

	/*  */
	#类型:uint16
	public rstone;

	/*  */
	#类型:uint16
	public rfreeze;

	/*  */
	#类型:uint16
	public rsleep;

	/*  */
	#类型:uint16
	public rcurse;

	/*  */
	#类型:uint16
	public fight_back;

	/*  */
	#类型:uint16
	public strike_back;

	/*  */
	#类型:uint16
	public strike_back_hurt;

	/*  */
	#类型:uint16
	public rcritical_attack;

	/*  */
	#类型:uint16
	public rdeadly_attack;

	/*  */
	#类型:uint8
	public need_protect_exp;

	/*  */
	#类型:uint8
	public cloth_cnt;

	/*  */
	#定长数组,长度:8, 类型:stru_warrior_cloth 
	public clothes =array();

	/*  */
	#类型:uint8
	public skill_cnt;

	/*  */
	#定长数组,长度:10, 类型:stru_warrior_skill 
	public skills =array();

	/*  */
	#类型:uint32
	public weapon_type;

	/*  */
	#类型:uint32
	public shield;

	/*  */
	#类型:uint8
	public pet_cnt_actual;

	/*  */
	#类型:uint16
	public catchable;

	/*  */
	#类型:uint32
	public handbooklv;

	/*  */
	#类型:uint32
	public pet_contact_lv;

	/*  */
	#类型:uint8
	public pet_state;

	/*  */
	#定长数组,长度:2, 类型:uint32_t 
	public default_atk =array();

	/*  */
	#定长数组,长度:2, 类型:uint8_t 
	public default_atklv =array();

	/*  */
	#类型:uint32
	public autofight_count;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.flag=ba.read_uint32();
		if ( self.flag== None): return False;
		self.viplv=ba.read_uint32();
		if ( self.viplv== None): return False;
		self.color=ba.read_uint32();
		if ( self.color== None): return False;
		self.race=ba.read_uint8();
		if ( self.race== None): return False;
		self.prof=ba.read_uint8();
		if ( self.prof== None): return False;
		self.level=ba.read_uint32();
		if ( self.level== None): return False;
		self.physique=ba.read_uint16();
		if ( self.physique== None): return False;
		self.strength=ba.read_uint16();
		if ( self.strength== None): return False;
		self.quick=ba.read_uint16();
		if ( self.quick== None): return False;
		self.intelligence=ba.read_uint16();
		if ( self.intelligence== None): return False;
		self.attr_addition=ba.read_uint16();
		if ( self.attr_addition== None): return False;
		self.hp=ba.read_uint32();
		if ( self.hp== None): return False;
		self.mp=ba.read_uint32();
		if ( self.mp== None): return False;
		self.in_front=ba.read_uint8();
		if ( self.in_front== None): return False;
		self.nature=ba.read_uint8();
		if ( self.nature== None): return False;
		self.hp_max=ba.read_uint32();
		if ( self.hp_max== None): return False;
		self.mp_max=ba.read_uint32();
		if ( self.mp_max== None): return False;
		self.attack=ba.read_uint32();
		if ( self.attack== None): return False;
		self.speed=ba.read_int16();
		if ( self.speed== None): return False;
		self.hit_rate=ba.read_int16();
		if ( self.hit_rate== None): return False;
		self.avoid_rate=ba.read_int16();
		if ( self.avoid_rate== None): return False;
		self.defense=ba.read_uint32();
		if ( self.defense== None): return False;
		self.mdefense=ba.read_uint32();
		if ( self.mdefense== None): return False;
		self.critical_attack=ba.read_uint16();
		if ( self.critical_attack== None): return False;
		self.deadly_attack=ba.read_uint16();
		if ( self.deadly_attack== None): return False;
		self.rpoison=ba.read_uint16();
		if ( self.rpoison== None): return False;
		self.rconfusion=ba.read_uint16();
		if ( self.rconfusion== None): return False;
		self.rstone=ba.read_uint16();
		if ( self.rstone== None): return False;
		self.rfreeze=ba.read_uint16();
		if ( self.rfreeze== None): return False;
		self.rsleep=ba.read_uint16();
		if ( self.rsleep== None): return False;
		self.rcurse=ba.read_uint16();
		if ( self.rcurse== None): return False;
		self.fight_back=ba.read_uint16();
		if ( self.fight_back== None): return False;
		self.strike_back=ba.read_uint16();
		if ( self.strike_back== None): return False;
		self.strike_back_hurt=ba.read_uint16();
		if ( self.strike_back_hurt== None): return False;
		self.rcritical_attack=ba.read_uint16();
		if ( self.rcritical_attack== None): return False;
		self.rdeadly_attack=ba.read_uint16();
		if ( self.rdeadly_attack== None): return False;
		self.need_protect_exp=ba.read_uint8();
		if ( self.need_protect_exp== None): return False;
		self.cloth_cnt=ba.read_uint8();
		if ( self.cloth_cnt== None): return False;
		self.clothes=[];
		for i in range(8):
			self.clothes.append(stru_warrior_cloth());
			if ( not self.clothes[i].read_from_buf(ba)):return False;

		self.skill_cnt=ba.read_uint8();
		if ( self.skill_cnt== None): return False;
		self.skills=[];
		for i in range(10):
			self.skills.append(stru_warrior_skill());
			if ( not self.skills[i].read_from_buf(ba)):return False;

		self.weapon_type=ba.read_uint32();
		if ( self.weapon_type== None): return False;
		self.shield=ba.read_uint32();
		if ( self.shield== None): return False;
		self.pet_cnt_actual=ba.read_uint8();
		if ( self.pet_cnt_actual== None): return False;
		self.catchable=ba.read_uint16();
		if ( self.catchable== None): return False;
		self.handbooklv=ba.read_uint32();
		if ( self.handbooklv== None): return False;
		self.pet_contact_lv=ba.read_uint32();
		if ( self.pet_contact_lv== None): return False;
		self.pet_state=ba.read_uint8();
		if ( self.pet_state== None): return False;
		self.default_atk=[];
		for i in range(2):
			self.default_atk.append(ba.read_uint32());
			if ( self.default_atk[i]== None): return False;

		self.default_atklv=[];
		for i in range(2):
			self.default_atklv.append(ba.read_uint8());
			if ( self.default_atklv[i]== None): return False;

		self.autofight_count=ba.read_uint32();
		if ( self.autofight_count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.flag)):return False;
		if ( not ba.write_uint32(self.viplv)):return False;
		if ( not ba.write_uint32(self.color)):return False;
		if ( not ba.write_uint8(self.race)):return False;
		if ( not ba.write_uint8(self.prof)):return False;
		if ( not ba.write_uint32(self.level)):return False;
		if ( not ba.write_uint16(self.physique)):return False;
		if ( not ba.write_uint16(self.strength)):return False;
		if ( not ba.write_uint16(self.quick)):return False;
		if ( not ba.write_uint16(self.intelligence)):return False;
		if ( not ba.write_uint16(self.attr_addition)):return False;
		if ( not ba.write_uint32(self.hp)):return False;
		if ( not ba.write_uint32(self.mp)):return False;
		if ( not ba.write_uint8(self.in_front)):return False;
		if ( not ba.write_uint8(self.nature)):return False;
		if ( not ba.write_uint32(self.hp_max)):return False;
		if ( not ba.write_uint32(self.mp_max)):return False;
		if ( not ba.write_uint32(self.attack)):return False;
		if ( not ba.write_int16(self.speed)):return False;
		if ( not ba.write_int16(self.hit_rate)):return False;
		if ( not ba.write_int16(self.avoid_rate)):return False;
		if ( not ba.write_uint32(self.defense)):return False;
		if ( not ba.write_uint32(self.mdefense)):return False;
		if ( not ba.write_uint16(self.critical_attack)):return False;
		if ( not ba.write_uint16(self.deadly_attack)):return False;
		if ( not ba.write_uint16(self.rpoison)):return False;
		if ( not ba.write_uint16(self.rconfusion)):return False;
		if ( not ba.write_uint16(self.rstone)):return False;
		if ( not ba.write_uint16(self.rfreeze)):return False;
		if ( not ba.write_uint16(self.rsleep)):return False;
		if ( not ba.write_uint16(self.rcurse)):return False;
		if ( not ba.write_uint16(self.fight_back)):return False;
		if ( not ba.write_uint16(self.strike_back)):return False;
		if ( not ba.write_uint16(self.strike_back_hurt)):return False;
		if ( not ba.write_uint16(self.rcritical_attack)):return False;
		if ( not ba.write_uint16(self.rdeadly_attack)):return False;
		if ( not ba.write_uint8(self.need_protect_exp)):return False;
		if ( not ba.write_uint8(self.cloth_cnt)):return False;
		if(len(self.clothes)<>8):return False; 
		for i in range(8):
			if (  not  isinstance(self.clothes[i] ,stru_warrior_cloth) ):return False; 
			if ( not self.clothes[i].write_to_buf(ba)): return False;

		if ( not ba.write_uint8(self.skill_cnt)):return False;
		if(len(self.skills)<>10):return False; 
		for i in range(10):
			if (  not  isinstance(self.skills[i] ,stru_warrior_skill) ):return False; 
			if ( not self.skills[i].write_to_buf(ba)): return False;

		if ( not ba.write_uint32(self.weapon_type)):return False;
		if ( not ba.write_uint32(self.shield)):return False;
		if ( not ba.write_uint8(self.pet_cnt_actual)):return False;
		if ( not ba.write_uint16(self.catchable)):return False;
		if ( not ba.write_uint32(self.handbooklv)):return False;
		if ( not ba.write_uint32(self.pet_contact_lv)):return False;
		if ( not ba.write_uint8(self.pet_state)):return False;
		if(len(self.default_atk)<>2):return False; 
		for i in range(2):
			if ( not ba.write_uint32(self.default_atk[i])):return False;

		if(len(self.default_atklv)<>2):return False; 
		for i in range(2):
			if ( not ba.write_uint8(self.default_atklv[i])):return False;

		if ( not ba.write_uint32(self.autofight_count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[flag]=%s"%(str(self.flag))
		print tabs+"""/*  */"""
		print tabs+"[viplv]=%s"%(str(self.viplv))
		print tabs+"""/*  */"""
		print tabs+"[color]=%s"%(str(self.color))
		print tabs+"""/*  */"""
		print tabs+"[race]=%s"%(str(self.race))
		print tabs+"""/*  */"""
		print tabs+"[prof]=%s"%(str(self.prof))
		print tabs+"""/*  */"""
		print tabs+"[level]=%s"%(str(self.level))
		print tabs+"""/*  */"""
		print tabs+"[physique]=%s"%(str(self.physique))
		print tabs+"""/*  */"""
		print tabs+"[strength]=%s"%(str(self.strength))
		print tabs+"""/*  */"""
		print tabs+"[quick]=%s"%(str(self.quick))
		print tabs+"""/*  */"""
		print tabs+"[intelligence]=%s"%(str(self.intelligence))
		print tabs+"""/*  */"""
		print tabs+"[attr_addition]=%s"%(str(self.attr_addition))
		print tabs+"""/*  */"""
		print tabs+"[hp]=%s"%(str(self.hp))
		print tabs+"""/*  */"""
		print tabs+"[mp]=%s"%(str(self.mp))
		print tabs+"""/*  */"""
		print tabs+"[in_front]=%s"%(str(self.in_front))
		print tabs+"""/*  */"""
		print tabs+"[nature]=%s"%(str(self.nature))
		print tabs+"""/*  */"""
		print tabs+"[hp_max]=%s"%(str(self.hp_max))
		print tabs+"""/*  */"""
		print tabs+"[mp_max]=%s"%(str(self.mp_max))
		print tabs+"""/*  */"""
		print tabs+"[attack]=%s"%(str(self.attack))
		print tabs+"""/*  */"""
		print tabs+"[speed]=%s"%(str(self.speed))
		print tabs+"""/*  */"""
		print tabs+"[hit_rate]=%s"%(str(self.hit_rate))
		print tabs+"""/*  */"""
		print tabs+"[avoid_rate]=%s"%(str(self.avoid_rate))
		print tabs+"""/*  */"""
		print tabs+"[defense]=%s"%(str(self.defense))
		print tabs+"""/*  */"""
		print tabs+"[mdefense]=%s"%(str(self.mdefense))
		print tabs+"""/*  */"""
		print tabs+"[critical_attack]=%s"%(str(self.critical_attack))
		print tabs+"""/*  */"""
		print tabs+"[deadly_attack]=%s"%(str(self.deadly_attack))
		print tabs+"""/* 抗毒 */"""
		print tabs+"[rpoison]=%s"%(str(self.rpoison))
		print tabs+"""/*  */"""
		print tabs+"[rconfusion]=%s"%(str(self.rconfusion))
		print tabs+"""/*  */"""
		print tabs+"[rstone]=%s"%(str(self.rstone))
		print tabs+"""/*  */"""
		print tabs+"[rfreeze]=%s"%(str(self.rfreeze))
		print tabs+"""/*  */"""
		print tabs+"[rsleep]=%s"%(str(self.rsleep))
		print tabs+"""/*  */"""
		print tabs+"[rcurse]=%s"%(str(self.rcurse))
		print tabs+"""/*  */"""
		print tabs+"[fight_back]=%s"%(str(self.fight_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back]=%s"%(str(self.strike_back))
		print tabs+"""/*  */"""
		print tabs+"[strike_back_hurt]=%s"%(str(self.strike_back_hurt))
		print tabs+"""/*  */"""
		print tabs+"[rcritical_attack]=%s"%(str(self.rcritical_attack))
		print tabs+"""/*  */"""
		print tabs+"[rdeadly_attack]=%s"%(str(self.rdeadly_attack))
		print tabs+"""/*  */"""
		print tabs+"[need_protect_exp]=%s"%(str(self.need_protect_exp))
		print tabs+"""/*  */"""
		print tabs+"[cloth_cnt]=%s"%(str(self.cloth_cnt))
		print tabs+"""#"""
		print tabs+"[clothes]=>{";
		for i in range(8):
			print tabs+"    [%d]=>{"%(i) 
			self.clothes[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+"}"
		print tabs+"""/*  */"""
		print tabs+"[skill_cnt]=%s"%(str(self.skill_cnt))
		print tabs+"""#"""
		print tabs+"[skills]=>{";
		for i in range(10):
			print tabs+"    [%d]=>{"%(i) 
			self.skills[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+"}"
		print tabs+"""/*  */"""
		print tabs+"[weapon_type]=%s"%(str(self.weapon_type))
		print tabs+"""/*  */"""
		print tabs+"[shield]=%s"%(str(self.shield))
		print tabs+"""/*  */"""
		print tabs+"[pet_cnt_actual]=%s"%(str(self.pet_cnt_actual))
		print tabs+"""/*  */"""
		print tabs+"[catchable]=%s"%(str(self.catchable))
		print tabs+"""/*  */"""
		print tabs+"[handbooklv]=%s"%(str(self.handbooklv))
		print tabs+"""/*  */"""
		print tabs+"[pet_contact_lv]=%s"%(str(self.pet_contact_lv))
		print tabs+"""/*  */"""
		print tabs+"[pet_state]=%s"%(str(self.pet_state))
		print tabs+"""#"""
		print tabs+"[default_atk]=>{";
		for i in range(2):
			print tabs+"    [%d]="%(i)+str(self.default_atk[i]); 

		print tabs+"}"
		print tabs+"""#"""
		print tabs+"[default_atklv]=>{";
		for i in range(2):
			print tabs+"    [%d]="%(i)+str(self.default_atklv[i]); 

		print tabs+"}"
		print tabs+"""/*  */"""
		print tabs+"[autofight_count]=%s"%(str(self.autofight_count))
		
		pass;
	




create_time='2012年08月24日 星期5 18:16:25'
cmd_map={ }
cmd_map[1001]=(1001,'cli_login',cli_login_in,cli_login_out,0x3877b93b)
cmd_map[1002]=(1002,'cli_map_users',cli_map_users_in,None,0x3b2433f0)
cmd_map[1003]=(1003,'cli_leave_map',cli_leave_map_in,None,0x2c730268)
cmd_map[1004]=(1004,'cli_enter_map',cli_enter_map_in,None,0x06fe821f)
cmd_map[1005]=(1005,'cli_get_user_info',cli_get_user_info_in,None,0x2fd787f7)
cmd_map[1006]=(1006,'cli_get_user_detail',cli_get_user_detail_in,cli_get_user_detail_out,0xe88bc08f)
cmd_map[1007]=(1007,'cli_get_user_simple',cli_get_user_simple_in,cli_get_user_simple_out,0xd7d86b99)
cmd_map[1009]=(1009,'cli_user_walk',cli_user_walk_in,cli_user_walk_out,0x40974c8b)
cmd_map[1010]=(1010,'cli_talk',cli_talk_in,None,0x1647f9b8)
cmd_map[1011]=(1011,'cli_user_show',cli_user_show_in,cli_user_show_out,0x5e5ddf0c)
cmd_map[1012]=(1012,'cli_set_flag',cli_set_flag_in,None,0x9c6ea8a2)
cmd_map[1013]=(1013,'cli_vip_update',None,cli_vip_update_out,0x66742d6c)
cmd_map[1014]=(1014,'cli_chk_users_online',None,None,0x502d9729)
cmd_map[1015]=(1015,'user_init_info',user_init_info_in,user_init_info_out,0x559fd97e)
cmd_map[1017]=(1017,'cli_get_map_usercnt',None,cli_get_map_usercnt_out,0xa21db2b6)
cmd_map[1018]=(1018,'cli_chk_str_valid',cli_chk_str_valid_in,None,0xd3930b46)
cmd_map[1019]=(1019,'prof_compensation',prof_compensation_in,None,0xdc086d96)
cmd_map[1020]=(1020,'cli_post_msg',cli_post_msg_in,None,0x8c41b6d0)
cmd_map[1023]=(1023,'cli_set_user_nick',cli_set_user_nick_in,cli_set_user_nick_out,0x1a64292b)
cmd_map[1024]=(1024,'recommend_add_attr',None,None,0xea5f1757)
cmd_map[1025]=(1025,'cli_user_cure',cli_user_cure_in,cli_user_cure_out,0x72f1b6e8)
cmd_map[1026]=(1026,'cli_user_set_position',cli_user_set_position_in,cli_user_set_position_out,0x5225e272)
cmd_map[1027]=(1027,'cli_add_base_attr',cli_add_base_attr_in,None,0x56fa19f3)
cmd_map[1028]=(1028,'cli_notify_user_levelup',None,cli_notify_user_levelup_out,0x6f2c0b09)
cmd_map[1029]=(1029,'cli_set_user_color',cli_set_user_color_in,cli_set_user_color_out,0x78b46563)
cmd_map[1030]=(1030,'cli_set_busy_state',cli_set_busy_state_in,cli_set_busy_state_out,0x825f7ed0)
cmd_map[1031]=(1031,'cli_signin_day',None,cli_signin_day_out,0x213fddd0)
cmd_map[1032]=(1032,'cli_kick_user_offline',None,cli_kick_user_offline_out,0x7e9d573e)
cmd_map[1034]=(1034,'cli_reset_user_walk',None,cli_reset_user_walk_out,0x32fd75f1)
cmd_map[1035]=(1035,'cli_chk_teamate_enter_map',cli_chk_teamate_enter_map_in,cli_chk_teamate_enter_map_out,0xb652ef44)
cmd_map[1036]=(1036,'cli_allocate_exp',cli_allocate_exp_in,cli_allocate_exp_out,0x6e24b11c)
cmd_map[1038]=(1038,'cli_keep_sprite_alive',None,cli_keep_sprite_alive_out,0x71322189)
cmd_map[1039]=(1039,'cli_start_double_exp',None,cli_start_double_exp_out,0xb676fd24)
cmd_map[1040]=(1040,'cli_add_session',cli_add_session_in,cli_add_session_out,0x525eba29)
cmd_map[1051]=(1051,'cli_add_friend',cli_add_friend_in,None,0xcc52586a)
cmd_map[1052]=(1052,'cli_rsp_friend_add',cli_rsp_friend_add_in,None,0x86d893b8)
cmd_map[1053]=(1053,'cli_del_friend',cli_del_friend_in,None,0xc3bfc4aa)
cmd_map[1055]=(1055,'cli_bklist_add',cli_bklist_add_in,None,0x16dee905)
cmd_map[1056]=(1056,'cli_bklist_del',cli_bklist_del_in,None,0x2e121321)
cmd_map[1057]=(1057,'cli_get_bklist',None,cli_get_bklist_out,0xfbc30778)
cmd_map[1058]=(1058,'cli_noti_friend_del',None,cli_noti_friend_del_out,0x336e8372)
cmd_map[1059]=(1059,'cli_get_invited',None,cli_get_invited_out,0x8ac41f94)
cmd_map[1060]=(1060,'cli_add_relation',cli_add_relation_in,cli_add_relation_out,0x888a0cf0)
cmd_map[1061]=(1061,'cli_reply_add_relation',cli_reply_add_relation_in,cli_reply_add_relation_out,0x4e653f7e)
cmd_map[1062]=(1062,'cli_del_relation',cli_del_relation_in,None,0x3b27415a)
cmd_map[1063]=(1063,'cli_get_relationship',cli_get_relationship_in,cli_get_relationship_out,0xa5f7d9ab)
cmd_map[1065]=(1065,'cli_get_relation_reward',cli_get_relation_reward_in,cli_get_relation_reward_out,0x96481bd5)
cmd_map[1101]=(1101,'cli_buy_cloth',cli_buy_cloth_in,cli_buy_cloth_out,0xfc4b8e45)
cmd_map[1102]=(1102,'cli_get_pakt_cloth',None,cli_get_pakt_cloth_out,0x54e46972)
cmd_map[1103]=(1103,'cli_cloth_disappear',None,cli_cloth_disappear_out,0x8626d750)
cmd_map[1104]=(1104,'cli_del_cloth',cli_del_cloth_in,None,0xa99330b6)
cmd_map[1105]=(1105,'cli_set_body_clothes',cli_set_body_clothes_in,cli_set_body_clothes_out,0x72d4f48f)
cmd_map[1106]=(1106,'cli_get_body_clothes',None,cli_get_body_clothes_out,0xf2737d26)
cmd_map[1108]=(1108,'cli_buy_normal_item',cli_buy_normal_item_in,cli_buy_normal_item_out,0x04dcd899)
cmd_map[1109]=(1109,'cli_get_normal_item_list',None,cli_get_normal_item_list_out,0xce432f4e)
cmd_map[1110]=(1110,'noti_cli_get_item',None,noti_cli_get_item_out,0xa4a3aa36)
cmd_map[1111]=(1111,'cli_sell_clothes',cli_sell_clothes_in,cli_sell_clothes_out,0x5e816efa)
cmd_map[1112]=(1112,'cli_sell_items',cli_sell_items_in,cli_sell_items_out,0x47731c94)
cmd_map[1113]=(1113,'cli_del_normal_item',cli_del_normal_item_in,cli_del_normal_item_out,0x882ad882)
cmd_map[1114]=(1114,'cli_use_medical_item',cli_use_medical_item_in,cli_use_medical_item_out,0x0ce94cf0)
cmd_map[1115]=(1115,'cli_re_birth',cli_re_birth_in,cli_re_birth_out,0xb6447c8c)
cmd_map[1116]=(1116,'cli_use_handbook_item',cli_use_handbook_item_in,None,0xf26691ac)
cmd_map[1117]=(1117,'use_broadcast_item',use_broadcast_item_in,use_broadcast_item_out,0xc097183d)
cmd_map[1118]=(1118,'cli_chk_team_item',cli_chk_team_item_in,cli_chk_team_item_out,0xcd2acf6e)
cmd_map[1119]=(1119,'cli_repair_cloth',cli_repair_cloth_in,cli_repair_cloth_out,0x20ade27e)
cmd_map[1120]=(1120,'cli_check_team_item',cli_check_team_item_in,cli_check_team_item_out,0x8ee16afe)
cmd_map[1121]=(1121,'cli_get_house_item_list',None,cli_get_house_item_list_out,0x47862493)
cmd_map[1122]=(1122,'cli_get_house_cloth',cli_get_house_cloth_in,cli_get_house_cloth_out,0x081b1b2b)
cmd_map[1123]=(1123,'cli_item_in_out',cli_item_in_out_in,None,0xa60a69f2)
cmd_map[1124]=(1124,'cli_cloth_in_out',cli_cloth_in_out_in,None,0x19ffaf7b)
cmd_map[1125]=(1125,'cli_del_house_item',cli_del_house_item_in,None,0xd5038f03)
cmd_map[1126]=(1126,'cli_composite_item',cli_composite_item_in,None,0x81fb2ec2)
cmd_map[1127]=(1127,'cli_exchange_gift_normal',cli_exchange_gift_normal_in,cli_exchange_gift_normal_out,0x8abcc9de)
cmd_map[1128]=(1128,'cli_exchange',cli_exchange_in,None,0x7f518317)
cmd_map[1129]=(1129,'cli_exchange_gift_spec',cli_exchange_gift_spec_in,cli_exchange_gift_spec_out,0xf98a8bce)
cmd_map[1130]=(1130,'cli_exchange_gift_pet',cli_exchange_gift_pet_in,cli_exchange_gift_pet_out,0x90a12f4b)
cmd_map[1133]=(1133,'cli_add_item_feed_count',cli_add_item_feed_count_in,cli_add_item_feed_count_out,0xf45139bf)
cmd_map[1134]=(1134,'cli_get_sth_done',cli_get_sth_done_in,cli_get_sth_done_out,0x6342da21)
cmd_map[1135]=(1135,'cli_set_sth_done',cli_set_sth_done_in,cli_set_sth_done_out,0x405ea254)
cmd_map[1139]=(1139,'cli_use_buff_item',cli_use_buff_item_in,cli_use_buff_item_out,0x90687db3)
cmd_map[1140]=(1140,'cli_use_energy_item',cli_use_energy_item_in,cli_use_energy_item_out,0x5ff5a146)
cmd_map[1141]=(1141,'cli_upgrade_cloth_use_level',cli_upgrade_cloth_use_level_in,cli_upgrade_cloth_use_level_out,0x6cd0f06e)
cmd_map[1142]=(1142,'cli_active_cloth_potential',cli_active_cloth_potential_in,cli_active_cloth_potential_out,0x54080417)
cmd_map[1158]=(1158,'cli_get_task_detail',cli_get_task_detail_in,cli_get_task_detail_out,0xe96661c1)
cmd_map[1159]=(1159,'cli_write_task_diary',cli_write_task_diary_in,None,0x84148da8)
cmd_map[1161]=(1161,'get_task_all',None,get_task_all_out,0x5dd6eee3)
cmd_map[1162]=(1162,'cli_recv_task',cli_recv_task_in,cli_recv_task_out,0x0a607122)
cmd_map[1163]=(1163,'finish_task_node',finish_task_node_in,finish_task_node_out,0x6fe74746)
cmd_map[1164]=(1164,'cli_cancel_task',cli_cancel_task_in,cli_cancel_task_out,0xb6fbe9e0)
cmd_map[1165]=(1165,'cli_set_task_clibuf',cli_set_task_clibuf_in,cli_set_task_clibuf_out,0x0887f94d)
cmd_map[1166]=(1166,'cli_get_task_svrbuf',cli_get_task_svrbuf_in,cli_get_task_svrbuf_out,0x109f9f0f)
cmd_map[1167]=(1167,'cli_get_buff_range',cli_get_buff_range_in,cli_get_buff_range_out,0xf9c56557)
cmd_map[1168]=(1168,'cli_set_buff',cli_set_buff_in,None,0xa3fb9fd8)
cmd_map[1169]=(1169,'cli_get_loop_task',None,cli_get_loop_task_out,0x66bcc23c)
cmd_map[1170]=(1170,'noti_cli_task_loop_update',None,noti_cli_task_loop_update_out,0xf8ffd49c)
cmd_map[1200]=(1200,'cli_get_honor_list',None,cli_get_honor_list_out,0x6d120f2b)
cmd_map[1201]=(1201,'cli_use_honor',cli_use_honor_in,None,0xd2896470)
cmd_map[1300]=(1300,'cli_challenge',cli_challenge_in,cli_challenge_out,0xbab32d20)
cmd_map[1301]=(1301,'cli_accept_challenge',cli_accept_challenge_in,None,0x474a2264)
cmd_map[1302]=(1302,'cli_noti_team_challeg',None,cli_noti_team_challeg_out,0xd5483cac)
cmd_map[1303]=(1303,'cli_noti_team_challeged',None,cli_noti_team_challeged_out,0x61ea2598)
cmd_map[1304]=(1304,'cli_challenge_npc',cli_challenge_npc_in,None,0xb9447f0e)
cmd_map[1305]=(1305,'cli_noti_battle_created',None,None,0x87c7c5f0)
cmd_map[1306]=(1306,'cli_load_battle',cli_load_battle_in,None,0x84119c48)
cmd_map[1307]=(1307,'cli_noti_battle_started',None,cli_noti_battle_started_out,0xf1170fc9)
cmd_map[1308]=(1308,'cli_battle_attack',cli_battle_attack_in,None,0x58a632c0)
cmd_map[1309]=(1309,'cli_use_medical',cli_use_medical_in,None,0x6fc5de20)
cmd_map[1310]=(1310,'cli_battle_attacks_info',None,None,0x0babca7e)
cmd_map[1311]=(1311,'cli_battle_round_result',None,None,0xa5dfc9be)
cmd_map[1312]=(1312,'cli_round_info',cli_round_info_in,cli_round_info_out,0x5edce94d)
cmd_map[1313]=(1313,'cli_noti_user_fighted',None,cli_noti_user_fighted_out,0x7bc03cc7)
cmd_map[1314]=(1314,'cli_next_fight_step',None,cli_next_fight_step_out,0xc6b52fd3)
cmd_map[1316]=(1316,'cli_noti_load_rate',None,cli_noti_load_rate_out,0xeffe2627)
cmd_map[1317]=(1317,'cli_load_ready',cli_load_ready_in,None,0x52c24448)
cmd_map[1318]=(1318,'cli_sync_battle_end',None,None,0x9e341ee3)
cmd_map[1319]=(1319,'cli_battle_end',None,None,0x14b55c49)
cmd_map[1320]=(1320,'cli_reject_challenge',cli_reject_challenge_in,cli_reject_challenge_out,0x3f6c1312)
cmd_map[1321]=(1321,'cli_get_grp_day_challenge',None,cli_get_grp_day_challenge_out,0x4cf4629a)
cmd_map[1322]=(1322,'cli_delete_batr_team',None,cli_delete_batr_team_out,0x4e6a5e9e)
cmd_map[1323]=(1323,'cli_btrtem_add_mbr',cli_btrtem_add_mbr_in,None,0xceee862f)
cmd_map[1324]=(1324,'cli_sync_pkinfo',None,cli_sync_pkinfo_out,0xb320957a)
cmd_map[1325]=(1325,'cli_apply_pk',cli_apply_pk_in,cli_apply_pk_out,0x39d75439)
cmd_map[1326]=(1326,'cli_cancel_pk_apply',None,None,0x64cea742)
cmd_map[1327]=(1327,'cli_btrtem_apply',cli_btrtem_apply_in,None,0xfa9f3fa9)
cmd_map[1329]=(1329,'cli_register_for_team',cli_register_for_team_in,cli_register_for_team_out,0x2ff8acd5)
cmd_map[1331]=(1331,'cli_btrtem_kick_mbr',cli_btrtem_kick_mbr_in,None,0x31acf71b)
cmd_map[1332]=(1332,'cli_btrtem_mbr_leave',None,None,0xc69ec216)
cmd_map[1333]=(1333,'cli_rsp_team_info',None,cli_rsp_team_info_out,0x7750450c)
cmd_map[1334]=(1334,'cli_btrtem_enter_map',None,cli_btrtem_enter_map_out,0x9e02fb03)
cmd_map[1336]=(1336,'cli_cancel_challenge',None,cli_cancel_challenge_out,0xefc903b6)
cmd_map[1338]=(1338,'cli_use_beast_card',cli_use_beast_card_in,None,0x80502ba9)
cmd_map[1339]=(1339,'cli_battle_swap_pet',cli_battle_swap_pet_in,None,0xde66321f)
cmd_map[1341]=(1341,'cli_noti_battle_accepted',None,cli_noti_battle_accepted_out,0xa46b6349)
cmd_map[1342]=(1342,'cli_noti_tleader_action',cli_noti_tleader_action_in,cli_noti_tleader_action_out,0x04764ad1)
cmd_map[1343]=(1343,'cli_noti_team_state',None,cli_noti_team_state_out,0x6f798ced)
cmd_map[1344]=(1344,'cli_animation_finish',None,None,0xa5d1c6a7)
cmd_map[1345]=(1345,'cli_btrsvr_conn_closed',None,None,0xd9021f01)
cmd_map[1346]=(1346,'cli_change_team_leader',None,cli_change_team_leader_out,0x19e06714)
cmd_map[1349]=(1349,'cli_get_last_kill_beastgrp',None,cli_get_last_kill_beastgrp_out,0xaec6d92b)
cmd_map[1350]=(1350,'cli_get_map_grp',None,cli_get_map_grp_out,0x50c3f18b)
cmd_map[1351]=(1351,'cli_grp_challenged',None,cli_grp_challenged_out,0x6f0de4b0)
cmd_map[1352]=(1352,'cli_apply_megalith_war',None,None,0xbc66d482)
cmd_map[1353]=(1353,'cli_quit_megalith_war',None,None,0x6c571d63)
cmd_map[1354]=(1354,'cli_war_challenge_pos',cli_war_challenge_pos_in,cli_war_challenge_pos_out,0x05016564)
cmd_map[1355]=(1355,'cli_war_play_card',cli_war_play_card_in,None,0xa1d8d0e1)
cmd_map[1356]=(1356,'cli_war_attack_boss',None,None,0x4a1b3493)
cmd_map[1358]=(1358,'noti_cli_war_update_score',None,noti_cli_war_update_score_out,0xfef49aa5)
cmd_map[1359]=(1359,'noti_cli_war_be_attacked',None,noti_cli_war_be_attacked_out,0x2a7ad429)
cmd_map[1360]=(1360,'noti_cli_war_challenge_result',None,noti_cli_war_challenge_result_out,0x2382935c)
cmd_map[1361]=(1361,'noti_cli_war_over',None,noti_cli_war_over_out,0x89454fd4)
cmd_map[1362]=(1362,'cli_get_positions_info',None,cli_get_positions_info_out,0x61af9f64)
cmd_map[1363]=(1363,'cli_leave_position',None,cli_leave_position_out,0x4b6dc1e0)
cmd_map[1364]=(1364,'noti_cli_leave_war',None,None,0x7cb0c888)
cmd_map[1365]=(1365,'cli_get_loop_grp',None,cli_get_loop_grp_out,0x2c05becf)
cmd_map[1366]=(1366,'cli_refresh_loopgrp',cli_refresh_loopgrp_in,cli_refresh_loopgrp_out,0x67b5e532)
cmd_map[1367]=(1367,'cli_get_elite_beast',None,cli_get_elite_beast_out,0x7f12fa7b)
cmd_map[1368]=(1368,'cli_sync_beast_kill',None,cli_sync_beast_kill_out,0x2ed45b54)
cmd_map[1369]=(1369,'cli_check_engaged_beast_kill',None,cli_check_engaged_beast_kill_out,0x760cc3d4)
cmd_map[1370]=(1370,'cli_get_grp_challenge_cnt',cli_get_grp_challenge_cnt_in,cli_get_grp_challenge_cnt_out,0x66d1e1ab)
cmd_map[1380]=(1380,'cli_game_pvp_get_map_id',cli_game_pvp_get_map_id_in,cli_game_pvp_get_map_id_out,0xf9e9a209)
cmd_map[1381]=(1381,'cli_pvp_game_noti_time_out',None,cli_pvp_game_noti_time_out_out,0x21ca754a)
cmd_map[1383]=(1383,'noti_cli_home_pvp_game_start',None,noti_cli_home_pvp_game_start_out,0x07cfc5f9)
cmd_map[1384]=(1384,'cli_noti_home_pvp_info',None,cli_noti_home_pvp_info_out,0x15cffab7)
cmd_map[1385]=(1385,'cli_noti_home_pvp_pk_info',None,cli_noti_home_pvp_pk_info_out,0x3dba228c)
cmd_map[1386]=(1386,'cli_game_get_pvp_info',None,cli_game_get_pvp_info_out,0x197b7e58)
cmd_map[1387]=(1387,'cli_pvp_get_honor',cli_pvp_get_honor_in,cli_pvp_get_honor_out,0x4400a651)
cmd_map[1400]=(1400,'cli_add_npc_to_team',cli_add_npc_to_team_in,None,0x8da09108)
cmd_map[1501]=(1501,'cli_text_notify',cli_text_notify_in,None,0x03c66013)
cmd_map[1551]=(1551,'cli_set_pet_state',cli_set_pet_state_in,cli_set_pet_state_out,0x87354b6e)
cmd_map[1552]=(1552,'cli_set_pet_nick',cli_set_pet_nick_in,cli_set_pet_nick_out,0xf609c201)
cmd_map[1553]=(1553,'cli_get_pet_info',cli_get_pet_info_in,cli_get_pet_info_out,0x3b3d657a)
cmd_map[1554]=(1554,'cli_get_pet_list',None,cli_get_pet_list_out,0x1e9ecae7)
cmd_map[1555]=(1555,'cli_cure_pet',cli_cure_pet_in,cli_cure_pet_out,0xdc9ddd0f)
cmd_map[1556]=(1556,'cli_cure_pet_injury',cli_cure_pet_injury_in,cli_cure_pet_injury_out,0x6152937d)
cmd_map[1557]=(1557,'cli_get_user_pet_list',cli_get_user_pet_list_in,cli_get_user_pet_list_out,0xcac6d076)
cmd_map[1558]=(1558,'cli_pet_follow',cli_pet_follow_in,cli_pet_follow_out,0xb16accfb)
cmd_map[1559]=(1559,'cli_get_pet_inhouse',cli_get_pet_inhouse_in,cli_get_pet_inhouse_out,0x67566c0b)
cmd_map[1560]=(1560,'cli_update_pet_location',cli_update_pet_location_in,None,0x5eb880b6)
cmd_map[1561]=(1561,'cli_del_pet',cli_del_pet_in,None,0x76cbb511)
cmd_map[1562]=(1562,'cli_get_other_pet_info',cli_get_other_pet_info_in,cli_get_other_pet_info_out,0xf5a144a9)
cmd_map[1563]=(1563,'cli_exchange_pet',cli_exchange_pet_in,cli_exchange_pet_out,0x226eefdb)
cmd_map[1564]=(1564,'cli_get_all_petcnt',None,cli_get_all_petcnt_out,0xa861815d)
cmd_map[1565]=(1565,'reset_pet_add_attr',reset_pet_add_attr_in,reset_pet_add_attr_out,0x390ce8bb)
cmd_map[1566]=(1566,'noti_get_pets',None,noti_get_pets_out,0x962c5222)
cmd_map[1567]=(1567,'cli_get_petlist_type',cli_get_petlist_type_in,cli_get_petlist_type_out,0x10d10da4)
cmd_map[1568]=(1568,'noti_pet_levelup',None,noti_pet_levelup_out,0x8308eb5a)
cmd_map[1569]=(1569,'cli_exchange_pet_for_item',cli_exchange_pet_for_item_in,cli_exchange_pet_for_item_out,0x78a7c4b8)
cmd_map[1570]=(1570,'cli_reset_pet',cli_reset_pet_in,cli_reset_pet_out,0x4e7beaa8)
cmd_map[1571]=(1571,'cli_train_race_skill',cli_train_race_skill_in,cli_train_race_skill_out,0x2a665204)
cmd_map[1572]=(1572,'cli_change_race_skill',cli_change_race_skill_in,None,0x5965a47b)
cmd_map[1573]=(1573,'cli_get_map_copy',cli_get_map_copy_in,cli_get_map_copy_out,0x5351a855)
cmd_map[1574]=(1574,'cli_recover_duration',cli_recover_duration_in,None,0x3877b671)
cmd_map[1575]=(1575,'cli_not_entry',cli_not_entry_in,None,0xf17a4160)
cmd_map[1576]=(1576,'cli_get_copy_info',None,cli_get_copy_info_out,0x941dab8c)
cmd_map[1577]=(1577,'cli_open_precious_box',cli_open_precious_box_in,cli_open_precious_box_out,0xdce1c246)
cmd_map[1578]=(1578,'cli_get_hangup_time',None,cli_get_hangup_time_out,0x5102b706)
cmd_map[1579]=(1579,'cli_get_hangup_rewards',cli_get_hangup_rewards_in,cli_get_hangup_rewards_out,0xe8be899b)
cmd_map[1580]=(1580,'cli_get_rewards_info',None,cli_get_rewards_info_out,0x666c976e)
cmd_map[1581]=(1581,'cli_get_item_valid_cnt',cli_get_item_valid_cnt_in,cli_get_item_valid_cnt_out,0x1f52eb7e)
cmd_map[1582]=(1582,'check_vip_rand_info',check_vip_rand_info_in,None,0x618b70c9)
cmd_map[1583]=(1583,'cli_get_btrteam_info',None,cli_get_btrteam_info_out,0xa70423c5)
cmd_map[1584]=(1584,'cli_open_pumpkin_lantern',None,cli_open_pumpkin_lantern_out,0x7cff33b8)
cmd_map[1585]=(1585,'cli_check_team_challenge_npc',cli_check_team_challenge_npc_in,cli_check_team_challenge_npc_out,0x6680c73c)
cmd_map[1587]=(1587,'cli_set_pet_flag',cli_set_pet_flag_in,None,0xfc6e66dc)
cmd_map[1588]=(1588,'cli_get_task_rank',None,cli_get_task_rank_out,0x2c462602)
cmd_map[1589]=(1589,'cli_get_task_time',None,cli_get_task_time_out,0x9b9c9b3c)
cmd_map[1590]=(1590,'apply_for_join_btr_team_new',apply_for_join_btr_team_new_in,apply_for_join_btr_team_new_out,0xf2b757ca)
cmd_map[1591]=(1591,'cli_get_valid_team',None,cli_get_valid_team_out,0x9c002184)
cmd_map[1592]=(1592,'cli_get_team_details',cli_get_team_details_in,cli_get_team_details_out,0xcf959370)
cmd_map[1593]=(1593,'cli_sync_user_time',cli_sync_user_time_in,None,0x3cc26308)
cmd_map[1594]=(1594,'cli_accept_add_team',cli_accept_add_team_in,None,0x7393bd27)
cmd_map[1595]=(1595,'cli_join_watchers',cli_join_watchers_in,None,0x60cd7eae)
cmd_map[1596]=(1596,'cli_cancel_watchers',cli_cancel_watchers_in,None,0x89634707)
cmd_map[1597]=(1597,'cli_noti_add_skill',None,cli_noti_add_skill_out,0xd5a3cf90)
cmd_map[1598]=(1598,'cli_change_prof',cli_change_prof_in,None,0x828b15c2)
cmd_map[1599]=(1599,'cli_give_vip_activity',cli_give_vip_activity_in,None,0x7d3ef3d1)
cmd_map[1600]=(1600,'cli_buy_skill',cli_buy_skill_in,cli_buy_skill_out,0xe1d28f3f)
cmd_map[1601]=(1601,'cli_pet_buy_skill',cli_pet_buy_skill_in,cli_pet_buy_skill_out,0xb75d0307)
cmd_map[1602]=(1602,'cli_get_skill_list',cli_get_skill_list_in,cli_get_skill_list_out,0xc7269be4)
cmd_map[1603]=(1603,'recommend_pet_add_attr',recommend_pet_add_attr_in,None,0x01297c3e)
cmd_map[1604]=(1604,'cli_del_skill',cli_del_skill_in,None,0xe9fc6a88)
cmd_map[1605]=(1605,'cli_pet_del_skill',cli_pet_del_skill_in,None,0x39bd67fc)
cmd_map[1606]=(1606,'cli_pet_add_base_attr',cli_pet_add_base_attr_in,cli_pet_add_base_attr_out,0x5198a5f9)
cmd_map[1607]=(1607,'cli_unlock_pet_talent_skill',cli_unlock_pet_talent_skill_in,cli_unlock_pet_talent_skill_out,0x02adf7a7)
cmd_map[1608]=(1608,'set_default_skill_level',set_default_skill_level_in,None,0x45de0e87)
cmd_map[1609]=(1609,'allocate_skill_exp',allocate_skill_exp_in,allocate_skill_exp_out,0x4a179d19)
cmd_map[1610]=(1610,'cli_get_lucky_star_info',None,cli_get_lucky_star_info_out,0x3da34a11)
cmd_map[1611]=(1611,'cli_set_all_pet_state',cli_set_all_pet_state_in,None,0x2cd740a3)
cmd_map[1612]=(1612,'cli_user_shapeshifting',cli_user_shapeshifting_in,cli_user_shapeshifting_out,0x0e9ee45a)
cmd_map[1613]=(1613,'cli_exchange_lucky_star',cli_exchange_lucky_star_in,cli_exchange_lucky_star_out,0xcd03f3a5)
cmd_map[1614]=(1614,'cli_debug_update_level',None,None,0x5c76beb3)
cmd_map[1630]=(1630,'cli_trade_get_mapid',cli_trade_get_mapid_in,cli_trade_get_mapid_out,0xeefb53ae)
cmd_map[1631]=(1631,'cli_trade_get_shop_info',None,cli_trade_get_shop_info_out,0x22176c71)
cmd_map[1634]=(1634,'cli_trade_change_shop',cli_trade_change_shop_in,cli_trade_change_shop_out,0x0b73a465)
cmd_map[1635]=(1635,'cli_trade_get_records',cli_trade_get_records_in,cli_trade_get_records_out,0x2decec14)
cmd_map[1637]=(1637,'cli_trade_add_item',cli_trade_add_item_in,cli_trade_add_item_out,0x37a726c1)
cmd_map[1639]=(1639,'cli_trade_buy_item',cli_trade_buy_item_in,cli_trade_buy_item_out,0x13284413)
cmd_map[1640]=(1640,'cli_trade_get_items',cli_trade_get_items_in,cli_trade_get_items_out,0xa24a74dd)
cmd_map[1700]=(1700,'cli_get_rand_item',cli_get_rand_item_in,cli_get_rand_item_out,0x36c97dea)
cmd_map[1701]=(1701,'cli_get_rand_item_spec',cli_get_rand_item_spec_in,cli_get_rand_item_spec_out,0xfabcda7f)
cmd_map[1702]=(1702,'cli_check_rand_info',cli_check_rand_info_in,cli_check_rand_info_out,0x96f7758a)
cmd_map[1703]=(1703,'cli_get_vip_item',cli_get_vip_item_in,cli_get_vip_item_out,0xac450597)
cmd_map[1704]=(1704,'cli_get_vip_item_cnt',None,cli_get_vip_item_cnt_out,0x40c1af1f)
cmd_map[1705]=(1705,'get_exchange_cnt_info',None,get_exchange_cnt_info_out,0x67adeef8)
cmd_map[1706]=(1706,'cli_get_rand_range',cli_get_rand_range_in,cli_get_rand_range_out,0xa97ea063)
cmd_map[1707]=(1707,'cli_get_draw_cnt',None,cli_get_draw_cnt_out,0xce226797)
cmd_map[1708]=(1708,'cli_draw_once',cli_draw_once_in,cli_draw_once_out,0x866cc417)
cmd_map[1709]=(1709,'cli_get_survey_info',None,cli_get_survey_info_out,0x50ece3e4)
cmd_map[1710]=(1710,'cli_engage_survey',cli_engage_survey_in,cli_engage_survey_out,0xc19b11cc)
cmd_map[1711]=(1711,'cli_engage_skill_survey',cli_engage_skill_survey_in,cli_engage_skill_survey_out,0xcd901e61)
cmd_map[1712]=(1712,'cli_get_skill_survey_info',None,cli_get_skill_survey_info_out,0x8b1372e7)
cmd_map[1713]=(1713,'cli_get_pet_skill_reward',cli_get_pet_skill_reward_in,cli_get_pet_skill_reward_out,0x9110a138)
cmd_map[1714]=(1714,'cli_get_pet_reward_info',None,cli_get_pet_reward_info_out,0x614a0063)
cmd_map[1715]=(1715,'cli_start_game',cli_start_game_in,None,0x29e17dd2)
cmd_map[1750]=(1750,'cli_start_hangup',cli_start_hangup_in,cli_start_hangup_out,0xe36d6942)
cmd_map[1751]=(1751,'cli_stop_hangup',None,cli_stop_hangup_out,0x7d13e51a)
cmd_map[1752]=(1752,'noti_cli_hang_get_exp',None,noti_cli_hang_get_exp_out,0xe566fd68)
cmd_map[1753]=(1753,'cli_get_seat_info',cli_get_seat_info_in,cli_get_seat_info_out,0x439c518d)
cmd_map[1800]=(1800,'cli_register_bird_map',cli_register_bird_map_in,None,0x23310b2d)
cmd_map[1801]=(1801,'cli_get_bird_maps',None,cli_get_bird_maps_out,0xc3ad268e)
cmd_map[1803]=(1803,'cli_check_team_bird_map',cli_check_team_bird_map_in,cli_check_team_bird_map_out,0x43f4d2b1)
cmd_map[1810]=(1810,'cli_register_boss_map',cli_register_boss_map_in,cli_register_boss_map_out,0xb74fb8e9)
cmd_map[1811]=(1811,'cli_get_boss_maps',None,cli_get_boss_maps_out,0xf455f61a)
cmd_map[1813]=(1813,'cli_check_team_boss_map',cli_check_team_boss_map_in,cli_check_team_boss_map_out,0xa0fdd299)
cmd_map[1814]=(1814,'cli_get_map_state',None,cli_get_map_state_out,0xe9fdf1da)
cmd_map[1815]=(1815,'cli_set_map_state',cli_set_map_state_in,cli_set_map_state_out,0xbd3d6071)
cmd_map[1850]=(1850,'cli_get_handbook_info',None,cli_get_handbook_info_out,0x4d81cd85)
cmd_map[1851]=(1851,'cli_get_g_book',None,cli_get_g_book_out,0x5649aa2a)
cmd_map[1852]=(1852,'cli_get_g_book_xiaomee',cli_get_g_book_xiaomee_in,cli_get_g_book_xiaomee_out,0xcf5caa65)
cmd_map[1900]=(1900,'cli_open_box',cli_open_box_in,None,0xace6d5a1)
cmd_map[1901]=(1901,'cli_box_opened',None,cli_box_opened_out,0x882f9921)
cmd_map[1902]=(1902,'cli_box_activated',None,cli_box_activated_out,0xd7dcce1e)
cmd_map[1903]=(1903,'noti_cli_get_box_item',None,noti_cli_get_box_item_out,0x316e3f2b)
cmd_map[1904]=(1904,'get_box_active_list',None,get_box_active_list_out,0xd5cc849c)
cmd_map[1910]=(1910,'cli_maze_state_change',None,cli_maze_state_change_out,0x849e9d92)
cmd_map[1911]=(1911,'cli_maze_open_portal',cli_maze_open_portal_in,cli_maze_open_portal_out,0x43eebf96)
cmd_map[1912]=(1912,'cli_maze_goto_map',None,cli_maze_goto_map_out,0x4f2a0bd2)
cmd_map[1913]=(1913,'cli_get_shop_in_map',None,cli_get_shop_in_map_out,0xc02093e9)
cmd_map[1950]=(1950,'cli_send_mail',cli_send_mail_in,None,0x9103e573)
cmd_map[1952]=(1952,'cli_get_mail_simple',None,cli_get_mail_simple_out,0xb60003cf)
cmd_map[1953]=(1953,'cli_get_mail_content',cli_get_mail_content_in,cli_get_mail_content_out,0xbd80c0c1)
cmd_map[1954]=(1954,'cli_del_mail',cli_del_mail_in,cli_del_mail_out,0x1fbea219)
cmd_map[1955]=(1955,'cli_mail_set_flag',cli_mail_set_flag_in,cli_mail_set_flag_out,0x2788aff4)
cmd_map[1956]=(1956,'cli_mail_notify',None,cli_mail_notify_out,0x8cd30270)
cmd_map[1958]=(1958,'cli_mail_items_get',cli_mail_items_get_in,cli_mail_items_get_out,0xac5fa8d1)
cmd_map[1970]=(1970,'noti_global_msg',None,noti_global_msg_out,0xa7c3a032)
cmd_map[2000]=(2000,'cli_get_home_info',cli_get_home_info_in,cli_get_home_info_out,0xe3b50666)
cmd_map[2001]=(2001,'cli_expbox_change',None,cli_expbox_change_out,0x7721086c)
cmd_map[2002]=(2002,'cli_update_home_flag',cli_update_home_flag_in,None,0x47ee29bf)
cmd_map[2050]=(2050,'cli_get_water_cnt',None,cli_get_water_cnt_out,0x694f3429)
cmd_map[2051]=(2051,'cli_use_water',cli_use_water_in,cli_use_water_out,0x4c0435f0)
cmd_map[2052]=(2052,'cli_start_fishing',None,None,0x514e22c4)
cmd_map[2053]=(2053,'cli_fishing_get_item',cli_fishing_get_item_in,cli_fishing_get_item_out,0x98111626)
cmd_map[2054]=(2054,'cli_finish_fishing',None,None,0x4b97b5fd)
cmd_map[2056]=(2056,'get_vacancy_cnt',None,get_vacancy_cnt_out,0xcf2e0f25)
cmd_map[2057]=(2057,'cli_get_hero_team_rank',None,cli_get_hero_team_rank_out,0xacb1cbd9)
cmd_map[2058]=(2058,'cli_get_hero_team_reward',None,cli_get_hero_team_reward_out,0xf53d3dc4)
cmd_map[2059]=(2059,'cli_get_hero_user_rank',None,cli_get_hero_user_rank_out,0x47df3119)
cmd_map[2060]=(2060,'cli_get_vip_active_item',None,cli_get_vip_active_item_out,0xa7af9ac0)
cmd_map[2061]=(2061,'noti_cli_can_get_dragon',None,noti_cli_can_get_dragon_out,0xb357141c)
cmd_map[2062]=(2062,'cli_get_hero_cup_reward',None,cli_get_hero_cup_reward_out,0x2a8bd82a)
cmd_map[2063]=(2063,'cli_devote_medals',None,cli_devote_medals_out,0x7d4a8867)
cmd_map[2064]=(2064,'cli_get_vip_active_2',None,cli_get_vip_active_2_out,0xdbdae3f7)
cmd_map[2100]=(2100,'cli_pic_srv_ip_port',None,cli_pic_srv_ip_port_out,0xd4310463)
cmd_map[2150]=(2150,'cli_read_news',cli_read_news_in,None,0xa597aa1d)
cmd_map[3001]=(3001,'cli_check_magic_code',cli_check_magic_code_in,None,0x7711b034)
cmd_map[3002]=(3002,'cli_use_magic_code',cli_use_magic_code_in,None,0xdb88da93)
cmd_map[3101]=(3101,'get_bus_friend_uplist',get_bus_friend_uplist_in,get_bus_friend_uplist_out,0xdc68d746)
cmd_map[3102]=(3102,'get_bus_friend_base_info',get_bus_friend_base_info_in,get_bus_friend_base_info_out,0x50ac1cf3)
cmd_map[3200]=(3200,'mall_get_money_balance',None,mall_get_money_balance_out,0x4b7f5f4d)
cmd_map[3201]=(3201,'mall_get_items_price',mall_get_items_price_in,mall_get_items_price_out,0x9243ebf2)
cmd_map[3202]=(3202,'mall_get_item_detail',mall_get_item_detail_in,mall_get_item_detail_out,0x8198a1ea)
cmd_map[3203]=(3203,'mall_buy_item',mall_buy_item_in,mall_buy_item_out,0x4e18cc4b)
cmd_map[4001]=(4001,'check_spacetime_code',check_spacetime_code_in,check_spacetime_code_out,0xbcd19475)
cmd_map[4002]=(4002,'use_spacetime_code',use_spacetime_code_in,use_spacetime_code_out,0x7b62d113)
	
def init_cmd_map():
	pass

try:
	import xland_online_proto_base
	base_type=xland_online_proto_base.Cxland_online_proto_base
except:
	base_type=object
	pass


class Cxland_online_proto (base_type):
	def __init__(self,ip,port):
		xland_online_proto_base.Cxland_online_proto_base.__init__(self,ip,port)

	def cli_login(self ,type_id ):
		"""
登陆:
	/* 随机生成的怪物组素材ID */
	#类型:uint32
	public type_id;


	"""
		pri_in=cli_login_in();

		pri_in.type_id=type_id
		self.sendmsg(1001, pri_in );
		pass

	def cli_map_users(self ,mapid,type ):
		"""
获得地图内所有用户信息:
	/* 地图类型(0,常规地图) */
	#类型:uint32
	public type;


	"""
		pri_in=cli_map_users_in();

		pri_in.mapid=mapid
		pri_in.type=type
		self.sendmsg(1002, pri_in );
		pass

	def cli_leave_map(self ,userid,mapid,maptype ):
		"""
用户离开地图广播包:
	/* 地图类型 */
	#类型:uint32
	public maptype;


	"""
		pri_in=cli_leave_map_in();

		pri_in.userid=userid
		pri_in.mapid=mapid
		pri_in.maptype=maptype
		self.sendmsg(1003, pri_in );
		pass

	def cli_enter_map(self ,mapid,maptype,posx,posy,jumptype ):
		"""
跳场景:
	/* 跳转类型 */
	#类型:uint32
	public jumptype;


	"""
		pri_in=cli_enter_map_in();

		pri_in.mapid=mapid
		pri_in.maptype=maptype
		pri_in.posx=posx
		pri_in.posy=posy
		pri_in.jumptype=jumptype
		self.sendmsg(1004, pri_in );
		pass

	def cli_get_user_info(self ,userid ):
		"""
查看用户基础信息:
	/* 用户ID号 */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_get_user_info_in();

		pri_in.userid=userid
		self.sendmsg(1005, pri_in );
		pass

	def cli_get_user_detail(self ,userid ):
		"""
查看用户详细信息:
	/* 用户ID号 */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_get_user_detail_in();

		pri_in.userid=userid
		self.sendmsg(1006, pri_in );
		pass

	def cli_get_user_simple(self ,uid ):
		"""
获取用户简单信息，通常用于排名显示:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_get_user_simple_in();

		pri_in.uid=uid
		self.sendmsg(1007, pri_in );
		pass

	def cli_user_walk(self ,sx,sy,ex,ey,step,direction,type,nouse ):
		"""
用户走路:
	/*  */
	#类型:uint16
	public nouse;


	"""
		pri_in=cli_user_walk_in();

		pri_in.sx=sx
		pri_in.sy=sy
		pri_in.ex=ex
		pri_in.ey=ey
		pri_in.step=step
		pri_in.direction=direction
		pri_in.type=type
		pri_in.nouse=nouse
		self.sendmsg(1009, pri_in );
		pass

	def cli_talk(self ,obj_userid,msg ):
		"""
:
	/**/
	#变长数组,最大长度:100000, 类型:char
	public msg ;


	"""
		pri_in=cli_talk_in();

		pri_in.obj_userid=obj_userid
		pri_in.msg=msg
		self.sendmsg(1010, pri_in );
		pass

	def cli_user_show(self ,show_type,direction ):
		"""
做动作:
	/* 方向 */
	#类型:uint32
	public direction;


	"""
		pri_in=cli_user_show_in();

		pri_in.show_type=show_type
		pri_in.direction=direction
		self.sendmsg(1011, pri_in );
		pass

	def cli_set_flag(self ,bit,flag ):
		"""
设置标志位:
	/* 0或1 */
	#类型:uint32
	public flag;


	"""
		pri_in=cli_set_flag_in();

		pri_in.bit=bit
		pri_in.flag=flag
		self.sendmsg(1012, pri_in );
		pass

	def cli_vip_update(self  ):
		"""
用户VIP信息更新:

	"""
		pri_in=None;

		self.sendmsg(1013, pri_in );
		pass

	def cli_chk_users_online(self  ):
		"""
查看是否在线:

	"""
		pri_in=None;

		self.sendmsg(1014, pri_in );
		pass

	def user_init_info(self ,color,crystal_id,nick,prof ):
		"""
初始化人物信息:
	/* 职业 */
	#类型:uint32
	public prof;


	"""
		pri_in=user_init_info_in();

		pri_in.color=color
		pri_in.crystal_id=crystal_id
		pri_in.nick=nick
		pri_in.prof=prof
		self.sendmsg(1015, pri_in );
		pass

	def cli_get_map_usercnt(self  ):
		"""
获取地图上的人数:

	"""
		pri_in=None;

		self.sendmsg(1017, pri_in );
		pass

	def cli_chk_str_valid(self ,str_value ):
		"""
验证是否有脏词:
	/* 要检查的字符串 */
	#定长数组,长度:64, 类型:char 
	public str_value ;


	"""
		pri_in=cli_chk_str_valid_in();

		pri_in.str_value=str_value
		self.sendmsg(1018, pri_in );
		pass

	def prof_compensation(self ,prof ):
		"""
职业补选:
	/* 职业 */
	#类型:uint32
	public prof;


	"""
		pri_in=prof_compensation_in();

		pri_in.prof=prof
		self.sendmsg(1019, pri_in );
		pass

	def cli_post_msg(self ,type,title,msglen ):
		"""
投稿:
	/* 消息长度（最大不超过3000个） */
	#类型:uint32
	public msglen;


	"""
		pri_in=cli_post_msg_in();

		pri_in.type=type
		pri_in.title=title
		pri_in.msglen=msglen
		self.sendmsg(1020, pri_in );
		pass

	def cli_set_user_nick(self ,nick ):
		"""
修改用户昵称:
	/* 昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""
		pri_in=cli_set_user_nick_in();

		pri_in.nick=nick
		self.sendmsg(1023, pri_in );
		pass

	def recommend_add_attr(self  ):
		"""
推荐配点:

	"""
		pri_in=None;

		self.sendmsg(1024, pri_in );
		pass

	def cli_user_cure(self ,type ):
		"""
人物治疗:
	/* 1:hp 2:mp 3:受伤治疗 4:人物一键治疗 5:全部一键治疗 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_user_cure_in();

		pri_in.type=type
		self.sendmsg(1025, pri_in );
		pass

	def cli_user_set_position(self ,pos ):
		"""
设置人物站位:
	/* 人物位置（1：前排，0：后排） */
	#类型:uint32
	public pos;


	"""
		pri_in=cli_user_set_position_in();

		pri_in.pos=pos
		self.sendmsg(1026, pri_in );
		pass

	def cli_add_base_attr(self ,physique,strength,endurance,quick,intelligence ):
		"""
任务配点:
	/* 智力 */
	#类型:uint32
	public intelligence;


	"""
		pri_in=cli_add_base_attr_in();

		pri_in.physique=physique
		pri_in.strength=strength
		pri_in.endurance=endurance
		pri_in.quick=quick
		pri_in.intelligence=intelligence
		self.sendmsg(1027, pri_in );
		pass

	def cli_notify_user_levelup(self  ):
		"""
用户升级:

	"""
		pri_in=None;

		self.sendmsg(1028, pri_in );
		pass

	def cli_set_user_color(self ,itemid ):
		"""
修改用户颜色:
	/* 颜色果实ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_set_user_color_in();

		pri_in.itemid=itemid
		self.sendmsg(1029, pri_in );
		pass

	def cli_set_busy_state(self ,type,state ):
		"""
设置用户忙状态:
	/* 组队开关：1 组队开 0 组队关  普通忙状态：0 离开 1 空闲 2 战斗 3 时报 4 NPC对话 5 游戏或剧情 6 查看信息  PK开关：1 pk开 0 pk关 */
	#类型:uint32
	public state;


	"""
		pri_in=cli_set_busy_state_in();

		pri_in.type=type
		pri_in.state=state
		self.sendmsg(1030, pri_in );
		pass

	def cli_signin_day(self  ):
		"""
每日签到:

	"""
		pri_in=None;

		self.sendmsg(1031, pri_in );
		pass

	def cli_kick_user_offline(self  ):
		"""
踢用户下线:

	"""
		pri_in=None;

		self.sendmsg(1032, pri_in );
		pass

	def cli_reset_user_walk(self  ):
		"""
通知客户端重置用户走路信息:

	"""
		pri_in=None;

		self.sendmsg(1034, pri_in );
		pass

	def cli_chk_teamate_enter_map(self ,mapid,maptype ):
		"""
检查队伍能否进入地图:
	/* 地图类型（0） */
	#类型:uint32
	public maptype;


	"""
		pri_in=cli_chk_teamate_enter_map_in();

		pri_in.mapid=mapid
		pri_in.maptype=maptype
		self.sendmsg(1035, pri_in );
		pass

	def cli_allocate_exp(self ,petid,exp ):
		"""
经验树分配:
	/* 要分配的经验数量 */
	#类型:uint32
	public exp;


	"""
		pri_in=cli_allocate_exp_in();

		pri_in.petid=petid
		pri_in.exp=exp
		self.sendmsg(1036, pri_in );
		pass

	def cli_keep_sprite_alive(self  ):
		"""
客户端心跳包:

	"""
		pri_in=None;

		self.sendmsg(1038, pri_in );
		pass

	def cli_start_double_exp(self  ):
		"""
领取双倍经验:

	"""
		pri_in=None;

		self.sendmsg(1039, pri_in );
		pass

	def cli_add_session(self ,type ):
		"""
增加session:
	/* Session类型（1、VIP代签 2、校巴代签） */
	#类型:uint32
	public type;


	"""
		pri_in=cli_add_session_in();

		pri_in.type=type
		self.sendmsg(1040, pri_in );
		pass

	def cli_add_friend(self ,userid ):
		"""
添加好友:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_add_friend_in();

		pri_in.userid=userid
		self.sendmsg(1051, pri_in );
		pass

	def cli_rsp_friend_add(self ,userid,accept ):
		"""
反馈别人的邀请:
	/* 0，拒绝；1，接受 */
	#类型:uint8
	public accept;


	"""
		pri_in=cli_rsp_friend_add_in();

		pri_in.userid=userid
		pri_in.accept=accept
		self.sendmsg(1052, pri_in );
		pass

	def cli_del_friend(self ,userid ):
		"""
删除好友:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_del_friend_in();

		pri_in.userid=userid
		self.sendmsg(1053, pri_in );
		pass

	def cli_bklist_add(self ,userid ):
		"""
添加到黑名单:
	/* 好友ID */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_bklist_add_in();

		pri_in.userid=userid
		self.sendmsg(1055, pri_in );
		pass

	def cli_bklist_del(self ,userid,accept ):
		"""
从黑名单中删除:
	/* 0，拒绝；1，接受 */
	#类型:uint8
	public accept;


	"""
		pri_in=cli_bklist_del_in();

		pri_in.userid=userid
		pri_in.accept=accept
		self.sendmsg(1056, pri_in );
		pass

	def cli_get_bklist(self  ):
		"""
拉取黑名单列表:

	"""
		pri_in=None;

		self.sendmsg(1057, pri_in );
		pass

	def cli_noti_friend_del(self  ):
		"""
通知对方删除好友:

	"""
		pri_in=None;

		self.sendmsg(1058, pri_in );
		pass

	def cli_get_invited(self  ):
		"""
拉取邀请人数和剩余抽奖次数:

	"""
		pri_in=None;

		self.sendmsg(1059, pri_in );
		pass

	def cli_add_relation(self ,uid ):
		"""
建立师徒关系:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_add_relation_in();

		pri_in.uid=uid
		self.sendmsg(1060, pri_in );
		pass

	def cli_reply_add_relation(self ,uid,type,session ):
		"""
用户响应加师徒关系:
	/* 校验字符串 */
	#定长数组,长度:32, 类型:char 
	public session ;


	"""
		pri_in=cli_reply_add_relation_in();

		pri_in.uid=uid
		pri_in.type=type
		pri_in.session=session
		self.sendmsg(1061, pri_in );
		pass

	def cli_del_relation(self ,uid ):
		"""
解除师徒关系:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_del_relation_in();

		pri_in.uid=uid
		self.sendmsg(1062, pri_in );
		pass

	def cli_get_relationship(self ,uid ):
		"""
获取用户的师徒关系:
	/* 米米号 */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_get_relationship_in();

		pri_in.uid=uid
		self.sendmsg(1063, pri_in );
		pass

	def cli_get_relation_reward(self ,itemid ):
		"""
领取师徒奖励:
	/* 领取物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_get_relation_reward_in();

		pri_in.itemid=itemid
		self.sendmsg(1065, pri_in );
		pass

	def cli_buy_cloth(self ,shopid,type_id,level ):
		"""
购买衣服:
	/* 衣服的级别 */
	#类型:uint32
	public level;


	"""
		pri_in=cli_buy_cloth_in();

		pri_in.shopid=shopid
		pri_in.type_id=type_id
		pri_in.level=level
		self.sendmsg(1101, pri_in );
		pass

	def cli_get_pakt_cloth(self  ):
		"""
拉取背包的衣服:

	"""
		pri_in=None;

		self.sendmsg(1102, pri_in );
		pass

	def cli_cloth_disappear(self  ):
		"""
装扮消失:

	"""
		pri_in=None;

		self.sendmsg(1103, pri_in );
		pass

	def cli_del_cloth(self ,clothid,clothtype,clothlv ):
		"""
删除衣服:
	/* 衣服等级 */
	#类型:uint32
	public clothlv;


	"""
		pri_in=cli_del_cloth_in();

		pri_in.clothid=clothid
		pri_in.clothtype=clothtype
		pri_in.clothlv=clothlv
		self.sendmsg(1104, pri_in );
		pass

	def cli_set_body_clothes(self ,cloth_list ):
		"""
换装:
	/*装扮列表*/
	#变长数组,最大长度:16, 类型:stru_cloth_simple_t
	public cloth_list =array();


	"""
		pri_in=cli_set_body_clothes_in();

		pri_in.cloth_list=cloth_list
		self.sendmsg(1105, pri_in );
		pass

	def cli_get_body_clothes(self  ):
		"""
拉取身上的衣服信息:

	"""
		pri_in=None;

		self.sendmsg(1106, pri_in );
		pass

	def cli_buy_normal_item(self ,shopid,itemid,count ):
		"""
购买普通物品:
	/* 物品数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_buy_normal_item_in();

		pri_in.shopid=shopid
		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(1108, pri_in );
		pass

	def cli_get_normal_item_list(self  ):
		"""
获取普通物品列表:

	"""
		pri_in=None;

		self.sendmsg(1109, pri_in );
		pass

	def noti_cli_get_item(self  ):
		"""
通知得到物品:

	"""
		pri_in=None;

		self.sendmsg(1110, pri_in );
		pass

	def cli_sell_clothes(self ,clothlist ):
		"""
卖装扮:
	/*装扮ID列表*/
	#变长数组,最大长度:10, 类型:uint32_t
	public clothlist =array();


	"""
		pri_in=cli_sell_clothes_in();

		pri_in.clothlist=clothlist
		self.sendmsg(1111, pri_in );
		pass

	def cli_sell_items(self ,count ):
		"""
出售物品列表:
	/* 物品列表数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_sell_items_in();

		pri_in.count=count
		self.sendmsg(1112, pri_in );
		pass

	def cli_del_normal_item(self ,itemid,count ):
		"""
删除普通物品:
	/* 要删除的物品数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_del_normal_item_in();

		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(1113, pri_in );
		pass

	def cli_use_medical_item(self ,userid,petid,itemid ):
		"""
使用普通物品:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_use_medical_item_in();

		pri_in.userid=userid
		pri_in.petid=petid
		pri_in.itemid=itemid
		self.sendmsg(1114, pri_in );
		pass

	def cli_re_birth(self ,petid,itemid ):
		"""
洗点（人物或宠物）:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_re_birth_in();

		pri_in.petid=petid
		pri_in.itemid=itemid
		self.sendmsg(1115, pri_in );
		pass

	def cli_use_handbook_item(self ,itemid ):
		"""
使用图鉴物品:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_use_handbook_item_in();

		pri_in.itemid=itemid
		self.sendmsg(1116, pri_in );
		pass

	def use_broadcast_item(self ,uid,itemid,way,posx,posy ):
		"""
使用全场景物品（烟花等）:
	/* y坐标 */
	#类型:uint16
	public posy;


	"""
		pri_in=use_broadcast_item_in();

		pri_in.uid=uid
		pri_in.itemid=itemid
		pri_in.way=way
		pri_in.posx=posx
		pri_in.posy=posy
		self.sendmsg(1117, pri_in );
		pass

	def cli_chk_team_item(self ,itemid ):
		"""
检查队伍钥匙:
	/* 钥匙ID（必须是钥匙ID） */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_chk_team_item_in();

		pri_in.itemid=itemid
		self.sendmsg(1118, pri_in );
		pass

	def cli_repair_cloth(self ,pos,clothid ):
		"""
修理装扮:
	/* 装扮ID */
	#类型:uint32
	public clothid;


	"""
		pri_in=cli_repair_cloth_in();

		pri_in.pos=pos
		pri_in.clothid=clothid
		self.sendmsg(1119, pri_in );
		pass

	def cli_check_team_item(self ,itemid,count ):
		"""
检查队伍物品是否存在:
	/* 数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_check_team_item_in();

		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(1120, pri_in );
		pass

	def cli_get_house_item_list(self  ):
		"""
获取仓库中普通物品列表:

	"""
		pri_in=None;

		self.sendmsg(1121, pri_in );
		pass

	def cli_get_house_cloth(self ,start,count ):
		"""
拉取仓库装扮:
	/* 数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_get_house_cloth_in();

		pri_in.start=start
		pri_in.count=count
		self.sendmsg(1122, pri_in );
		pass

	def cli_item_in_out(self ,flag,itemid,count ):
		"""
仓库取出放入物品:
	/* 操作的物品数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_item_in_out_in();

		pri_in.flag=flag
		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(1123, pri_in );
		pass

	def cli_cloth_in_out(self ,flag,clothid ):
		"""
仓库取出放入装扮:
	/* 物品ID */
	#类型:uint32
	public clothid;


	"""
		pri_in=cli_cloth_in_out_in();

		pri_in.flag=flag
		pri_in.clothid=clothid
		self.sendmsg(1124, pri_in );
		pass

	def cli_del_house_item(self ,itemid,itemcnt ):
		"""
:
	/* 物品数量 */
	#类型:uint32
	public itemcnt;


	"""
		pri_in=cli_del_house_item_in();

		pri_in.itemid=itemid
		pri_in.itemcnt=itemcnt
		self.sendmsg(1125, pri_in );
		pass

	def cli_composite_item(self ,itemid,itemcnt ):
		"""
物品合成:
	/* 物品数量 */
	#类型:uint32
	public itemcnt;


	"""
		pri_in=cli_composite_item_in();

		pri_in.itemid=itemid
		pri_in.itemcnt=itemcnt
		self.sendmsg(1126, pri_in );
		pass

	def cli_exchange_gift_normal(self ,itemid ):
		"""
礼包兑换:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_exchange_gift_normal_in();

		pri_in.itemid=itemid
		self.sendmsg(1127, pri_in );
		pass

	def cli_exchange(self ,eid,cnt ):
		"""
兑换:
	/* 兑换份数 */
	#类型:uint32
	public cnt;


	"""
		pri_in=cli_exchange_in();

		pri_in.eid=eid
		pri_in.cnt=cnt
		self.sendmsg(1128, pri_in );
		pass

	def cli_exchange_gift_spec(self ,itemid ):
		"""
特殊兑换（兑换星豆袋等）:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_exchange_gift_spec_in();

		pri_in.itemid=itemid
		self.sendmsg(1129, pri_in );
		pass

	def cli_exchange_gift_pet(self ,itemid ):
		"""
宠物兑换:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_exchange_gift_pet_in();

		pri_in.itemid=itemid
		self.sendmsg(1130, pri_in );
		pass

	def cli_add_item_feed_count(self ,itemid ):
		"""
增加宠物蛋孵化次数:
	/* 物品id，id=290004 */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_add_item_feed_count_in();

		pri_in.itemid=itemid
		self.sendmsg(1133, pri_in );
		pass

	def cli_get_sth_done(self ,itemid ):
		"""
拉取事件完成次数:
	/* 物品id，0:是否获得过290004   1:是否对话过                2:拉取孵化次数 3：是否对话过 2 */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_get_sth_done_in();

		pri_in.itemid=itemid
		self.sendmsg(1134, pri_in );
		pass

	def cli_set_sth_done(self ,itemid ):
		"""
增加事件完成次数:
	/* 物品id，1:是否对话过 3：是否对话过2 */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_set_sth_done_in();

		pri_in.itemid=itemid
		self.sendmsg(1135, pri_in );
		pass

	def cli_use_buff_item(self ,itemid,sorp ):
		"""
使用双倍道具:
	/* 宠物还是人（0表示人1表示宠） */
	#类型:uint32
	public sorp;


	"""
		pri_in=cli_use_buff_item_in();

		pri_in.itemid=itemid
		pri_in.sorp=sorp
		self.sendmsg(1139, pri_in );
		pass

	def cli_use_energy_item(self ,itemid ):
		"""
使用精力果:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_use_energy_item_in();

		pri_in.itemid=itemid
		self.sendmsg(1140, pri_in );
		pass

	def cli_upgrade_cloth_use_level(self ,clothid,itemlist ):
		"""
升级装备使用等级:
	/*获得的物品*/
	#变长数组,最大长度:2, 类型:stru_item
	public itemlist =array();


	"""
		pri_in=cli_upgrade_cloth_use_level_in();

		pri_in.clothid=clothid
		pri_in.itemlist=itemlist
		self.sendmsg(1141, pri_in );
		pass

	def cli_active_cloth_potential(self ,clothid,itemlist ):
		"""
(装备的祭炼):
	/**/
	#变长数组,最大长度:4, 类型:stru_item
	public itemlist =array();


	"""
		pri_in=cli_active_cloth_potential_in();

		pri_in.clothid=clothid
		pri_in.itemlist=itemlist
		self.sendmsg(1142, pri_in );
		pass

	def cli_get_task_detail(self ,taskid ):
		"""
拉取单个任务详细信息:
	/* 任务ID */
	#类型:uint32
	public taskid;


	"""
		pri_in=cli_get_task_detail_in();

		pri_in.taskid=taskid
		self.sendmsg(1158, pri_in );
		pass

	def cli_write_task_diary(self ,taskid,diary ):
		"""
记录任务日记:
	/* 任务日记 */
	#定长数组,长度:156, 类型:char 
	public diary ;


	"""
		pri_in=cli_write_task_diary_in();

		pri_in.taskid=taskid
		pri_in.diary=diary
		self.sendmsg(1159, pri_in );
		pass

	def get_task_all(self  ):
		"""
获取全部任务信息:

	"""
		pri_in=None;

		self.sendmsg(1161, pri_in );
		pass

	def cli_recv_task(self ,taskid,buffer,clival ):
		"""
接受任务（新）:
	/* 客户端标识 */
	#类型:uint32
	public clival;


	"""
		pri_in=cli_recv_task_in();

		pri_in.taskid=taskid
		pri_in.buffer=buffer
		pri_in.clival=clival
		self.sendmsg(1162, pri_in );
		pass

	def finish_task_node(self ,taskid,nodeid,outid,cli_buf,clival,delpetlist ):
		"""
提交任务节点:
	/*要删除的宠物列表*/
	#变长数组,最大长度:10, 类型:stru_pet_type
	public delpetlist =array();


	"""
		pri_in=finish_task_node_in();

		pri_in.taskid=taskid
		pri_in.nodeid=nodeid
		pri_in.outid=outid
		pri_in.cli_buf=cli_buf
		pri_in.clival=clival
		pri_in.delpetlist=delpetlist
		self.sendmsg(1163, pri_in );
		pass

	def cli_cancel_task(self ,taskid ):
		"""
取消任务（新）:
	/* 任务ID */
	#类型:uint32
	public taskid;


	"""
		pri_in=cli_cancel_task_in();

		pri_in.taskid=taskid
		self.sendmsg(1164, pri_in );
		pass

	def cli_set_task_clibuf(self ,taskid,as_buf,clival ):
		"""
设置as buf内容（新）:
	/* 客户端标识 */
	#类型:uint32
	public clival;


	"""
		pri_in=cli_set_task_clibuf_in();

		pri_in.taskid=taskid
		pri_in.as_buf=as_buf
		pri_in.clival=clival
		self.sendmsg(1165, pri_in );
		pass

	def cli_get_task_svrbuf(self ,taskid ):
		"""
获取服务端Buffer信息（新）:
	/* 要获取buf的任务ID */
	#类型:uint32
	public taskid;


	"""
		pri_in=cli_get_task_svrbuf_in();

		pri_in.taskid=taskid
		self.sendmsg(1166, pri_in );
		pass

	def cli_get_buff_range(self ,min_buff_id,max_buff_id ):
		"""
获取客户端buff:
	/* 终止buffid */
	#类型:uint32
	public max_buff_id;


	"""
		pri_in=cli_get_buff_range_in();

		pri_in.min_buff_id=min_buff_id
		pri_in.max_buff_id=max_buff_id
		self.sendmsg(1167, pri_in );
		pass

	def cli_set_buff(self ,id,buff ):
		"""
设置客户端数据:
	/* 数据 */
	#定长数组,长度:32, 类型:uint8_t 
	public buff =array();


	"""
		pri_in=cli_set_buff_in();

		pri_in.id=id
		pri_in.buff=buff
		self.sendmsg(1168, pri_in );
		pass

	def cli_get_loop_task(self  ):
		"""
获取环任务信息:

	"""
		pri_in=None;

		self.sendmsg(1169, pri_in );
		pass

	def noti_cli_task_loop_update(self  ):
		"""
通知客户端环任务变化:

	"""
		pri_in=None;

		self.sendmsg(1170, pri_in );
		pass

	def cli_get_honor_list(self  ):
		"""
获取称号列表:

	"""
		pri_in=None;

		self.sendmsg(1200, pri_in );
		pass

	def cli_use_honor(self ,honorid ):
		"""
戴上称号:
	/* 称号ID */
	#类型:uint32
	public honorid;


	"""
		pri_in=cli_use_honor_in();

		pri_in.honorid=honorid
		self.sendmsg(1201, pri_in );
		pass

	def cli_challenge(self ,userid,pkcnt ):
		"""
挑战:
	/* 当天与其挑战次数 */
	#类型:uint32
	public pkcnt;


	"""
		pri_in=cli_challenge_in();

		pri_in.userid=userid
		pri_in.pkcnt=pkcnt
		self.sendmsg(1300, pri_in );
		pass

	def cli_accept_challenge(self ,timestamp,userid,pkcnt ):
		"""
接受挑战:
	/* 与该用户pk次数 */
	#类型:uint32
	public pkcnt;


	"""
		pri_in=cli_accept_challenge_in();

		pri_in.timestamp=timestamp
		pri_in.userid=userid
		pri_in.pkcnt=pkcnt
		self.sendmsg(1301, pri_in );
		pass

	def cli_noti_team_challeg(self  ):
		"""
通知团队成员正在挑战:

	"""
		pri_in=None;

		self.sendmsg(1302, pri_in );
		pass

	def cli_noti_team_challeged(self  ):
		"""
通知队长有人挑战:

	"""
		pri_in=None;

		self.sendmsg(1303, pri_in );
		pass

	def cli_challenge_npc(self ,groupid,refreshid ):
		"""
挑战明雷:
	/* 刷新组ID */
	#类型:uint32
	public refreshid;


	"""
		pri_in=cli_challenge_npc_in();

		pri_in.groupid=groupid
		pri_in.refreshid=refreshid
		self.sendmsg(1304, pri_in );
		pass

	def cli_noti_battle_created(self  ):
		"""
战斗建立好，可以开始加载:

	"""
		pri_in=None;

		self.sendmsg(1305, pri_in );
		pass

	def cli_load_battle(self ,rate ):
		"""
客户端上报加载完成比例:
	/* 用户加载百分比 */
	#类型:uint32
	public rate;


	"""
		pri_in=cli_load_battle_in();

		pri_in.rate=rate
		self.sendmsg(1306, pri_in );
		pass

	def cli_noti_battle_started(self  ):
		"""
对战准备好:

	"""
		pri_in=None;

		self.sendmsg(1307, pri_in );
		pass

	def cli_battle_attack(self ,sorp,atk_team,atk_pos,atk_type,atk_level ):
		"""
发招:
	/* 技能等级 */
	#类型:uint32
	public atk_level;


	"""
		pri_in=cli_battle_attack_in();

		pri_in.sorp=sorp
		pri_in.atk_team=atk_team
		pri_in.atk_pos=atk_pos
		pri_in.atk_type=atk_type
		pri_in.atk_level=atk_level
		self.sendmsg(1308, pri_in );
		pass

	def cli_use_medical(self ,atk_team,atk_pos,itemid ):
		"""
使用药品:
	/* 使用的物品id */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_use_medical_in();

		pri_in.atk_team=atk_team
		pri_in.atk_pos=atk_pos
		pri_in.itemid=itemid
		self.sendmsg(1309, pri_in );
		pass

	def cli_battle_attacks_info(self  ):
		"""
一回合战斗结果:

	"""
		pri_in=None;

		self.sendmsg(1310, pri_in );
		pass

	def cli_battle_round_result(self  ):
		"""
一回合后用户信息同步:

	"""
		pri_in=None;

		self.sendmsg(1311, pri_in );
		pass

	def cli_round_info(self ,round_cnt,round_idx ):
		"""
用户上报回合信息:
	/* 当前回合数 */
	#类型:uint16
	public round_idx;


	"""
		pri_in=cli_round_info_in();

		pri_in.round_cnt=round_cnt
		pri_in.round_idx=round_idx
		self.sendmsg(1312, pri_in );
		pass

	def cli_noti_user_fighted(self  ):
		"""
广播已发招用户:

	"""
		pri_in=None;

		self.sendmsg(1313, pri_in );
		pass

	def cli_next_fight_step(self  ):
		"""
通知用户下次遇怪步数:

	"""
		pri_in=None;

		self.sendmsg(1314, pri_in );
		pass

	def cli_noti_load_rate(self  ):
		"""
广播已用户加载比例:

	"""
		pri_in=None;

		self.sendmsg(1316, pri_in );
		pass

	def cli_load_ready(self ,flag ):
		"""
客户端上报对战初始化结果:
	/* 0，加载失败；1，成功 */
	#类型:uint8
	public flag;


	"""
		pri_in=cli_load_ready_in();

		pri_in.flag=flag
		self.sendmsg(1317, pri_in );
		pass

	def cli_sync_battle_end(self  ):
		"""
对战结束结算包:

	"""
		pri_in=None;

		self.sendmsg(1318, pri_in );
		pass

	def cli_battle_end(self  ):
		"""
对战结束:

	"""
		pri_in=None;

		self.sendmsg(1319, pri_in );
		pass

	def cli_reject_challenge(self ,timestamp,userid ):
		"""
拒绝挑战:
	/* 用户id（挑战时的挑战方队长ID） */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_reject_challenge_in();

		pri_in.timestamp=timestamp
		pri_in.userid=userid
		self.sendmsg(1320, pri_in );
		pass

	def cli_get_grp_day_challenge(self  ):
		"""
获取怪物组挑战次数:

	"""
		pri_in=None;

		self.sendmsg(1321, pri_in );
		pass

	def cli_delete_batr_team(self  ):
		"""
解除战队:

	"""
		pri_in=None;

		self.sendmsg(1322, pri_in );
		pass

	def cli_btrtem_add_mbr(self ,userid ):
		"""
邀请用户加入战队:
	/* 邀请的用户id */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_btrtem_add_mbr_in();

		pri_in.userid=userid
		self.sendmsg(1323, pri_in );
		pass

	def cli_sync_pkinfo(self  ):
		"""
PK结算:

	"""
		pri_in=None;

		self.sendmsg(1324, pri_in );
		pass

	def cli_apply_pk(self ,type ):
		"""
竞技场PK匹配申请:
	/* 匹配类型(0单人pk, 1组队pk) */
	#类型:uint32
	public type;


	"""
		pri_in=cli_apply_pk_in();

		pri_in.type=type
		self.sendmsg(1325, pri_in );
		pass

	def cli_cancel_pk_apply(self  ):
		"""
取消竞技场PK匹配:

	"""
		pri_in=None;

		self.sendmsg(1326, pri_in );
		pass

	def cli_btrtem_apply(self ,teamid ):
		"""
申请加入战队:
	/* 战队id */
	#类型:uint32
	public teamid;


	"""
		pri_in=cli_btrtem_apply_in();

		pri_in.teamid=teamid
		self.sendmsg(1327, pri_in );
		pass

	def cli_register_for_team(self ,team_nick ):
		"""
注册队伍列表（更改队伍名称）:
	/* 队伍昵称 */
	#定长数组,长度:16, 类型:char 
	public team_nick ;


	"""
		pri_in=cli_register_for_team_in();

		pri_in.team_nick=team_nick
		self.sendmsg(1329, pri_in );
		pass

	def cli_btrtem_kick_mbr(self ,userid ):
		"""
踢用户离开战队:
	/* 被踢用户id */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_btrtem_kick_mbr_in();

		pri_in.userid=userid
		self.sendmsg(1331, pri_in );
		pass

	def cli_btrtem_mbr_leave(self  ):
		"""
用户离开战队:

	"""
		pri_in=None;

		self.sendmsg(1332, pri_in );
		pass

	def cli_rsp_team_info(self  ):
		"""
战队信息:

	"""
		pri_in=None;

		self.sendmsg(1333, pri_in );
		pass

	def cli_btrtem_enter_map(self  ):
		"""
通知队员切地图:

	"""
		pri_in=None;

		self.sendmsg(1334, pri_in );
		pass

	def cli_cancel_challenge(self  ):
		"""
取消挑战:

	"""
		pri_in=None;

		self.sendmsg(1336, pri_in );
		pass

	def cli_use_beast_card(self ,atk_team,atk_pos,itemid ):
		"""
捕捉怪物:
	/* 使用的物品id */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_use_beast_card_in();

		pri_in.atk_team=atk_team
		pri_in.atk_pos=atk_pos
		pri_in.itemid=itemid
		self.sendmsg(1338, pri_in );
		pass

	def cli_battle_swap_pet(self ,petid ):
		"""
换宠:
	/* 宠物ID（为0时表示召回宠物） */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_battle_swap_pet_in();

		pri_in.petid=petid
		self.sendmsg(1339, pri_in );
		pass

	def cli_noti_battle_accepted(self  ):
		"""
通知对方挑战被接受:

	"""
		pri_in=None;

		self.sendmsg(1341, pri_in );
		pass

	def cli_noti_tleader_action(self ,actionid,param1,param2,len ):
		"""
通知队友队长行动:
	/* 自定义缓存长度（最大1024） */
	#类型:uint32
	public len;


	"""
		pri_in=cli_noti_tleader_action_in();

		pri_in.actionid=actionid
		pri_in.param1=param1
		pri_in.param2=param2
		pri_in.len=len
		self.sendmsg(1342, pri_in );
		pass

	def cli_noti_team_state(self  ):
		"""
队伍状态信息:

	"""
		pri_in=None;

		self.sendmsg(1343, pri_in );
		pass

	def cli_animation_finish(self  ):
		"""
报告对战动画结束:

	"""
		pri_in=None;

		self.sendmsg(1344, pri_in );
		pass

	def cli_btrsvr_conn_closed(self  ):
		"""
对战服务器断开:

	"""
		pri_in=None;

		self.sendmsg(1345, pri_in );
		pass

	def cli_change_team_leader(self  ):
		"""
队长移交:

	"""
		pri_in=None;

		self.sendmsg(1346, pri_in );
		pass

	def cli_get_last_kill_beastgrp(self  ):
		"""
获取最新打死的怪物组:

	"""
		pri_in=None;

		self.sendmsg(1349, pri_in );
		pass

	def cli_get_map_grp(self  ):
		"""
获取当前场景中的怪物组:

	"""
		pri_in=None;

		self.sendmsg(1350, pri_in );
		pass

	def cli_grp_challenged(self  ):
		"""
统治场景中的怪物组被挑战了:

	"""
		pri_in=None;

		self.sendmsg(1351, pri_in );
		pass

	def cli_apply_megalith_war(self  ):
		"""
申请进入巨石战:

	"""
		pri_in=None;

		self.sendmsg(1352, pri_in );
		pass

	def cli_quit_megalith_war(self  ):
		"""
退出巨石战申请:

	"""
		pri_in=None;

		self.sendmsg(1353, pri_in );
		pass

	def cli_war_challenge_pos(self ,pos ):
		"""
巨石战挑战某个位置:
	/* 要挑战的位置 */
	#类型:uint32
	public pos;


	"""
		pri_in=cli_war_challenge_pos_in();

		pri_in.pos=pos
		self.sendmsg(1354, pri_in );
		pass

	def cli_war_play_card(self ,card ):
		"""
出卡牌:
	/* 卡牌类型 */
	#类型:uint32
	public card;


	"""
		pri_in=cli_war_play_card_in();

		pri_in.card=card
		self.sendmsg(1355, pri_in );
		pass

	def cli_war_attack_boss(self  ):
		"""
攻击boss:

	"""
		pri_in=None;

		self.sendmsg(1356, pri_in );
		pass

	def noti_cli_war_update_score(self  ):
		"""
通知客户端分数更新:

	"""
		pri_in=None;

		self.sendmsg(1358, pri_in );
		pass

	def noti_cli_war_be_attacked(self  ):
		"""
通知客户端被打:

	"""
		pri_in=None;

		self.sendmsg(1359, pri_in );
		pass

	def noti_cli_war_challenge_result(self  ):
		"""
通知客户端挑战结果:

	"""
		pri_in=None;

		self.sendmsg(1360, pri_in );
		pass

	def noti_cli_war_over(self  ):
		"""
通知巨石战结束:

	"""
		pri_in=None;

		self.sendmsg(1361, pri_in );
		pass

	def cli_get_positions_info(self  ):
		"""
拉取12个武器位置人物:

	"""
		pri_in=None;

		self.sendmsg(1362, pri_in );
		pass

	def cli_leave_position(self  ):
		"""
主动离开某个位置:

	"""
		pri_in=None;

		self.sendmsg(1363, pri_in );
		pass

	def noti_cli_leave_war(self  ):
		"""
巨石战场服务器出错，必须退出:

	"""
		pri_in=None;

		self.sendmsg(1364, pri_in );
		pass

	def cli_get_loop_grp(self  ):
		"""
获取精灵挑战信息:

	"""
		pri_in=None;

		self.sendmsg(1365, pri_in );
		pass

	def cli_refresh_loopgrp(self ,grpid ):
		"""
刷新精灵挑战:
	/* 怪物组ID（0低级1中级2高级） */
	#类型:uint32
	public grpid;


	"""
		pri_in=cli_refresh_loopgrp_in();

		pri_in.grpid=grpid
		self.sendmsg(1366, pri_in );
		pass

	def cli_get_elite_beast(self  ):
		"""
获取地图精英怪:

	"""
		pri_in=None;

		self.sendmsg(1367, pri_in );
		pass

	def cli_sync_beast_kill(self  ):
		"""
客户端同步全局杀怪数量:

	"""
		pri_in=None;

		self.sendmsg(1368, pri_in );
		pass

	def cli_check_engaged_beast_kill(self  ):
		"""
是否参与打怪:

	"""
		pri_in=None;

		self.sendmsg(1369, pri_in );
		pass

	def cli_get_grp_challenge_cnt(self ,grpid ):
		"""
获取怪物组挑战次数:
	/* 怪物组ID */
	#类型:uint32
	public grpid;


	"""
		pri_in=cli_get_grp_challenge_cnt_in();

		pri_in.grpid=grpid
		self.sendmsg(1370, pri_in );
		pass

	def cli_game_pvp_get_map_id(self ,pvp_type ):
		"""
pvp 得到要进入地图的id:
	/* 0:单人单精灵赛;1:单人多精灵赛 */
	#类型:uint32
	public pvp_type;


	"""
		pri_in=cli_game_pvp_get_map_id_in();

		pri_in.pvp_type=pvp_type
		self.sendmsg(1380, pri_in );
		pass

	def cli_pvp_game_noti_time_out(self  ):
		"""
pvp通知超时时间:

	"""
		pri_in=None;

		self.sendmsg(1381, pri_in );
		pass

	def noti_cli_home_pvp_game_start(self  ):
		"""
通知pvp 开战:

	"""
		pri_in=None;

		self.sendmsg(1383, pri_in );
		pass

	def cli_noti_home_pvp_info(self  ):
		"""
通知pvp 消息:

	"""
		pri_in=None;

		self.sendmsg(1384, pri_in );
		pass

	def cli_noti_home_pvp_pk_info(self  ):
		"""
pvp 通知对战信息:

	"""
		pri_in=None;

		self.sendmsg(1385, pri_in );
		pass

	def cli_game_get_pvp_info(self  ):
		"""
得到pvp信息－分数:

	"""
		pri_in=None;

		self.sendmsg(1386, pri_in );
		pass

	def cli_pvp_get_honor(self ,honorid ):
		"""
pvp  兑换称号:
	/* 称号ID */
	#类型:uint32
	public honorid;


	"""
		pri_in=cli_pvp_get_honor_in();

		pri_in.honorid=honorid
		self.sendmsg(1387, pri_in );
		pass

	def cli_add_npc_to_team(self ,npcid ):
		"""
将NPC加入队伍:
	/* 要加入队伍的npc */
	#类型:uint32
	public npcid;


	"""
		pri_in=cli_add_npc_to_team_in();

		pri_in.npcid=npcid
		self.sendmsg(1400, pri_in );
		pass

	def cli_text_notify(self ,type,mapid,maptype,userid,nick,accept,now,pic,infomsglen ):
		"""
文本通知:
	/* 消息的长度 */
	#类型:uint32
	public infomsglen;


	"""
		pri_in=cli_text_notify_in();

		pri_in.type=type
		pri_in.mapid=mapid
		pri_in.maptype=maptype
		pri_in.userid=userid
		pri_in.nick=nick
		pri_in.accept=accept
		pri_in.now=now
		pri_in.pic=pic
		pri_in.infomsglen=infomsglen
		self.sendmsg(1501, pri_in );
		pass

	def cli_set_pet_state(self ,petid,flag ):
		"""
修改宠物状态标志:
	/* 状态标志，0：仓库，1：非待命，2：待命 3：出战 */
	#类型:uint32
	public flag;


	"""
		pri_in=cli_set_pet_state_in();

		pri_in.petid=petid
		pri_in.flag=flag
		self.sendmsg(1551, pri_in );
		pass

	def cli_set_pet_nick(self ,petid,nick ):
		"""
修改宠物昵称:
	/* 要修改的宠物昵称 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""
		pri_in=cli_set_pet_nick_in();

		pri_in.petid=petid
		pri_in.nick=nick
		self.sendmsg(1552, pri_in );
		pass

	def cli_get_pet_info(self ,petid ):
		"""
拉取宠物信息:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_get_pet_info_in();

		pri_in.petid=petid
		self.sendmsg(1553, pri_in );
		pass

	def cli_get_pet_list(self  ):
		"""
:

	"""
		pri_in=None;

		self.sendmsg(1554, pri_in );
		pass

	def cli_cure_pet(self ,petid ):
		"""
宠物治疗:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_cure_pet_in();

		pri_in.petid=petid
		self.sendmsg(1555, pri_in );
		pass

	def cli_cure_pet_injury(self ,petid ):
		"""
宠物受伤治疗:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_cure_pet_injury_in();

		pri_in.petid=petid
		self.sendmsg(1556, pri_in );
		pass

	def cli_get_user_pet_list(self ,userid ):
		"""
:
	/* 要拉取的人物ID */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_get_user_pet_list_in();

		pri_in.userid=userid
		self.sendmsg(1557, pri_in );
		pass

	def cli_pet_follow(self ,petid ):
		"""
宠物跟随:
	/* 宠物id；0：收回宠物 */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_pet_follow_in();

		pri_in.petid=petid
		self.sendmsg(1558, pri_in );
		pass

	def cli_get_pet_inhouse(self ,start,count ):
		"""
拉取仓库中的宠物列表:
	/* 拉取的数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_get_pet_inhouse_in();

		pri_in.start=start
		pri_in.count=count
		self.sendmsg(1559, pri_in );
		pass

	def cli_update_pet_location(self ,petid1,location1,petid2,location2 ):
		"""
修改仓库中的宠物位置:
	/* 更新后的位置 */
	#类型:uint32
	public location2;


	"""
		pri_in=cli_update_pet_location_in();

		pri_in.petid1=petid1
		pri_in.location1=location1
		pri_in.petid2=petid2
		pri_in.location2=location2
		self.sendmsg(1560, pri_in );
		pass

	def cli_del_pet(self ,petid ):
		"""
删除宠物:
	/* 宠物id */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_del_pet_in();

		pri_in.petid=petid
		self.sendmsg(1561, pri_in );
		pass

	def cli_get_other_pet_info(self ,userid,petid ):
		"""
拉取他人宠物信息:
	/* 宠物标识 */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_get_other_pet_info_in();

		pri_in.userid=userid
		pri_in.petid=petid
		self.sendmsg(1562, pri_in );
		pass

	def cli_exchange_pet(self ,exchangeid,count ):
		"""
交换宠物:
	/* 用于交换的宠物数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_exchange_pet_in();

		pri_in.exchangeid=exchangeid
		pri_in.count=count
		self.sendmsg(1563, pri_in );
		pass

	def cli_get_all_petcnt(self  ):
		"""
获取仓库中宠物的数量:

	"""
		pri_in=None;

		self.sendmsg(1564, pri_in );
		pass

	def reset_pet_add_attr(self ,petid,itemid ):
		"""
重置宠物属性点:
	/* 重置需要的物品 */
	#类型:uint32
	public itemid;


	"""
		pri_in=reset_pet_add_attr_in();

		pri_in.petid=petid
		pri_in.itemid=itemid
		self.sendmsg(1565, pri_in );
		pass

	def noti_get_pets(self  ):
		"""
通知客户端获得宠物:

	"""
		pri_in=None;

		self.sendmsg(1566, pri_in );
		pass

	def cli_get_petlist_type(self ,pettype,start,limits ):
		"""
根据宠物类型拉取宠物列表:
	/* 拉取的数量 */
	#类型:uint32
	public limits;


	"""
		pri_in=cli_get_petlist_type_in();

		pri_in.pettype=pettype
		pri_in.start=start
		pri_in.limits=limits
		self.sendmsg(1567, pri_in );
		pass

	def noti_pet_levelup(self  ):
		"""
通知客户端宠物升级:

	"""
		pri_in=None;

		self.sendmsg(1568, pri_in );
		pass

	def cli_exchange_pet_for_item(self ,petid,pettype,itemid ):
		"""
宠物换道具:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_exchange_pet_for_item_in();

		pri_in.petid=petid
		pri_in.pettype=pettype
		pri_in.itemid=itemid
		self.sendmsg(1569, pri_in );
		pass

	def cli_reset_pet(self ,petid,itemid ):
		"""
宠物洗成长和初始值:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_reset_pet_in();

		pri_in.petid=petid
		pri_in.itemid=itemid
		self.sendmsg(1570, pri_in );
		pass

	def cli_train_race_skill(self ,itemid,extra_itemid,petid,count ):
		"""
种族技能炼化:
	/* 额外物品数 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_train_race_skill_in();

		pri_in.itemid=itemid
		pri_in.extra_itemid=extra_itemid
		pri_in.petid=petid
		pri_in.count=count
		self.sendmsg(1571, pri_in );
		pass

	def cli_change_race_skill(self ,petid,exchange_list ):
		"""
确认更改技能:
	/**/
	#变长数组,最大长度:3, 类型:stru_exchange_info
	public exchange_list =array();


	"""
		pri_in=cli_change_race_skill_in();

		pri_in.petid=petid
		pri_in.exchange_list=exchange_list
		self.sendmsg(1572, pri_in );
		pass

	def cli_get_map_copy(self ,copyid ):
		"""
获得地图副本:
	/* 副本ID */
	#类型:uint32
	public copyid;


	"""
		pri_in=cli_get_map_copy_in();

		pri_in.copyid=copyid
		self.sendmsg(1573, pri_in );
		pass

	def cli_recover_duration(self ,itemid,clothid,clothtype,pos ):
		"""
将装备【当前耐久】与【最大耐久】还原为初始状态。:
	/* 位置 */
	#类型:uint32
	public pos;


	"""
		pri_in=cli_recover_duration_in();

		pri_in.itemid=itemid
		pri_in.clothid=clothid
		pri_in.clothtype=clothtype
		pri_in.pos=pos
		self.sendmsg(1574, pri_in );
		pass

	def cli_not_entry(self ,copyid ):
		"""
用户不进入地图:
	/*  */
	#类型:uint32
	public copyid;


	"""
		pri_in=cli_not_entry_in();

		pri_in.copyid=copyid
		self.sendmsg(1575, pri_in );
		pass

	def cli_get_copy_info(self  ):
		"""
获取当前所在副本信息:

	"""
		pri_in=None;

		self.sendmsg(1576, pri_in );
		pass

	def cli_open_precious_box(self ,boxid,itemid ):
		"""
修炼之域中打开宝箱:
	/* 使用道具的id */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_open_precious_box_in();

		pri_in.boxid=boxid
		pri_in.itemid=itemid
		self.sendmsg(1577, pri_in );
		pass

	def cli_get_hangup_time(self  ):
		"""
获取暴力挂机在线时间:

	"""
		pri_in=None;

		self.sendmsg(1578, pri_in );
		pass

	def cli_get_hangup_rewards(self ,order ):
		"""
领取暴力挂机奖励:
	/* 奖励次序 号 */
	#类型:uint32
	public order;


	"""
		pri_in=cli_get_hangup_rewards_in();

		pri_in.order=order
		self.sendmsg(1579, pri_in );
		pass

	def cli_get_rewards_info(self  ):
		"""
拉取暴力挂机奖励信息:

	"""
		pri_in=None;

		self.sendmsg(1580, pri_in );
		pass

	def cli_get_item_valid_cnt(self ,eids ):
		"""
拉取每日限制数量物品的可利用数量:
	/*物品ID*/
	#变长数组,最大长度:10, 类型:uint32_t
	public eids =array();


	"""
		pri_in=cli_get_item_valid_cnt_in();

		pri_in.eids=eids
		self.sendmsg(1581, pri_in );
		pass

	def check_vip_rand_info(self ,vid ):
		"""
检查vip的随机物品:
	/*  */
	#类型:uint32
	public vid;


	"""
		pri_in=check_vip_rand_info_in();

		pri_in.vid=vid
		self.sendmsg(1582, pri_in );
		pass

	def cli_get_btrteam_info(self  ):
		"""
获取队友的战斗力:

	"""
		pri_in=None;

		self.sendmsg(1583, pri_in );
		pass

	def cli_open_pumpkin_lantern(self  ):
		"""
南瓜灯活动:

	"""
		pri_in=None;

		self.sendmsg(1584, pri_in );
		pass

	def cli_check_team_challenge_npc(self ,grpid ):
		"""
检查队友挑战怪物组次数是否到上限:
	/*  */
	#类型:uint32
	public grpid;


	"""
		pri_in=cli_check_team_challenge_npc_in();

		pri_in.grpid=grpid
		self.sendmsg(1585, pri_in );
		pass

	def cli_set_pet_flag(self ,petid,bit,state ):
		"""
设置宠物flag:
	/* 0或1 */
	#类型:uint32
	public state;


	"""
		pri_in=cli_set_pet_flag_in();

		pri_in.petid=petid
		pri_in.bit=bit
		pri_in.state=state
		self.sendmsg(1587, pri_in );
		pass

	def cli_get_task_rank(self  ):
		"""
拉取top10:

	"""
		pri_in=None;

		self.sendmsg(1588, pri_in );
		pass

	def cli_get_task_time(self  ):
		"""
拉取任务已用时间:

	"""
		pri_in=None;

		self.sendmsg(1589, pri_in );
		pass

	def apply_for_join_btr_team_new(self ,teamid ):
		"""
跨地图申请加入战队:
	/* 队伍id */
	#类型:uint32
	public teamid;


	"""
		pri_in=apply_for_join_btr_team_new_in();

		pri_in.teamid=teamid
		self.sendmsg(1590, pri_in );
		pass

	def cli_get_valid_team(self  ):
		"""
拉取可加入的队伍信息:

	"""
		pri_in=None;

		self.sendmsg(1591, pri_in );
		pass

	def cli_get_team_details(self ,teamid ):
		"""
获得队伍详细信息:
	/*  */
	#类型:uint32
	public teamid;


	"""
		pri_in=cli_get_team_details_in();

		pri_in.teamid=teamid
		self.sendmsg(1592, pri_in );
		pass

	def cli_sync_user_time(self ,time ):
		"""
检测用户的系统时间:
	/*  */
	#类型:uint32
	public time;


	"""
		pri_in=cli_sync_user_time_in();

		pri_in.time=time
		self.sendmsg(1593, pri_in );
		pass

	def cli_accept_add_team(self ,uid ):
		"""
接受加入组队:
	/*  */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_accept_add_team_in();

		pri_in.uid=uid
		self.sendmsg(1594, pri_in );
		pass

	def cli_join_watchers(self ,uid ):
		"""
加入观战:
	/*  */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_join_watchers_in();

		pri_in.uid=uid
		self.sendmsg(1595, pri_in );
		pass

	def cli_cancel_watchers(self ,uid ):
		"""
取消观战:
	/*  */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_cancel_watchers_in();

		pri_in.uid=uid
		self.sendmsg(1596, pri_in );
		pass

	def cli_noti_add_skill(self  ):
		"""
服务器主动通知添加技能:

	"""
		pri_in=None;

		self.sendmsg(1597, pri_in );
		pass

	def cli_change_prof(self ,prof ):
		"""
转职:
	/* 新职业： 狂战士6,黑魔导 7,圣言使 8,巫术士 9 */
	#类型:uint32
	public prof;


	"""
		pri_in=cli_change_prof_in();

		pri_in.prof=prof
		self.sendmsg(1598, pri_in );
		pass

	def cli_give_vip_activity(self ,type ):
		"""
登录送vip活动:
	/* 0：3天；1：7天；2：14天 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_give_vip_activity_in();

		pri_in.type=type
		self.sendmsg(1599, pri_in );
		pass

	def cli_buy_skill(self ,shopid,skill_id ):
		"""
购买人物技能:
	/* 技能id */
	#类型:uint32
	public skill_id;


	"""
		pri_in=cli_buy_skill_in();

		pri_in.shopid=shopid
		pri_in.skill_id=skill_id
		self.sendmsg(1600, pri_in );
		pass

	def cli_pet_buy_skill(self ,shopid,petid,skill_id,skill_lv ):
		"""
购买宠物技能:
	/* 技能等级 */
	#类型:uint8
	public skill_lv;


	"""
		pri_in=cli_pet_buy_skill_in();

		pri_in.shopid=shopid
		pri_in.petid=petid
		pri_in.skill_id=skill_id
		pri_in.skill_lv=skill_lv
		self.sendmsg(1601, pri_in );
		pass

	def cli_get_skill_list(self ,id ):
		"""
拉取技能列表:
	/* 需要获取技能的对象ID（人物或宠物） */
	#类型:uint32
	public id;


	"""
		pri_in=cli_get_skill_list_in();

		pri_in.id=id
		self.sendmsg(1602, pri_in );
		pass

	def recommend_pet_add_attr(self ,petid ):
		"""
推荐宠物配点:
	/* 宠物ID */
	#类型:uint32
	public petid;


	"""
		pri_in=recommend_pet_add_attr_in();

		pri_in.petid=petid
		self.sendmsg(1603, pri_in );
		pass

	def cli_del_skill(self ,skill_id ):
		"""
删除人物技能:
	/* 技能id */
	#类型:uint32
	public skill_id;


	"""
		pri_in=cli_del_skill_in();

		pri_in.skill_id=skill_id
		self.sendmsg(1604, pri_in );
		pass

	def cli_pet_del_skill(self ,petid,skill_id,skill_lv ):
		"""
:
	/* 技能等级 */
	#类型:uint32
	public skill_lv;


	"""
		pri_in=cli_pet_del_skill_in();

		pri_in.petid=petid
		pri_in.skill_id=skill_id
		pri_in.skill_lv=skill_lv
		self.sendmsg(1605, pri_in );
		pass

	def cli_pet_add_base_attr(self ,petid,physique,strength,quick,intelligence ):
		"""
宠物配点:
	/* 智力点数增加 */
	#类型:uint16
	public intelligence;


	"""
		pri_in=cli_pet_add_base_attr_in();

		pri_in.petid=petid
		pri_in.physique=physique
		pri_in.strength=strength
		pri_in.quick=quick
		pri_in.intelligence=intelligence
		self.sendmsg(1606, pri_in );
		pass

	def cli_unlock_pet_talent_skill(self ,petid ):
		"""
解锁宠物天赋技能:
	/* 宠物ID */
	#类型:uint32
	public petid;


	"""
		pri_in=cli_unlock_pet_talent_skill_in();

		pri_in.petid=petid
		self.sendmsg(1607, pri_in );
		pass

	def set_default_skill_level(self ,petid,skillid,defaultlv ):
		"""
设置技能默认等级:
	/* 默认等级 */
	#类型:uint32
	public defaultlv;


	"""
		pri_in=set_default_skill_level_in();

		pri_in.petid=petid
		pri_in.skillid=skillid
		pri_in.defaultlv=defaultlv
		self.sendmsg(1608, pri_in );
		pass

	def allocate_skill_exp(self ,skillid,exp ):
		"""
分配技能经验:
	/* 分配的经验 */
	#类型:uint32
	public exp;


	"""
		pri_in=allocate_skill_exp_in();

		pri_in.skillid=skillid
		pri_in.exp=exp
		self.sendmsg(1609, pri_in );
		pass

	def cli_get_lucky_star_info(self  ):
		"""
幸运星活动拉取剩余时间和幸运星数量:

	"""
		pri_in=None;

		self.sendmsg(1610, pri_in );
		pass

	def cli_set_all_pet_state(self ,pets_list ):
		"""
设置所有宠物状态:
	/**/
	#变长数组,最大长度:6, 类型:stru_pet_state
	public pets_list =array();


	"""
		pri_in=cli_set_all_pet_state_in();

		pri_in.pets_list=pets_list
		self.sendmsg(1611, pri_in );
		pass

	def cli_user_shapeshifting(self ,itemid ):
		"""
使用变身卡:
	/* 变身卡id */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_user_shapeshifting_in();

		pri_in.itemid=itemid
		self.sendmsg(1612, pri_in );
		pass

	def cli_exchange_lucky_star(self ,type ):
		"""
兑换幸运星:
	/* 0，1，2 三种兑换 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_exchange_lucky_star_in();

		pri_in.type=type
		self.sendmsg(1613, pri_in );
		pass

	def cli_debug_update_level(self  ):
		"""
人物或者宠物用来升一级  调试用:

	"""
		pri_in=None;

		self.sendmsg(1614, pri_in );
		pass

	def cli_trade_get_mapid(self ,roomid ):
		"""
获取交易房间id:
	/* 房间号  0xFFFFFFFF表示第一次由系统分配 */
	#类型:uint32
	public roomid;


	"""
		pri_in=cli_trade_get_mapid_in();

		pri_in.roomid=roomid
		self.sendmsg(1630, pri_in );
		pass

	def cli_trade_get_shop_info(self  ):
		"""
拉取店铺信息:

	"""
		pri_in=None;

		self.sendmsg(1631, pri_in );
		pass

	def cli_trade_change_shop(self ,cmd,sid,nick ):
		"""
修改商店    抢占店铺时返回参数将是6个 参考mole2_home  1395:
	/* 店铺名字 */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""
		pri_in=cli_trade_change_shop_in();

		pri_in.cmd=cmd
		pri_in.sid=sid
		pri_in.nick=nick
		self.sendmsg(1634, pri_in );
		pass

	def cli_trade_get_records(self ,uid ):
		"""
拉取交易记录:
	/*  */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_trade_get_records_in();

		pri_in.uid=uid
		self.sendmsg(1635, pri_in );
		pass

	def cli_trade_add_item(self ,items ):
		"""
添加交易物品:
	/**/
	#变长数组,最大长度:1000, 类型:stru_add_item
	public items =array();


	"""
		pri_in=cli_trade_add_item_in();

		pri_in.items=items
		self.sendmsg(1637, pri_in );
		pass

	def cli_trade_buy_item(self ,uid,tradeid,itemid,itemcnt ):
		"""
买物品:
	/* 数量 */
	#类型:uint32
	public itemcnt;


	"""
		pri_in=cli_trade_buy_item_in();

		pri_in.uid=uid
		pri_in.tradeid=tradeid
		pri_in.itemid=itemid
		pri_in.itemcnt=itemcnt
		self.sendmsg(1639, pri_in );
		pass

	def cli_trade_get_items(self ,uid ):
		"""
拉取商店物品列表:
	/* 店主id */
	#类型:uint32
	public uid;


	"""
		pri_in=cli_trade_get_items_in();

		pri_in.uid=uid
		self.sendmsg(1640, pri_in );
		pass

	def cli_get_rand_item(self ,randid ):
		"""
获取随机物品:
	/* 随机ID */
	#类型:uint32
	public randid;


	"""
		pri_in=cli_get_rand_item_in();

		pri_in.randid=randid
		self.sendmsg(1700, pri_in );
		pass

	def cli_get_rand_item_spec(self ,randid,itemid,count ):
		"""
指定获得物品:
	/* 数量 */
	#类型:int32
	public count;


	"""
		pri_in=cli_get_rand_item_spec_in();

		pri_in.randid=randid
		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(1701, pri_in );
		pass

	def cli_check_rand_info(self ,randid ):
		"""
检查随机领取物品次数:
	/* 随机ID */
	#类型:uint32
	public randid;


	"""
		pri_in=cli_check_rand_info_in();

		pri_in.randid=randid
		self.sendmsg(1702, pri_in );
		pass

	def cli_get_vip_item(self ,randid ):
		"""
VIP领取物品:
	/* 领取ID */
	#类型:uint32
	public randid;


	"""
		pri_in=cli_get_vip_item_in();

		pri_in.randid=randid
		self.sendmsg(1703, pri_in );
		pass

	def cli_get_vip_item_cnt(self  ):
		"""
得到vip 装扮信息:

	"""
		pri_in=None;

		self.sendmsg(1704, pri_in );
		pass

	def get_exchange_cnt_info(self  ):
		"""
获取兑换的限制信息:

	"""
		pri_in=None;

		self.sendmsg(1705, pri_in );
		pass

	def cli_get_rand_range(self ,min,max ):
		"""
获取randid次数:
	/* 范围终止 */
	#类型:uint32
	public max;


	"""
		pri_in=cli_get_rand_range_in();

		pri_in.min=min
		pri_in.max=max
		self.sendmsg(1706, pri_in );
		pass

	def cli_get_draw_cnt(self  ):
		"""
获取可用翻牌子次数（有主动通知包）:

	"""
		pri_in=None;

		self.sendmsg(1707, pri_in );
		pass

	def cli_draw_once(self ,type ):
		"""
翻一次牌子:
	/* 1普通牌子2VIP牌子 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_draw_once_in();

		pri_in.type=type
		self.sendmsg(1708, pri_in );
		pass

	def cli_get_survey_info(self  ):
		"""
获取是否参与过调查:

	"""
		pri_in=None;

		self.sendmsg(1709, pri_in );
		pass

	def cli_engage_survey(self ,answerlist ):
		"""
参与调查:
	/*问卷答案*/
	#变长数组,最大长度:100, 类型:stru_id_cnt
	public answerlist =array();


	"""
		pri_in=cli_engage_survey_in();

		pri_in.answerlist=answerlist
		self.sendmsg(1710, pri_in );
		pass

	def cli_engage_skill_survey(self ,option ):
		"""
参与宠物技能投票:
	/* 选项 */
	#类型:uint32
	public option;


	"""
		pri_in=cli_engage_skill_survey_in();

		pri_in.option=option
		self.sendmsg(1711, pri_in );
		pass

	def cli_get_skill_survey_info(self  ):
		"""
获取技能调查结果:

	"""
		pri_in=None;

		self.sendmsg(1712, pri_in );
		pass

	def cli_get_pet_skill_reward(self ,type,index ):
		"""
获取宠物技能相关奖励:
	/* 奖励索引 */
	#类型:uint32
	public index;


	"""
		pri_in=cli_get_pet_skill_reward_in();

		pri_in.type=type
		pri_in.index=index
		self.sendmsg(1713, pri_in );
		pass

	def cli_get_pet_reward_info(self  ):
		"""
获取宠物技能相关奖励领取信息:

	"""
		pri_in=None;

		self.sendmsg(1714, pri_in );
		pass

	def cli_start_game(self ,type ):
		"""
游戏开始:
	/* 游戏类型 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_start_game_in();

		pri_in.type=type
		self.sendmsg(1715, pri_in );
		pass

	def cli_start_hangup(self ,seatid,type ):
		"""
开始挂机:
	/* 挂机类型（1挂经验2挂宠物经验3挂技能经验） */
	#类型:uint32
	public type;


	"""
		pri_in=cli_start_hangup_in();

		pri_in.seatid=seatid
		pri_in.type=type
		self.sendmsg(1750, pri_in );
		pass

	def cli_stop_hangup(self  ):
		"""
停止挂机:

	"""
		pri_in=None;

		self.sendmsg(1751, pri_in );
		pass

	def noti_cli_hang_get_exp(self  ):
		"""
通知客户端挂机获得经验:

	"""
		pri_in=None;

		self.sendmsg(1752, pri_in );
		pass

	def cli_get_seat_info(self ,type ):
		"""
获取座位情况:
	/* 座位类型 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_get_seat_info_in();

		pri_in.type=type
		self.sendmsg(1753, pri_in );
		pass

	def cli_register_bird_map(self ,mapid ):
		"""
注册陆行鸟跳转点:
	/* 地图ID（陆行鸟ID） */
	#类型:uint32
	public mapid;


	"""
		pri_in=cli_register_bird_map_in();

		pri_in.mapid=mapid
		self.sendmsg(1800, pri_in );
		pass

	def cli_get_bird_maps(self  ):
		"""
获取陆行鸟注册信息:

	"""
		pri_in=None;

		self.sendmsg(1801, pri_in );
		pass

	def cli_check_team_bird_map(self ,mapid ):
		"""
检查队伍陆行鸟是否注册:
	/* 注册点地图 */
	#类型:uint32
	public mapid;


	"""
		pri_in=cli_check_team_bird_map_in();

		pri_in.mapid=mapid
		self.sendmsg(1803, pri_in );
		pass

	def cli_register_boss_map(self ,mapid ):
		"""
注册BOSS跳转点:
	/* 地图ID（陆行鸟ID） */
	#类型:uint32
	public mapid;


	"""
		pri_in=cli_register_boss_map_in();

		pri_in.mapid=mapid
		self.sendmsg(1810, pri_in );
		pass

	def cli_get_boss_maps(self  ):
		"""
获取BOSS跳转点信息:

	"""
		pri_in=None;

		self.sendmsg(1811, pri_in );
		pass

	def cli_check_team_boss_map(self ,mapid ):
		"""
检查队伍跳转点是否注册:
	/* 注册点地图 */
	#类型:uint32
	public mapid;


	"""
		pri_in=cli_check_team_boss_map_in();

		pri_in.mapid=mapid
		self.sendmsg(1813, pri_in );
		pass

	def cli_get_map_state(self  ):
		"""
拉取场景状态信息:

	"""
		pri_in=None;

		self.sendmsg(1814, pri_in );
		pass

	def cli_set_map_state(self ,stateid,state ):
		"""
:
	/* 对应状态 */
	#类型:uint32
	public state;


	"""
		pri_in=cli_set_map_state_in();

		pri_in.stateid=stateid
		pri_in.state=state
		self.sendmsg(1815, pri_in );
		pass

	def cli_get_handbook_info(self  ):
		"""
拉取图鉴信息:

	"""
		pri_in=None;

		self.sendmsg(1850, pri_in );
		pass

	def cli_get_g_book(self  ):
		"""
获取G档案信息:

	"""
		pri_in=None;

		self.sendmsg(1851, pri_in );
		pass

	def cli_get_g_book_xiaomee(self ,beast_type ):
		"""
获取第一次点亮怪物的星豆:
	/* 怪物类型 */
	#类型:uint32
	public beast_type;


	"""
		pri_in=cli_get_g_book_xiaomee_in();

		pri_in.beast_type=beast_type
		self.sendmsg(1852, pri_in );
		pass

	def cli_open_box(self ,boxid ):
		"""
:
	/* 宝箱id */
	#类型:uint32
	public boxid;


	"""
		pri_in=cli_open_box_in();

		pri_in.boxid=boxid
		self.sendmsg(1900, pri_in );
		pass

	def cli_box_opened(self  ):
		"""
宝箱已经被打开:

	"""
		pri_in=None;

		self.sendmsg(1901, pri_in );
		pass

	def cli_box_activated(self  ):
		"""
宝箱被激活:

	"""
		pri_in=None;

		self.sendmsg(1902, pri_in );
		pass

	def noti_cli_get_box_item(self  ):
		"""
通知客户端得到物品:

	"""
		pri_in=None;

		self.sendmsg(1903, pri_in );
		pass

	def get_box_active_list(self  ):
		"""
:

	"""
		pri_in=None;

		self.sendmsg(1904, pri_in );
		pass

	def cli_maze_state_change(self  ):
		"""
迷宫状态变化通知:

	"""
		pri_in=None;

		self.sendmsg(1910, pri_in );
		pass

	def cli_maze_open_portal(self ,maze_id ):
		"""
获得人物附近传送门的转移地图:
	/* 迷宫ID */
	#类型:uint32
	public maze_id;


	"""
		pri_in=cli_maze_open_portal_in();

		pri_in.maze_id=maze_id
		self.sendmsg(1911, pri_in );
		pass

	def cli_maze_goto_map(self  ):
		"""
迷宫关闭，人物需要转移地图通知:

	"""
		pri_in=None;

		self.sendmsg(1912, pri_in );
		pass

	def cli_get_shop_in_map(self  ):
		"""
获取迷宫商店:

	"""
		pri_in=None;

		self.sendmsg(1913, pri_in );
		pass

	def cli_send_mail(self ,themeid,title,rec_cnt,msg_cnt ):
		"""
发送邮件:
	/* 邮件内容字节数 */
	#类型:uint32
	public msg_cnt;


	"""
		pri_in=cli_send_mail_in();

		pri_in.themeid=themeid
		pri_in.title=title
		pri_in.rec_cnt=rec_cnt
		pri_in.msg_cnt=msg_cnt
		self.sendmsg(1950, pri_in );
		pass

	def cli_get_mail_simple(self  ):
		"""
获得用户邮件简单信息列表:

	"""
		pri_in=None;

		self.sendmsg(1952, pri_in );
		pass

	def cli_get_mail_content(self ,mailid ):
		"""
获得邮件内容和物品:
	/* 邮件id */
	#类型:uint32
	public mailid;


	"""
		pri_in=cli_get_mail_content_in();

		pri_in.mailid=mailid
		self.sendmsg(1953, pri_in );
		pass

	def cli_del_mail(self ,mail_ids ):
		"""
删除邮件:
	/*邮件列表*/
	#变长数组,最大长度:500, 类型:uint32_t
	public mail_ids =array();


	"""
		pri_in=cli_del_mail_in();

		pri_in.mail_ids=mail_ids
		self.sendmsg(1954, pri_in );
		pass

	def cli_mail_set_flag(self ,mailid,flag ):
		"""
设置邮件标志位:
	/* 标志位 */
	#类型:uint32
	public flag;


	"""
		pri_in=cli_mail_set_flag_in();

		pri_in.mailid=mailid
		pri_in.flag=flag
		self.sendmsg(1955, pri_in );
		pass

	def cli_mail_notify(self  ):
		"""
通知用户收到新邮件:

	"""
		pri_in=None;

		self.sendmsg(1956, pri_in );
		pass

	def cli_mail_items_get(self ,mailid ):
		"""
获取系统邮件赠送的物品:
	/* 邮件id */
	#类型:uint32
	public mailid;


	"""
		pri_in=cli_mail_items_get_in();

		pri_in.mailid=mailid
		self.sendmsg(1958, pri_in );
		pass

	def noti_global_msg(self  ):
		"""
:

	"""
		pri_in=None;

		self.sendmsg(1970, pri_in );
		pass

	def cli_get_home_info(self ,userid ):
		"""
拉取小屋信息:
	/* 指定用户ID */
	#类型:uint32
	public userid;


	"""
		pri_in=cli_get_home_info_in();

		pri_in.userid=userid
		self.sendmsg(2000, pri_in );
		pass

	def cli_expbox_change(self  ):
		"""
小屋经验树变化:

	"""
		pri_in=None;

		self.sendmsg(2001, pri_in );
		pass

	def cli_update_home_flag(self ,bit,flag ):
		"""
设置小屋flag:
	/* 0或1，部分位只能设置1 */
	#类型:uint32
	public flag;


	"""
		pri_in=cli_update_home_flag_in();

		pri_in.bit=bit
		pri_in.flag=flag
		self.sendmsg(2002, pri_in );
		pass

	def cli_get_water_cnt(self  ):
		"""
拉取浇灌次数:

	"""
		pri_in=None;

		self.sendmsg(2050, pri_in );
		pass

	def cli_use_water(self ,count ):
		"""
浇灌:
	/* 浇灌数量 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_use_water_in();

		pri_in.count=count
		self.sendmsg(2051, pri_in );
		pass

	def cli_start_fishing(self  ):
		"""
开始钓鱼:

	"""
		pri_in=None;

		self.sendmsg(2052, pri_in );
		pass

	def cli_fishing_get_item(self ,itemid ):
		"""
钓鱼获得物品:
	/* 获得的物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=cli_fishing_get_item_in();

		pri_in.itemid=itemid
		self.sendmsg(2053, pri_in );
		pass

	def cli_finish_fishing(self  ):
		"""
结束钓鱼:

	"""
		pri_in=None;

		self.sendmsg(2054, pri_in );
		pass

	def get_vacancy_cnt(self  ):
		"""
获取空无一物次数:

	"""
		pri_in=None;

		self.sendmsg(2056, pri_in );
		pass

	def cli_get_hero_team_rank(self  ):
		"""
获取所在勇士杯队伍排名:

	"""
		pri_in=None;

		self.sendmsg(2057, pri_in );
		pass

	def cli_get_hero_team_reward(self  ):
		"""
领取勇士杯:

	"""
		pri_in=None;

		self.sendmsg(2058, pri_in );
		pass

	def cli_get_hero_user_rank(self  ):
		"""
获取用户排名:

	"""
		pri_in=None;

		self.sendmsg(2059, pri_in );
		pass

	def cli_get_vip_active_item(self  ):
		"""
获取VIP充值活动奖品:

	"""
		pri_in=None;

		self.sendmsg(2060, pri_in );
		pass

	def noti_cli_can_get_dragon(self  ):
		"""
通知客户端可以获得龙蛋:

	"""
		pri_in=None;

		self.sendmsg(2061, pri_in );
		pass

	def cli_get_hero_cup_reward(self  ):
		"""
获取勇士杯奖励:

	"""
		pri_in=None;

		self.sendmsg(2062, pri_in );
		pass

	def cli_devote_medals(self  ):
		"""
贡献奖牌:

	"""
		pri_in=None;

		self.sendmsg(2063, pri_in );
		pass

	def cli_get_vip_active_2(self  ):
		"""
获取vip召回活动奖励:

	"""
		pri_in=None;

		self.sendmsg(2064, pri_in );
		pass

	def cli_pic_srv_ip_port(self  ):
		"""
拉取截图服务器信息:

	"""
		pri_in=None;

		self.sendmsg(2100, pri_in );
		pass

	def cli_read_news(self ,type ):
		"""
阅读统计:
	/* 1阅读时报 2阅读VIP说明 */
	#类型:uint32
	public type;


	"""
		pri_in=cli_read_news_in();

		pri_in.type=type
		self.sendmsg(2150, pri_in );
		pass

	def cli_check_magic_code(self ,code ):
		"""
获取神奇密码兑换信息:
	/* 神奇密码，不足32位补0 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""
		pri_in=cli_check_magic_code_in();

		pri_in.code=code
		self.sendmsg(3001, pri_in );
		pass

	def cli_use_magic_code(self ,code,count ):
		"""
使用神奇密码兑换:
	/* 兑换物品种类数 */
	#类型:uint32
	public count;


	"""
		pri_in=cli_use_magic_code_in();

		pri_in.code=code
		pri_in.count=count
		self.sendmsg(3002, pri_in );
		pass

	def get_bus_friend_uplist(self ,friendlist ):
		"""
获取好友校巴更新列表:
	/*需要拉取的好友列表*/
	#变长数组,最大长度:1000, 类型:uint32_t
	public friendlist =array();


	"""
		pri_in=get_bus_friend_uplist_in();

		pri_in.friendlist=friendlist
		self.sendmsg(3101, pri_in );
		pass

	def get_bus_friend_base_info(self ,userid ):
		"""
获取校巴好友基本信息:
	/* 米米号 */
	#类型:uint32
	public userid;


	"""
		pri_in=get_bus_friend_base_info_in();

		pri_in.userid=userid
		self.sendmsg(3102, pri_in );
		pass

	def mall_get_money_balance(self  ):
		"""
查询商城货币余额:

	"""
		pri_in=None;

		self.sendmsg(3200, pri_in );
		pass

	def mall_get_items_price(self ,items ):
		"""
拉取多个商城物品的价格:
	/**/
	#变长数组,最大长度:150, 类型:uint32_t
	public items =array();


	"""
		pri_in=mall_get_items_price_in();

		pri_in.items=items
		self.sendmsg(3201, pri_in );
		pass

	def mall_get_item_detail(self ,itemid ):
		"""
获取商城物品详细信息:
	/* 物品ID */
	#类型:uint32
	public itemid;


	"""
		pri_in=mall_get_item_detail_in();

		pri_in.itemid=itemid
		self.sendmsg(3202, pri_in );
		pass

	def mall_buy_item(self ,passwd,itemid,count ):
		"""
商城买东西:
	/*  */
	#类型:uint16
	public count;


	"""
		pri_in=mall_buy_item_in();

		pri_in.passwd=passwd
		pri_in.itemid=itemid
		pri_in.count=count
		self.sendmsg(3203, pri_in );
		pass

	def check_spacetime_code(self ,code ):
		"""
检查时空密码:
	/* 时空密码 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""
		pri_in=check_spacetime_code_in();

		pri_in.code=code
		self.sendmsg(4001, pri_in );
		pass

	def use_spacetime_code(self ,code ):
		"""
使用时空密码:
	/* 时空密码 */
	#定长数组,长度:32, 类型:char 
	public code ;


	"""
		pri_in=use_spacetime_code_in();

		pri_in.code=code
		self.sendmsg(4002, pri_in );
		pass


