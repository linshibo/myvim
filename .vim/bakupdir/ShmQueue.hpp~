/**
 *====================================================================
 *  @file       ShmQueue.hpp
 *  @brief      ShmQueue manage shared memory
 * 
 *  compiler    gcc4.1.2
 *  platform    Linux
 *
 *  copyright:  TaoMee, Inc. ShangHai CN. All rights reserved.
 *
 *====================================================================
 */
 
#ifndef SHMQUEUE_HPP
#define SHMQUEUE_HPP

#include <stdint.h>

#define RCVBUFMAX   1 << 23
#define SHM_BLOCK_LEN_MAX	1<<23

extern ShmQueue g_shm_queue;
struct BufBlock_t;
struct BufHead_t;
/*
 * -----------------------------------------------
 * |len|buf....|len|buf...|                      |
 * -----------------------------------------------
 */
class ShmQueue
{
public:
    ShmQueue();
    ~ShmQueue();
    
public:
    bool init(uint32_t shm_size);
    bool fini();
    
    bool push_r_queue(BufHead_t *head, uint8_t *buf);
    bool pop_r_queue(BufHead_t *head, uint8_t *buf, uint32_t buf_len);
    bool push_s_queue(BufHead_t *head, uint8_t *buf);
    bool pop_s_queue(BufBlock_t *&buf);

    inline int pipe_r_fd() { return m_pipe_r[0]; }
    inline int pipe_s_fd() { return m_pipe_s[0]; }
    
public:
    uint8_t *m_base;
    uint32_t m_shm_size;

    struct ShmHead_t {
        volatile uint32_t cnt;
        volatile uint32_t w_pos;
        volatile uint32_t r_pos;
    };

    ShmHead_t *m_r_queue_head;
    ShmHead_t *m_s_queue_head;
    
    uint8_t *m_r_queue_base;
    uint8_t *m_s_queue_base;
    uint32_t m_queue_size;
    
    int m_pipe_r[2];
    int m_pipe_s[2];
};

#endif
