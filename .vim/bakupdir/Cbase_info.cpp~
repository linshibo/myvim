/**
 * =====================================================================================
 *
 * @file  Cbase_info.cpp
 *
 * @brief 用户基本信息
 *
 * compiler  gcc4.3.2
 *
 * platform  Linux
 *
 * copyright:  TaoMee, Inc. ShangHai CN. All rights reserved.
 * 		
 * =====================================================================================
 */

#include <string>
#include <algorithm>
#include <cmath>
#include "Cbase_info.h"
#include "benchapi.h"
#include "stat_log.hpp"

#include <libtaomee++/utils/strings.hpp>
#include <libtaomee++/proto/proto_util.h>
#include <libtaomee++/bitmanip/bitmanip.hpp>

#include "../../proto/trunk/seer2_db_enum.h"
#include "../../share/trunk/share_funcs.hpp"
#include "../../share/trunk/share_usr.hpp"

#define DB_USER_INFO "USER_INFO"
#define T_BASE_INFO "t_base_info"


enum {
	nick_len = 16,
	once_msg_len  = 140, /* 一条离线消息的最大长度 */	
	msg_buf_len	= 2008, /* 离线消息存储最大长度 */
	max_offline_msg_num	= 14, /* 离线消息存储最大数量 */
	spt_buf_len = 104, /* spt战斗状态存储最大长度 */
	spt_info_max_num = 20, /* spt战斗状态存储最大数量 */
	gate_buf_len = 154, /* 各门战斗状态存储最大长度 */
	gate_info_max_num = 30, /* 各门战斗状态存储最大数量 */
	activity_buf_len = 64, /* 活动参加标志的最大长度 */
	signature_buf_len = 104, /* 个性签名存储最大长度 */
	fish_buf_len = 804, /* 鱼列表最大存储长度 */
	energy_ball_buf_len = 44, /* 能量球装备时间buf最大存储长度 */
	energy_ball_max_num = 3, /* 能量球达到最大装备个数 */
};

enum friends_t{
	friends_buf_len	= 804,  /* 好友、黑名单存储最大长度 */
	black_buf_len	= 804,
	friends_max_num	= 200,  /* 好友、黑名单最大数目 */
	black_max_num	= 200,
};

enum {
	forbid_24 = 1, /* 用户被禁24小时 */
	forbid_7 = 2, /* 用户被禁一周 */
	forbid_14 = 4, /* 用户被禁两周 */
	forbid_forever = 8, /* 用户永久被禁 */
};

enum state_flag_mean{
	type_call_bit = 1, /* 表示是否是召集人的bit位 */
	type_was_vip_bit = 2, /* 表示开通过vip */
};

enum offline_flag_mean{
	type_lucky_bit = 1, /*vip优惠充值活动*/
	type_hand_bit = 2, /*vip优惠充值活动，送手部装扮*/
};

Cbase_info::Cbase_info(mysql_interface *db):CtableRoute(db, DB_USER_INFO, T_BASE_INFO, "user_id")
{

}

/** @brief 获取用户基本信息
 */
int Cbase_info::get_base_info(userid_t user_id, userinfo_baseinfo_get_base_info_out *out)
{
	char temp_buf_friend[friends_buf_len];
	memset(temp_buf_friend, 0, friends_buf_len);
	char temp_buf_black[black_buf_len];
	memset(temp_buf_black, 0, black_buf_len);
	char temp_buf_fish[fish_buf_len];
	char temp_buf_spt[spt_buf_len];
	char temp_buf_gate[gate_buf_len];
	char temp_buf_signature[signature_buf_len];
	char temp_buf_energy_ball[energy_ball_buf_len];

	GEN_SQLSTR(this->sqlstr, "select nick, color, money, sex, msg_buf, trainer_scores, title_id, "
		" today_get_money, create_role_time, "
		" friend_list, black_list, fish_list, "
		" spt_info, gate_info, activity_flag, state_flag, offline_flag, "
		" login_duration, double_exp_time_left, map_id, pos_x, pos_y, signature, call_id, honor, "
		" vip_flag, vip, vip_points, vip_base_points, vip_try_time, vip_end_time, "
		" vip_total_months, vip_months, vip_energy_ball_time, "
		" lucky_start_time, lucky_user_type, "
		" logout_time, available_double_exp_time, online_gift_time, vip_recharge_gift_count "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(out->nick, nick_len);
		INT_CPY_NEXT_FIELD(out->color);
		INT_CPY_NEXT_FIELD(out->coins);
		INT_CPY_NEXT_FIELD(out->sex);
		BIN_CPY_NEXT_FIELD(out->offline_msg_list, msg_buf_len);
		INT_CPY_NEXT_FIELD(out->trainer_scores);
		INT_CPY_NEXT_FIELD(out->title_id);
		INT_CPY_NEXT_FIELD(out->today_get_money);
		INT_CPY_NEXT_FIELD(out->create_role_time);
		BIN_CPY_NEXT_FIELD(temp_buf_friend, friends_buf_len);
		BIN_CPY_NEXT_FIELD(temp_buf_black, black_buf_len);
		BIN_CPY_NEXT_FIELD(temp_buf_fish, fish_buf_len);
		BIN_CPY_NEXT_FIELD(temp_buf_spt, spt_buf_len);
		BIN_CPY_NEXT_FIELD(temp_buf_gate, gate_buf_len);
		BIN_CPY_NEXT_FIELD(out->activity_flag, sizeof(out->activity_flag));
		INT_CPY_NEXT_FIELD(out->state_flag);
		INT_CPY_NEXT_FIELD(out->offline_flag);
		INT_CPY_NEXT_FIELD(out->login_duration);
		INT_CPY_NEXT_FIELD(out->double_exp_time_left);
		INT_CPY_NEXT_FIELD(out->map_id);
		INT_CPY_NEXT_FIELD(out->pos_x);
		INT_CPY_NEXT_FIELD(out->pos_y);
		BIN_CPY_NEXT_FIELD(temp_buf_signature, signature_buf_len);
		INT_CPY_NEXT_FIELD(out->call_id);
		INT_CPY_NEXT_FIELD(out->honor_num);
		INT_CPY_NEXT_FIELD(out->vip_info.flag);
		INT_CPY_NEXT_FIELD(out->vip_info.vip);
		INT_CPY_NEXT_FIELD(out->vip_info.points);
		INT_CPY_NEXT_FIELD(out->vip_info.vip_base_points);
		INT_CPY_NEXT_FIELD(out->vip_info.vip_try_time);
		INT_CPY_NEXT_FIELD(out->vip_info.vip_end_time);
		INT_CPY_NEXT_FIELD(out->vip_info.vip_total_months);
		INT_CPY_NEXT_FIELD(out->vip_info.vip_months);
		BIN_CPY_NEXT_FIELD(temp_buf_energy_ball, energy_ball_buf_len);
		INT_CPY_NEXT_FIELD(out->lucky_start_time);
		INT_CPY_NEXT_FIELD(out->lucky_user_type);
		INT_CPY_NEXT_FIELD(out->last_logout_time);
		INT_CPY_NEXT_FIELD(out->available_double_exp);
		INT_CPY_NEXT_FIELD(out->online_gift_time);
		INT_CPY_NEXT_FIELD(out->vip_recharge_gift_count);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  

	out->_offline_msg_list_len = 8 + *(reinterpret_cast<uint32_t*>(out->offline_msg_list));	
	//解析signature
	out->_signature_len = *(reinterpret_cast<uint32_t*>(temp_buf_signature));
	memcpy(out->signature, temp_buf_signature + sizeof(uint32_t), out->_signature_len);
	//解析friend_list
	pack_friends_list(temp_buf_friend, friends_buf_len, out->friend_list);
	pack_friends_list(temp_buf_black, black_buf_len, out->black_list);
	//解析fish_list
	byte_array_t fish_ba_r(temp_buf_fish, fish_buf_len);
	Ctemp_varlist<uint32_t> fish_list_r(&out->fish_list);
	fish_list_r.read_from_buf(fish_ba_r);
	//解析spt_info
	byte_array_t spt_ba(temp_buf_spt, spt_buf_len);
	out->spt_info.read_from_buf(spt_ba);
	//解析gate_info
	byte_array_t gate_ba(temp_buf_gate, gate_buf_len);
	out->gate_info.read_from_buf(gate_ba);
	//解析vip的energy_ball_buf
	byte_array_t energy_ba_r(temp_buf_energy_ball, energy_ball_buf_len);
	Ctemp_varlist<uint32_t> energy_list_r(&out->vip_info.energy_ball_time);
	energy_list_r.read_from_buf(energy_ba_r);
	//解析was_vip
	this->_check_state_flag(user_id, out->state_flag, type_was_vip_bit, out->vip_info.was_vip);
	return SUCC;
}

/** @brief 删除过期能量球
 */
/*
void Cbase_info::_delete_overdue_energy_ball(char* tem_buf)
{
	uint32_t count = *(reinterpret_cast<uint32_t*>(temp_buf));
	for (uint32_t i = 0 ; i < count; ++i) {
		uint32_t energy_ball_time = *(reinterpret_cast<uint32_t*>(temp_buf + 4 + i*sizeof(uint32_t)));
	}
}
*/

/** @brief 创建新用户
 */
int Cbase_info::insert_base_info(userid_t user_id, userinfo_baseinfo_insert_base_info_in *in)
{
	int ret = this->_insert_base_info(user_id, in);
	if (ret != KEY_EXISTED_ERR) {
		return ret;
	}

	return this->_update_base_info(user_id, in);
}

/** @brief 创建新用户，新增基本信息
 */
int Cbase_info::_insert_base_info(userid_t user_id, userinfo_baseinfo_insert_base_info_in *in)
{
	char nick_mysql[mysql_str_len(nick_len)];
	set_mysql_string(nick_mysql, in->nick, nick_len);
	GEN_SQLSTR(this->sqlstr, "insert into %s"
		"(user_id, nick, color, sex, create_role_time) "
		"values(%u, '%s', %u, %u, %u)",
		this->get_table_name(user_id),
		user_id,
		nick_mysql,
		in->color,
		in->sex,
		uint32_t(time(0)));
	return this->exec_insert_sql(this->sqlstr, KEY_EXISTED_ERR);	
}

/** @brief 创建新用户，修改基本信息
 */
int Cbase_info::_update_base_info(userid_t user_id, userinfo_baseinfo_insert_base_info_in *in)
{
	char nick_mysql[mysql_str_len(nick_len)];
	set_mysql_string(nick_mysql, in->nick, nick_len);
	GEN_SQLSTR(this->sqlstr, "update %s set "
		" nick = '%s', "
		" color = %u, "
		" sex = %u, "
		" create_role_time = %u "
		" where user_id = %u ",
		this->get_table_name(user_id),
		nick_mysql,
		in->color,
		in->sex,
		uint32_t(time(0)),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取离线消息
 */
int Cbase_info::get_offline_msg(userid_t user_id, char* temp_buf, uint32_t& len)
{
	GEN_SQLSTR(this->sqlstr, "select msg_buf from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf, len);
		uint32_t cnt_ = *(reinterpret_cast<uint32_t *>(temp_buf));
		len = 8 + cnt_;
	STD_QUERY_ONE_END();
}

/** @brief 添加离线消息
 */
int Cbase_info::add_offline_msg(userid_t user_id, userinfo_baseinfo_add_offline_msg_in* in)
{
	char temp_buf[msg_buf_len];
	uint32_t real_len = msg_buf_len; //get_offline_msg中使用

	//获取原msg_buf
	//real_len是原msg的总长度，包含前8个字节的长度
	int ret = get_offline_msg(user_id, temp_buf, real_len);
	if (ret != SUCC) {
		return ret;
	}
		
	byte_array_t ba; //将传入数据写入ba的buf
	ba.init_postion();
	in->write_to_buf(ba);
	uint32_t cur_len = ba.get_postion(); //in的长度

	if (real_len + cur_len >= msg_buf_len) {
		return db_err_offline_msg_too_much;
	}
	
	*(reinterpret_cast<uint32_t*>(temp_buf)) += cur_len; //总长
	*(reinterpret_cast<uint32_t*>(temp_buf + 4)) += 1;  //count
	memcpy(temp_buf + real_len, ba.get_buf(), cur_len);
	
	/*DEBUG_LOG("@@@@@@@@@@@@@@@@  msg_count=%u senderid=%u real_len=%u", 
		*(reinterpret_cast<uint32_t*>(temp_buf + 4)),
		*(reinterpret_cast<uint32_t*>(temp_buf + 8)), real_len);*/

	//新msg的总长度，包含前8个字节的长度
	real_len += cur_len; 
	//处理不能识别的字符串
	char temp_buf_2[mysql_str_len(real_len)];
	set_mysql_string(temp_buf_2, temp_buf, real_len);
	
	//update
	GEN_SQLSTR(this->sqlstr, "update %s set " 
				"msg_buf = '%s' "
				"where user_id = %u ", 
				this->get_table_name(user_id),
				temp_buf_2,
				user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR );	
}

/** @brief 删除离线消息
 */
int Cbase_info::del_offline_msg(userid_t user_id)
{
	char tmp[8];
	memset(tmp, 0, sizeof(tmp));
	char str[mysql_str_len(8)] ;
	set_mysql_string(str, tmp, sizeof(tmp));

	//删除离线消息
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		"msg_buf = '%s' "
		"where user_id = %u ", 
		this->get_table_name(user_id),
		str,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR );	
}

/** @brief 更改个性签名
 */
int Cbase_info::add_signature(userid_t user_id, userinfo_baseinfo_add_signature_in* in)
{
	byte_array_t ba; 
	ba.init_postion();
	if (!in->write_to_buf(ba)) {
		return db_err_signature_too_much;
	}

	//更新签名
	char temp_buf_sql[mysql_str_len(ba.get_postion())];
	set_mysql_string(temp_buf_sql, ba.get_buf(), ba.get_postion());
	GEN_SQLSTR(this->sqlstr, "update %s set " 
				" signature = '%s' "
				" where user_id = %u ", 
				this->get_table_name(user_id),
				temp_buf_sql,
				user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR );	
}

/** @brief 获得被禁用户信息
 */
int Cbase_info::get_forbid_info(userid_t user_id, userinfo_baseinfo_get_user_forbid_info_out* in)
{
	char temp_buf_friend[friends_buf_len];
	char temp_buf_black[black_buf_len];
	uint8_t forbid_flag = 0;
	uint32_t forbid_time = 0;
	int ret = get_forbid_info_buf(user_id, forbid_flag, forbid_time, temp_buf_friend, 
		friends_buf_len, temp_buf_black, black_buf_len, in->last_login_online_id);
	if (ret != SUCC){
		return ret;
	}

	//判断是否被禁
	ret = this->is_forbid(user_id, forbid_flag, forbid_time);
	if (ret != 0) { /*用户被禁,返回错误码*/
		return ret;
	}
	//没有被禁则返回好友信息
	pack_friends_list(temp_buf_friend, friends_buf_len, in->friends_list);
	pack_friends_list(temp_buf_black, black_buf_len, in->blacks_list);

	return ret;
}

/** @brief 获得好友和黑名单的buf,以及上次登录online的id，被禁情况
 */
int Cbase_info::get_forbid_info_buf(userid_t user_id, uint8_t& forbid_flag, uint32_t& forbid_time, char* temp_buf_friend, uint32_t len_1, char* temp_buf_black, uint32_t len_2, uint16_t& ol_id)
{
	GEN_SQLSTR(this->sqlstr, "select forbid_flag, forbid_time, friend_list, black_list, ol_last_login_id "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(forbid_flag);
		INT_CPY_NEXT_FIELD(forbid_time);
		BIN_CPY_NEXT_FIELD(temp_buf_friend, len_1);
		BIN_CPY_NEXT_FIELD(temp_buf_black, len_2);
		INT_CPY_NEXT_FIELD(ol_id);
	STD_QUERY_ONE_END();
}

/** @brief 打包好友或黑名单的buf为vector类型
 */
void Cbase_info::pack_friends_list(char* temp_buf, uint32_t len, std::vector<uint32_t>& list)
{
	size_t count = *(reinterpret_cast<uint32_t*>(temp_buf));
	int idx = 4;
	for (size_t i = 0; i < count; ++i, idx += 4) {
		list.push_back(*(reinterpret_cast<uint32_t*>(temp_buf + idx)));
	}
}

/** @brief 获得单个buf
 */
int Cbase_info::_get_single_buf(userid_t user_id, const char* field_type, char* temp_buf, uint32_t len)
{
	GEN_SQLSTR(this->sqlstr, "select %s from %s where user_id = %u", 
		field_type, this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf, len);
	STD_QUERY_ONE_END();
}

/** @brief 添加好友或黑名单
 */
int Cbase_info::add_friend(userid_t user_id, const char * field_type, uint32_t friend_id)
{
	char temp_buf[friends_buf_len];
	int ret = _get_single_buf(user_id, field_type, temp_buf, friends_buf_len);
	if (ret != SUCC) {
		return ret;
	}

	uint32_t count = *(reinterpret_cast<uint32_t*>(temp_buf));
	//好友列表或黑名单达到存储上限
	if (count >= friends_max_num) {
		return db_err_friends_list_is_full;
	}
	*(reinterpret_cast<uint32_t*>(temp_buf)) += 1;  //count
	memcpy(temp_buf + 4 + count * 4, reinterpret_cast<char *>(&friend_id), 4);
	
	//处理不能识别的字符串
	uint32_t real_len = 4 + (*(reinterpret_cast<uint32_t*>(temp_buf))) * 4;
	char temp_buf_2[mysql_str_len(real_len)];
	set_mysql_string(temp_buf_2, temp_buf, real_len);
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" %s =  '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		field_type,
		temp_buf_2,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 删除一个好友或黑名单
 */
int Cbase_info::del_friend(userid_t user_id, const char * field_type, uint32_t friend_id)
{
	char temp_buf[friends_buf_len];
	int ret = _get_single_buf(user_id, field_type, temp_buf, friends_buf_len);
	if (ret != SUCC) {
		return ret;
	}

	uint32_t count = *(reinterpret_cast<uint32_t*>(temp_buf));
	for (size_t i = 0; i < count; ++i) {
		if (*(reinterpret_cast<uint32_t*>(temp_buf+4+i*4)) == friend_id) {
			memcpy(temp_buf+4+i*4, temp_buf+4+i*4+4, 4*count - 4*(i+1));
			*(reinterpret_cast<uint32_t*>(temp_buf)) -= 1;  //count
			i = count;
		}
	}

	//处理不能识别的字符串
	uint32_t real_len = 4 + (*(reinterpret_cast<uint32_t*>(temp_buf))) * 4;
	char temp_buf_2[mysql_str_len(real_len)];
	set_mysql_string(temp_buf_2, temp_buf, real_len);
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" %s = '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		field_type,
		temp_buf_2,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 拉取用户简单资料
 */
int Cbase_info::get_user_simple_info(userid_t user_id, userinfo_baseinfo_get_user_simple_info_out* out)
{
	uint32_t state_flag = 0;
	GEN_SQLSTR(this->sqlstr, "select user_id, nick, color, trainer_scores, sex, "
		" vip, vip_points, vip_try_time, state_flag "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(out->user_simple_info.user_id);
		BIN_CPY_NEXT_FIELD(out->user_simple_info.nick, nick_len);
		INT_CPY_NEXT_FIELD(out->user_simple_info.color);
		INT_CPY_NEXT_FIELD(out->user_simple_info.trainer_scores);
		INT_CPY_NEXT_FIELD(out->user_simple_info.sex);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip_points);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip_try_time);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.was_vip);
		INT_CPY_NEXT_FIELD(state_flag);
	STD_QUERY_ONE_END_WITHOUT_RETURN();

	//解析was_vip
	this->_check_state_flag(user_id, state_flag, type_was_vip_bit, out->vip_simple_info.was_vip);
	return SUCC;
}

/** @brief 拉取用户昵称
 */
int Cbase_info::get_nick(userid_t user_id, char* nick)
{
	GEN_SQLSTR(this->sqlstr, "select nick from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(nick, nick_len);
	STD_QUERY_ONE_END();
}

/** @brief 拉取用户vip开通情况
 */
int Cbase_info::get_user_vip_info_web(userid_t user_id, uint8_t& vip_type, uint8_t& vip_level)
{
	uint8_t was_vip = 0;
	uint8_t vip = 0;
	uint32_t state_flag = 0;
	uint32_t vip_points = 0;
	uint32_t vip_try_time = 0;
	GEN_SQLSTR(this->sqlstr, "select "
		" vip, state_flag, vip_points, vip_try_time "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR);
	INT_CPY_NEXT_FIELD(vip);
	INT_CPY_NEXT_FIELD(state_flag);
	INT_CPY_NEXT_FIELD(vip_points);
	INT_CPY_NEXT_FIELD(vip_try_time);
	STD_QUERY_ONE_END_WITHOUT_RETURN();
	this->_check_state_flag(user_id, state_flag, type_was_vip_bit, was_vip);
	vip_level = get_formal_vip_level_by_points(vip_points, was_vip, vip_try_time);
	if (vip) {
		vip_type = 1;
	} else if (was_vip) {
		vip_type = 2;
	} else {
		vip_type = 0;
	}
	return SUCC;
}

/** @brief 更新用户下线信息
 */
int Cbase_info::update_logout_info(userid_t user_id,userinfo_baseinfo_update_user_logout_info_in* in)
{
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" ol_last_login_id = %u, "
		" map_id = %lu, "
		" pos_x = %u, "
		" pos_y = %u, "
		" available_double_exp_time = %u, "
		" logout_time = %u, "
		" offline_flag = 0 "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		in->online_id,
		in->map_id,
		in->pos_x,
		in->pos_y,
		in->available_double_exp,
		(uint32_t)time(0),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 修改用户昵称
 */
int Cbase_info::update_user_nick(userid_t user_id, char* nick)
{
	char nick_mysql[mysql_str_len(nick_len)];
	set_mysql_string(nick_mysql, nick, nick_len);
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" nick = '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		nick_mysql,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取用户赛尔豆——加锁版
 */
int Cbase_info::get_user_money_for_update(userid_t user_id, uint32_t& money)
{
	GEN_SQLSTR(this->sqlstr, "select money from %s "
		" where user_id = %u for update ", 
		this->get_table_name(user_id), 
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(money);
	STD_QUERY_ONE_END();
}

/** @brief 更新赛尔豆
 */
int Cbase_info::update_user_money(userid_t user_id, int32_t change_value)
{
	uint32_t user_money = 0;
	int ret = get_user_money_for_update(user_id, user_money);
    if (ret != SUCC) {
        return ret;
    }

	if ((int32_t)user_money + change_value < 0) {
		KDEBUG_LOG(user_id, "~~~~~~~~~~~~~~~~ change_value > user_money, user_money = %u, change_value = %d", 
				   user_money, change_value);
		if (!check_now_in_specific_hms(0,0,0,6,0,0)) { //报警
			char buffer [100];
			sprintf (buffer, "Reduce money err![usr=%u]", user_id);
			send_warning(buffer);
		}
		return db_err_money_not_enough;
	}

	//报警
	if (change_value > 500000 && !check_now_in_specific_hms(0,0,0,6,0,0)) {
		KDEBUG_LOG(user_id, "Add money error:[add_money=%d]", change_value);
		char buffer [100];
		sprintf (buffer, "Add money err![usr=%u]", user_id);
		send_warning(buffer);
	}

	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" money = money + (%d) "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		change_value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取用户荣誉点数——加锁版
 */
int Cbase_info::get_honor_for_update(userid_t user_id, uint32_t& honor)
{
	GEN_SQLSTR(this->sqlstr, "select honor from %s "
		" where user_id = %u for update ", 
		this->get_table_name(user_id), 
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(honor);
	STD_QUERY_ONE_END();
}

/** @brief 更新荣誉点数
 */
int Cbase_info::update_honor(userid_t user_id, int32_t change_value)
{
	uint32_t honor = 0;
	int ret = get_honor_for_update(user_id, honor);
    if (ret != SUCC) {
        return ret;
    }

	if ((int32_t)honor + change_value < 0) {
		KDEBUG_LOG(user_id, "~~~~~~~~~~~~~~~~ change_value > honor, honor = %u, change_value = %d", 
				   honor, change_value);
		return db_err_honor_not_enough;
	}

	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" honor = honor + (%d) "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		change_value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/* @brief 根据训练师积分算出训练师等级
*/
uint8_t Cbase_info::get_trainer_level_by_scores(uint32_t& trainer_scores)
{
    uint8_t lv = sqrt((((trainer_scores > 40) ? (trainer_scores - 40) : 0) ) / static_cast<double>(20)) + 1;
    return (lv == 0) ? 1 : lv;
}

/** @brief 更新训练师分数
 */
int Cbase_info::update_trainer_scores(userid_t user_id, uint32_t value)
{
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" trainer_scores = %u "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 更新称号
 */
int Cbase_info::update_title_id(userid_t user_id, uint32_t value)
{
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" title_id = %u"
		" where user_id = %u ", 
		this->get_table_name(user_id),
		value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 初始化双倍经验积分的剩余时间
 */
int Cbase_info::initialize_double_exp_time_left(userid_t user_id, uint32_t value)
{
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" double_exp_time_left = %u"
		" where user_id = %u ", 
		this->get_table_name(user_id),
		value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 战斗完成后添加spt信息 
 */
int Cbase_info::update_spt_info(userid_t user_id, spt_info_varlist_t& spt_info)
{
	byte_array_t ba;
	ba.init_postion();
	if (!spt_info.write_to_buf(ba)) {
		return db_err_spt_info_too_much;
	}

	char spt_info_mysql[mysql_str_len(ba.get_postion())];
	set_mysql_string(spt_info_mysql, ba.get_buf(), ba.get_postion());

	GEN_SQLSTR(this->sqlstr, "update %s set spt_info = '%s' "
			" where user_id = %u",
			this->get_table_name(user_id),
			spt_info_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}


/** @brief 更新各门战斗状态信息 
 */
int Cbase_info::update_gate_info(userid_t user_id, userinfo_baseinfo_update_gate_info_in* in)
{
	byte_array_t ba;
	ba.init_postion();
	if (!in->write_to_buf(ba)) {
		return db_err_gate_info_too_much;
	}

	char gate_info_mysql[mysql_str_len(ba.get_postion())];
	set_mysql_string(gate_info_mysql, ba.get_buf(), ba.get_postion());

	GEN_SQLSTR(this->sqlstr, "update %s set gate_info = '%s' "
			" where user_id = %u ",
			this->get_table_name(user_id),
			gate_info_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 拉取用户详细资料 
 */
int Cbase_info::get_user_detail_info(userid_t user_id, userinfo_baseinfo_get_user_detail_info_out* out)
{
	//获取spt击败数
	int ret = this->get_spt_info_num(user_id, out->spt_boss_shoot_down_num);
	if (ret != SUCC) {
		 return ret;
	}
	uint32_t state_flag = 0;
	char temp_buf_signature[signature_buf_len];
	GEN_SQLSTR(this->sqlstr, "select user_id, sex, nick, color, trainer_scores,"
		" create_role_time, title_id, signature, "
		" vip, vip_points, vip_try_time, state_flag "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(out->user_simple_info.user_id);
		INT_CPY_NEXT_FIELD(out->user_simple_info.sex);
		BIN_CPY_NEXT_FIELD(out->user_simple_info.nick, nick_len);
		INT_CPY_NEXT_FIELD(out->user_simple_info.color);
		INT_CPY_NEXT_FIELD(out->user_simple_info.trainer_scores);
		INT_CPY_NEXT_FIELD(out->create_role_time);
		INT_CPY_NEXT_FIELD(out->title_id);
		BIN_CPY_NEXT_FIELD(temp_buf_signature, signature_buf_len);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip_points);
		INT_CPY_NEXT_FIELD(out->vip_simple_info.vip_try_time);
		INT_CPY_NEXT_FIELD(state_flag);
	STD_QUERY_ONE_END_WITHOUT_RETURN();

	//解析个性签名
	out->_signature_len = *(reinterpret_cast<uint32_t*>(temp_buf_signature));
	memcpy(out->signature, temp_buf_signature + sizeof(uint32_t), out->_signature_len);
	//解析was_vip
	this->_check_state_flag(user_id, state_flag, type_was_vip_bit, out->vip_simple_info.was_vip);
	return SUCC;
}

/** @brief 拉取spt击败数 
 */
int Cbase_info::get_spt_info_num(userid_t user_id, uint32_t& num)
{
	char temp_buf_spt[spt_buf_len];
	GEN_SQLSTR(this->sqlstr, "select spt_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_spt, spt_buf_len);
		num = *(reinterpret_cast<uint32_t*>(temp_buf_spt));
	STD_QUERY_ONE_END();
}

/** @brief 获取spt和各门战斗信息 
 */
int Cbase_info::get_spt_and_gate_info(userid_t user_id, userinfo_get_personal_honour_info_out* out)
{
	char temp_buf_spt[spt_buf_len];
	char temp_buf_gate[gate_buf_len];
	
	GEN_SQLSTR(this->sqlstr, "select spt_info, gate_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_spt, spt_buf_len);
		byte_array_t spt_ba(temp_buf_spt, spt_buf_len);
		out->spt_info.read_from_buf(spt_ba);
		BIN_CPY_NEXT_FIELD(temp_buf_gate, gate_buf_len);
		byte_array_t gate_ba(temp_buf_gate, gate_buf_len);
		out->gate_info.read_from_buf(gate_ba);
	STD_QUERY_ONE_END();
}

/** @brief 获取活动标志位 
 */
int Cbase_info::get_activity_flag(userid_t user_id, char * temp)
{
	GEN_SQLSTR(this->sqlstr, "select activity_flag "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp, activity_buf_len);
 	STD_QUERY_ONE_END();
}

/** @brief 设置活动标志位 
 */
int Cbase_info::set_activity_flag(userid_t user_id, uint32_t bit, bool true_or_false)
{
	char temp_buf_flag[activity_buf_len];
	memset(temp_buf_flag, 0, activity_buf_len);//必须清零
	int ret = this->get_activity_flag(user_id, temp_buf_flag);
	if (ret != SUCC) {
		return ret;
	}

	if (true_or_false) {
		taomee::set_bit_on(temp_buf_flag, bit);
	} else {
		taomee::set_bit_off(temp_buf_flag, bit);
	}
	
	char flag_mysql[mysql_str_len(activity_buf_len)];
	set_mysql_string(flag_mysql, temp_buf_flag, activity_buf_len);
	GEN_SQLSTR(this->sqlstr, "update %s set activity_flag = '%s' "
			" where user_id = %u",
			this->get_table_name(user_id),
			flag_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 更新用户今日获得的赛尔豆 
 */
int Cbase_info::update_today_money(userid_t user_id, uint32_t money)
{
	GEN_SQLSTR(this->sqlstr, "update %s set today_get_money = %u "
			" where user_id = %u",
			this->get_table_name(user_id),
			money,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 更新用户登录时长 
 */
int Cbase_info::update_login_duration(userid_t user_id, uint32_t time)
{
	GEN_SQLSTR(this->sqlstr, "update %s set login_duration = login_duration + %u "
			" where user_id = %u",
			this->get_table_name(user_id),
			time,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}


/** @brief 判断上次登录时间是否是今天，是否是连续登录 
 *  @note 首先会判断用户是否被禁，被禁是否过期，如果被禁过期，清除被禁标志位
 *  @note 如果没有被禁或被禁已经过期，继续判断上次登录时间是否是今天
 *  @return is_today,上次登录时间是否是今天
 *  @return is_continuous,是否是连续登录
 */
int Cbase_info::check_login_time(userid_t user_id, bool& is_today, bool& is_continuous)
{
	uint8_t forbid_flag = 0; /*被禁标志位*/
	uint32_t forbid_time = 0; /*被禁时间*/
	uint32_t login_time = 0; /*上次登录时间*/
	GEN_SQLSTR(this->sqlstr, "select forbid_flag, forbid_time, login_time "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(forbid_flag);
		INT_CPY_NEXT_FIELD(forbid_time);
		INT_CPY_NEXT_FIELD(login_time);
    STD_QUERY_ONE_END_WITHOUT_RETURN();

	int ret = this->is_forbid(user_id, forbid_flag, forbid_time);
	if (ret != 0) { /*用户被禁*/
		return ret;
	}
	
	//判断上次登录时间是否是今天
	uint32_t today = get_date(time(0));
	uint32_t last_login_day = get_date(login_time);
	is_today = (today == last_login_day);

	//判断是否是连续登录
	uint32_t yesterday_start = yesterday_start_time();
	is_continuous = (login_time >= yesterday_start);
	return SUCC;
}

/** @brief 判断用户是否被禁 
 *  @note 没有被禁返回0
 *  @note 被禁则返回对应的错误码
 */
int Cbase_info::is_forbid(userid_t user_id, const uint8_t& forbid_flag, const uint32_t& forbid_time)
{
	uint32_t cur_time = time(0);
	bool is_overdue = false;
	switch (forbid_flag) {
		case 0:
			break;
		case forbid_24:
			if ((cur_time - forbid_time)/3600 >= 24) {
				is_overdue = true;
				break;
			} else {
				return db_err_user_ban_24_hour;
			}
		case forbid_7:
			if ((cur_time - forbid_time)/3600/24 >= 7) {
				is_overdue = true;
				break;
			} else {
				return db_err_user_ban_7_day;
			}
		case forbid_14:
			if ((cur_time - forbid_time)/3600/24 >= 14) {
				is_overdue = true;
				break;
			} else {
				return db_err_user_ban_14_day;
			}
		case forbid_forever:
			return db_err_user_ban_forever;
		default:
			break;
	}
	if (is_overdue) {
		return this->update_forbid_flag(user_id, 0, 0);
	}
	return 0;
}

/** @brief 更改用户被禁标志位 
 */
int Cbase_info::update_forbid_flag(userid_t user_id,const uint8_t& forbid_flag, const uint32_t& forbid_time)
{
	GEN_SQLSTR(this->sqlstr, "update %s set forbid_flag = %u, forbid_time = %u "
		" where user_id = %u ",
		this->get_table_name(user_id),
		forbid_flag,
		forbid_time,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 在拉取用户数据之前，清除非本日登录的信息 
 */
int Cbase_info::clear_overdue_info_before(userid_t user_id)
{
	GEN_SQLSTR(this->sqlstr, "update %s set login_duration = 0, "
		" today_get_money = 0, "
		" online_gift_time = 0 "
		" where user_id = %u ",
		this->get_table_name(user_id),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 在拉取用户数据之后，清除非本日登录的信息 
 */
int Cbase_info::clear_overdue_info_after(userid_t user_id)
{
	GEN_SQLSTR(this->sqlstr, "update %s set login_time = %u "
		" where user_id = %u ",
		this->get_table_name(user_id),
		(uint32_t)time(0),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 更新双倍经验积分剩余时间 
 */
int Cbase_info::update_double_exp_time_left(userid_t user_id, uint32_t change_time)
{
	GEN_SQLSTR(this->sqlstr, "update %s set double_exp_time_left = "
			" if(double_exp_time_left > %u, double_exp_time_left - %u, 0) "
			" where user_id = %u",
			this->get_table_name(user_id),
			change_time,
			change_time,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 检查用户是否存在 
 */
int Cbase_info::check_user(userid_t user_id)
{
	uint32_t create_role_time = 0;
	GEN_SQLSTR(this->sqlstr, "select create_role_time "
		" from %s where user_id = %u",
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR);
		INT_CPY_NEXT_FIELD(create_role_time);
	STD_QUERY_ONE_END_WITHOUT_RETURN();

	//解析create_role_time
	if (create_role_time == 0) { //说明开通过vip
		return USER_ID_NOFIND_ERR;
	}
	return SUCC;
}

/** @brief 获取用户基本信息——网页版
 */
int Cbase_info::get_base_info_web(userid_t user_id, seer2_base_info_web_out *out)
{
	uint64_t map_temp = 0;
	GEN_SQLSTR(this->sqlstr, "select nick, sex, "
		" money, login_time, "
		" forbid_flag, forbid_time, "
		" trainer_scores, title_id, "
		" login_duration, map_id"
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(out->nick, nick_len);
		INT_CPY_NEXT_FIELD(out->sex);
		INT_CPY_NEXT_FIELD(out->money);
		INT_CPY_NEXT_FIELD(out->login_time);
		INT_CPY_NEXT_FIELD(out->forbid_flag);
		INT_CPY_NEXT_FIELD(out->forbid_time);
		INT_CPY_NEXT_FIELD(out->trainer_scores);
		INT_CPY_NEXT_FIELD(out->title_id);
		INT_CPY_NEXT_FIELD(out->login_duration);
		INT_CPY_NEXT_FIELD(map_temp);
		uint32_t temp_id = *(reinterpret_cast<uint32_t *>(&map_temp));
		uint32_t temp_type = *(reinterpret_cast<uint32_t *>(&map_temp) + 1);
		out->map_type = temp_type;
		out->map_id = temp_id;
	STD_QUERY_ONE_END();  
}

/** @brief 获取好友信息——网页版
 */
int Cbase_info::get_friend_info_web(userid_t user_id, seer2_friend_list_web_out *out)
{
	char temp_buf_friend[friends_buf_len];
	GEN_SQLSTR(this->sqlstr, "select friend_list "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_friend, friends_buf_len);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  
		
	//解析friend_list
 	byte_array_t friend_ba(temp_buf_friend, friends_buf_len);
	Ctemp_varlist<uint32_t> temp_friend_list(&(out->friend_list));
	temp_friend_list.read_from_buf(friend_ba);
	return SUCC;
}

/** @brief 获取spt战斗信息——网页版版
 */
int Cbase_info::get_spt_info_web(userid_t user_id, seer2_spt_info_web_out *out)
{
	char temp_buf_spt[spt_buf_len];
	GEN_SQLSTR(this->sqlstr, "select spt_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_spt, spt_buf_len);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  

	//解析spt_info
 	byte_array_t spt_ba(temp_buf_spt, spt_buf_len);
	Ctemp_varlist<spt_info_t> temp_spt_list(&(out->spt_list));
	temp_spt_list.read_from_buf(spt_ba);
	return SUCC;
}

/** @brief 获取gate战斗信息——网页版版
 */
int Cbase_info::get_gate_info_web(userid_t user_id, seer2_gate_info_web_out *out)
{
	char temp_buf_gate[gate_buf_len];
	GEN_SQLSTR(this->sqlstr, "select gate_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_gate, gate_buf_len);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  

	//解析spt_info
 	byte_array_t gate_ba(temp_buf_gate, gate_buf_len);
	Ctemp_varlist<gate_info_t> temp_gate_list(&(out->gate_info));
	temp_gate_list.read_from_buf(gate_ba);
	return SUCC;
}

/** @brief 修改用户昵称——网页版
 */
int Cbase_info::update_nick_web(userid_t user_id, char* nick)
{
	char nick_mysql[mysql_str_len(nick_len)];
	set_mysql_string(nick_mysql, nick, nick_len);
	GEN_SQLSTR(this->sqlstr, "update %s set nick = '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id), nick_mysql, user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 修改用户赛尔豆——网页版
 */
int Cbase_info::update_money_web(userid_t user_id, uint32_t money)
{
	GEN_SQLSTR(this->sqlstr, "update %s set money = %u "
		" where user_id = %u ", 
		this->get_table_name(user_id), money, user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 修改用户基本信息——网页版
 */
int Cbase_info::update_base_info_web(userid_t user_id, seer2_update_base_info_web_in* in)
{
	if (!strncmp(in->field_name, "map", 3)) {
		return this->_update_map_id_web(user_id, in);
	}

	GEN_SQLSTR(this->sqlstr, "update %s set %s = %u "
		" where user_id = %u ", 
		this->get_table_name(user_id), 
		in->field_name,
		in->value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

int Cbase_info::_update_map_id_web(userid_t user_id, seer2_update_base_info_web_in* in)
{
	uint64_t map_temp = 0;
	GEN_SQLSTR(this->sqlstr, "select map_id "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(map_temp);
	STD_QUERY_ONE_END_WITHOUT_RETURN();
	if (!strcmp(in->field_name, "map_type")) {
		*(reinterpret_cast<uint32_t *>(&map_temp) + 1) = in->value; 
	} else if(!strcmp(in->field_name, "map_id")) {
		*(reinterpret_cast<uint32_t *>(&map_temp)) = (uint32_t)in->value; 
	}
	GEN_SQLSTR(this->sqlstr, "update %s set map_id = %lu "
		" where user_id = %u ", 
		this->get_table_name(user_id), 
		map_temp,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}
/** @brief 针对特殊用户，每次登录时电池时间清零 
 */
int Cbase_info::for_special_user(userid_t user_id)
{
	uint32_t user[] = {
		256243833,
		258791727,
		255275187,
		177309790,
		230709859,
		222669200,
		228707156
	};
	uint32_t flag = 0;
	for (size_t i = 0; i < sizeof(user); i++) {
		if (user_id == user[i]) {
			flag = 1;
			break;
		}
	}
	if (flag == 0) {
		return SUCC;
	}
	//特殊用户
	GEN_SQLSTR(this->sqlstr, "update %s set login_duration = 0 "
		" where user_id = %u ",
		this->get_table_name(user_id),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 修改spt信息——网页版 
*/
int Cbase_info::update_spt_web(userid_t user_id, seer2_update_spt_web_in* in)
{
	char temp_buf_spt[spt_buf_len];
	GEN_SQLSTR(this->sqlstr, "select spt_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_spt, spt_buf_len);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  

	if (in->flag == 0) {
		int ret = this->_insert_spt_web(temp_buf_spt, in);
		if (ret != SUCC) {
			return ret;
		}
	} else if (in->flag == 1) {
		this->_update_spt_web(temp_buf_spt, in);
	} else { /* flag == 2 */
		this->_delete_spt_web(temp_buf_spt, in);
	}

	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_spt));
	uint32_t real_len = 4 + count * 5;
	char spt_info_mysql[mysql_str_len(real_len)];
	set_mysql_string(spt_info_mysql, temp_buf_spt, real_len);
	GEN_SQLSTR(this->sqlstr, "update %s set spt_info = '%s' "
			" where user_id = %u",
			this->get_table_name(user_id),
			spt_info_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

int Cbase_info::_insert_spt_web(char* temp_buf_spt, seer2_update_spt_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_spt));
	for (uint32_t i = 0; i < count; i++) {
		uint32_t temp_id = *(reinterpret_cast<uint32_t *>(temp_buf_spt + 4 + i * 5));
		if (temp_id == in->spt_info.spt_id) {
			return  KEY_EXISTED_ERR;
		}
	}
	*(reinterpret_cast<uint32_t *>(temp_buf_spt)) = count + 1;
	*(reinterpret_cast<uint32_t *>(temp_buf_spt + 4 + count * 5)) = in->spt_info.spt_id;
	*(reinterpret_cast<uint8_t *>(temp_buf_spt + 4 + count * 5 + 4)) = in->spt_info.spt_ruler_data;
	return SUCC;
}

void Cbase_info::_update_spt_web(char* temp_buf_spt, seer2_update_spt_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_spt));
	for (uint32_t i = 0; i < count; i++) {
		uint32_t temp_id = *(reinterpret_cast<uint32_t *>(temp_buf_spt + 4 + i * 5));
		if (temp_id == in->spt_info.spt_id) {
			*(reinterpret_cast<uint8_t *>(temp_buf_spt + 4 + i * 5 + 4)) = in->spt_info.spt_ruler_data;
			break;
		}
	}
}

void Cbase_info::_delete_spt_web(char* temp_buf_spt, seer2_update_spt_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_spt));
	for (uint32_t i = 0; i < count; i++) {
		uint32_t temp_id = *(reinterpret_cast<uint32_t *>(temp_buf_spt + 4 + i * 5));
		if (temp_id == in->spt_info.spt_id) {
			*(reinterpret_cast<uint32_t *>(temp_buf_spt)) = count - 1;
			*(reinterpret_cast<uint8_t *>(temp_buf_spt + 4 + i * 5 + 4)) = in->spt_info.spt_ruler_data;
			memcpy(temp_buf_spt + 4 + i * 5, temp_buf_spt + 4 + (i+1) * 5, (count - i + 1) * 5);
			break;
		}
	}
}

/** @brief 更新各门战斗状态信息——网页版 
 */
int Cbase_info::update_gate_web(userid_t user_id, seer2_update_gate_web_in* in)
{
	char temp_buf_gate[gate_buf_len];
	GEN_SQLSTR(this->sqlstr, "select gate_info "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		BIN_CPY_NEXT_FIELD(temp_buf_gate, gate_buf_len);
	STD_QUERY_ONE_END_WITHOUT_RETURN();  

	if (in->flag == 0) {
		int ret = this->_insert_gate_web(temp_buf_gate, in);
		if (ret != SUCC) {
			return ret;
		}
	} else if (in->flag == 1) {
		this->_update_gate_web(temp_buf_gate, in);
	} else { /* flag == 2 */
		this->_delete_gate_web(temp_buf_gate, in);
	}

	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_gate));
	uint32_t real_len = 4 + count * 5;
	char gate_info_mysql[mysql_str_len(real_len)];
	set_mysql_string(gate_info_mysql, temp_buf_gate, real_len);
	GEN_SQLSTR(this->sqlstr, "update %s set gate_info = '%s' "
			" where user_id = %u ",
			this->get_table_name(user_id),
			gate_info_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

int Cbase_info::_insert_gate_web(char* temp_buf_gate, seer2_update_gate_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_gate));
	for (uint32_t i = 0; i < count; i++) {
		uint8_t temp_id = *(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5));
		if (temp_id == in->gate_info.gate_id) {
			return  KEY_EXISTED_ERR;
		}
	}
	*(reinterpret_cast<uint32_t *>(temp_buf_gate)) = count + 1;
	*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + count * 5)) = in->gate_info.gate_id;
	*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + count * 5 + 1)) = in->gate_info.pve_normal_level;
	*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + count * 5 + 2)) = in->gate_info.pve_fifty_level;
	*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + count * 5 + 3)) = in->gate_info.pve_normal_save_level;
	*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + count * 5 + 4)) = in->gate_info.pve_fifty_save_level;
	return SUCC;
}

void Cbase_info::_update_gate_web(char* temp_buf_gate, seer2_update_gate_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_gate));
	for (uint32_t i = 0; i < count; i++) {
		uint8_t temp_id = *(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5));
		if (temp_id == in->gate_info.gate_id) {
			*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5 + 1)) = in->gate_info.pve_normal_level;
			*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5 + 2)) = in->gate_info.pve_fifty_level;
			*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5 + 3)) = in->gate_info.pve_normal_save_level;
			*(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5 + 4)) = in->gate_info.pve_fifty_save_level;
			break;
		}
	}
}

void Cbase_info::_delete_gate_web(char* temp_buf_gate, seer2_update_gate_web_in* in)
{
	uint32_t count = *(reinterpret_cast<uint32_t *>(temp_buf_gate));
	for (uint32_t i = 0; i < count; i++) {
		uint8_t temp_id = *(reinterpret_cast<uint8_t *>(temp_buf_gate + 4 + i * 5));
		if (temp_id == in->gate_info.gate_id) {
			*(reinterpret_cast<uint32_t *>(temp_buf_gate)) = count - 1;
			memcpy(temp_buf_gate + 4 + i * 5, temp_buf_gate + 4 + (i + 1) * 5, (count - i + 1) * 5);
			break;
		}
	}
}

/** @brief 设置活动标志位——网页版 
 */
int Cbase_info::update_activity_flag_web(userid_t user_id, seer2_update_activity_flag_web_in* in)
{
	char temp_buf_flag[activity_buf_len];
	memset(temp_buf_flag, 0, activity_buf_len);//必须清零

	int ret = this->get_activity_flag(user_id, temp_buf_flag);
	if (ret != SUCC) {
		return ret;
	}

	if (in->flag) {
		//设置代表某活动的比特位为1	
		taomee::set_bit_on(temp_buf_flag, in->bit_index);
	} else {
		taomee::set_bit_off(temp_buf_flag, in->bit_index);
	}
	
	char flag_mysql[mysql_str_len(activity_buf_len)];
	set_mysql_string(flag_mysql, temp_buf_flag, activity_buf_len);
	GEN_SQLSTR(this->sqlstr, "update %s set activity_flag = '%s' "
			" where user_id = %u",
			this->get_table_name(user_id),
			flag_mysql,
			user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 获取活动标志位——网页版 
 */
int Cbase_info::get_activity_flag_web(userid_t user_id, uint32_t bit_index, uint8_t& value)
{
	char temp_buf_flag[activity_buf_len];
	memset(temp_buf_flag, 0, activity_buf_len);//必须清零
	int ret = this->get_activity_flag(user_id, temp_buf_flag);
	if (ret != SUCC) {
		return ret;
	}

	value = taomee::test_bit_on(temp_buf_flag, bit_index);
	return SUCC;
}

/** @brief 设置用户状态标志位
 */
int Cbase_info::set_bit_flag(userid_t user_id, const char* field_name, uint8_t bit_index, uint8_t true_or_false)
{
	uint32_t temp_flag = (1 << (bit_index-1));
	if (true_or_false) {
		//bit位设置为1
		GEN_SQLSTR(this->sqlstr, "update %s set %s = %s | %u "
				" where user_id = %u ",
				this->get_table_name(user_id), 
				field_name, field_name,
				temp_flag,
				user_id);
	} else {
		//bit位设置为0
		GEN_SQLSTR(this->sqlstr, "update %s set %s = %s & %u "
				" where user_id = %u ",
				this->get_table_name(user_id), 
				field_name, field_name,
				~temp_flag,
				user_id);
	}

	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 检查用户是否登记召集活动
 */
int Cbase_info::check_call_qualification(userid_t user_id, uint8_t& flag)
{
	uint32_t state_flag = 0;
	int ret = get_int_value(user_id, "state_flag", &state_flag);
	if (ret != SUCC) {
		return ret;
	}

	this->_check_state_flag(user_id, state_flag, type_call_bit, flag);
	return ret;
}

/** @brief 检查state_flag某bit位是否为1
 */
void Cbase_info::_check_state_flag(userid_t user_id, uint32_t state_flag, uint8_t bit_index, uint8_t& flag)
{
	uint32_t temp_flag = (1 << (bit_index-1));
	if (state_flag & temp_flag) {
		flag = 1;
	} else {
		flag = 0;
	}
}

/** @brief 记录召集人米米号
 */
int Cbase_info::set_call_id(userid_t user_id, uint32_t call_id)
{
	GEN_SQLSTR(this->sqlstr, "update %s set call_id = %u "
			" where user_id = %u ",
			this->get_table_name(user_id), 
			call_id,
			user_id);

	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 更新捕鱼列表
 */
int Cbase_info::update_fish_list(userid_t user_id, std::vector<uint32_t>& fish_list)
{
	byte_array_t ba_w;
	Ctemp_varlist<uint32_t> temp_list_w(&fish_list);
	temp_list_w.write_to_buf(ba_w);
	char fish_buf_mysql[mysql_str_len(ba_w.get_postion())];
	set_mysql_string(fish_buf_mysql, ba_w.get_buf(), ba_w.get_postion());
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" fish_list =  '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		fish_buf_mysql,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR );	
}

/** @brief 更新vip基础信息——运营部门接口
 *  @note 前面优惠活动找不到用户记录，不直接返回，会在后面代码中新增记录
 */
int Cbase_info::update_vip_info_outside(userid_t user_id, seer2_update_vip_info_outside_in* in)
{
	int ret = 0;
	if (in->flag > 0 && in->flag < 4) { //vip充值
		//优惠充值，幸运标签活动
		ret = this->_vip_lucky_gift(user_id);
		if (ret != SUCC && ret != USER_ID_NOFIND_ERR) {
			return ret;
		}

		//优惠充值2012.2.17-2012.3.15 23:00
		//手机用户不参与这个活动
		uint32_t current_time = time(0);
		//if (current_time > 1329408000 && current_time < 1331823600 && in->last_charge_chnl_id != 18) {
		if (current_time > 0 && current_time < 1331823600 && in->last_charge_chnl_id != 18) {
			ret = this->_vip_recharge_gift(user_id, in->months);
			if (ret != SUCC && ret != USER_ID_NOFIND_ERR) {
				return ret;
			}
		}
	}

	//更新信息
	ret = this->_add_vip_info(user_id, in);
	if (ret != SUCC) {
		return ret;
	}

	return ret;
}

/** @brief vip充值活动
 */
int Cbase_info::_vip_recharge_gift(userid_t user_id, uint32_t total_months)
{
	uint32_t old_total_months = 0;
	int ret = this->get_int_value(user_id, "vip_total_months", &old_total_months);
	if (ret != SUCC) {
		return ret;
	}
	ret = this->_update_vip_recharge_gift_count(user_id, total_months - old_total_months);
	if (ret != SUCC) {
		return ret;
	}
	ret = this->set_bit_flag(user_id, "offline_flag", type_hand_bit, true);
	return ret;
}

/** @brief 更新vip基础信息
 */
int Cbase_info::_add_vip_info(userid_t user_id, seer2_update_vip_info_outside_in* in)
{
	int ret = this->_update_vip_info(user_id, in);
	if (ret != USER_ID_NOFIND_ERR) {
		return ret;
	}
	//没有用户记录，则新增记录，并插入vip信息
	return this->_insert_vip_info(user_id, in);
}

/** @brief 更新vip基础信息
 */
int Cbase_info::_update_vip_info(userid_t user_id, seer2_update_vip_info_outside_in* in)
{
	uint8_t vip = 0;
	uint32_t old_total_months = 0;
	int ret = this->_get_vip_info(user_id, vip, old_total_months);
	if (ret != SUCC) {
		return ret;
	}

	if (in->flag == 0) {
		vip = 0;
	} else if (in->flag < 4) {
		vip = 1;
	} //in->flag == 4 vip保持不变

	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" vip = %u, " 
		" vip_flag = %u, " 
		" vip_total_months = %u, "
		" vip_start_time = %u, "
		" vip_end_time = %u, "
		" vip_type = %u, "
		" vip_months = %u, "
		" state_flag = state_flag | %u "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		vip,
		in->flag,
		in->months,
		in->vip_begin_time,
		in->vip_end_time,
		in->vip_type,
		in->months - old_total_months,
		2,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 新增用户记录，并更新vip基础信息
 */
int Cbase_info::_insert_vip_info(userid_t user_id, seer2_update_vip_info_outside_in* in)
{
	uint8_t vip = 0;
	if (in->flag > 0 && in->flag < 4) {
		vip = 1;
	}

	GEN_SQLSTR(this->sqlstr, "insert into %s "
		" (user_id, vip, vip_flag, vip_total_months, vip_months, vip_start_time, vip_end_time, vip_type, state_flag) "
		" values (%u, %u, %u, %u, %u, %u, %u, %u, 2)",
		this->get_table_name(user_id),
		user_id,
		vip,
		in->flag,
		in->months,
		in->months,
		in->vip_begin_time,
		in->vip_end_time,
		in->vip_type);
	return this->exec_insert_sql(this->sqlstr, KEY_EXISTED_ERR);
}

/** @brief vip充值优惠活动
 */
int Cbase_info::_vip_lucky_gift(userid_t user_id)
{
	uint32_t lucky_start_time = 0;
	int ret = this->get_int_value(user_id, "lucky_start_time", &lucky_start_time);
	if (ret != SUCC) {
		return ret;
	}

	if (lucky_start_time && is_in_7days(lucky_start_time)) {
		ret = this->set_bit_flag(user_id, "offline_flag", type_lucky_bit, true);
	}

	return ret;
}

/** @brief 拉取用户vip类型和开通月数
 */
int Cbase_info::_get_vip_info(userid_t user_id, uint8_t& vip, uint32_t& total_months)
{
	GEN_SQLSTR(this->sqlstr, "select vip, vip_total_months "
		" from %s where user_id = %u",
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR);
		INT_CPY_NEXT_FIELD(vip);
		INT_CPY_NEXT_FIELD(total_months);
	STD_QUERY_ONE_END();
}

/** @brief 更新vip的积分信息——运营部门接口
 *  @note 前面优惠活动找不到用户记录，不直接返回，会在后面代码中新增记录
 */
int Cbase_info::update_points_outside(userid_t user_id, seer2_update_vip_points_outside_in* in)
{
	uint32_t vip_points = 0;
	uint32_t current_vip_base_points = 0;
	int ret = this->get_vip_total_points(user_id, vip_points, current_vip_base_points);
	if (ret != SUCC && ret != USER_ID_NOFIND_ERR) {
		return ret;
	}

	uint32_t temp_add_points = 0;
	if (in->add_points > current_vip_base_points) {
		temp_add_points = in->add_points - current_vip_base_points;
	}

	GEN_SQLSTR(this->sqlstr, "insert into %s (user_id, vip_points, vip_base_points)"
		" values (%u, %u, %u) on duplicate key update " 
		" vip_points = vip_points + values(vip_points), "
		" vip_base_points = values(vip_base_points) ", 
		this->get_table_name(user_id),
		user_id,
		temp_add_points,
		in->add_points);
	return this->exec_update_sql(this->sqlstr, SUCC);	
}

/** @brief 更新试用vip时间
 */
int Cbase_info::update_vip_try_time(userid_t user_id, uint32_t vip_try_time)
{
	GEN_SQLSTR(this->sqlstr, "update %s set "
		" vip_try_time = %u "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		vip_try_time,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取用户vip积分相关信息
 */
int Cbase_info::get_vip_level_by_vip_info(userid_t user_id, uint8_t& vip_level)
{
	uint8_t was_vip = 0;
	uint32_t state_flag = 0;
	uint32_t vip_points = 0;
	uint32_t vip_try_time = 0;
	GEN_SQLSTR(this->sqlstr, "select "
		" state_flag, vip_points, vip_try_time "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR);
		INT_CPY_NEXT_FIELD(state_flag);
		INT_CPY_NEXT_FIELD(vip_points);
		INT_CPY_NEXT_FIELD(vip_try_time);
	STD_QUERY_ONE_END_WITHOUT_RETURN();
	this->_check_state_flag(user_id, state_flag, type_was_vip_bit, was_vip);
	vip_level = get_vip_level_by_points(vip_points, was_vip, vip_try_time);
	return SUCC;
}

/** @brief 添加装备能量球时间
 */
int Cbase_info::update_energy_ball_time(userid_t user_id)
{
	uint32_t equip_time = time(0);
	char temp_buf[energy_ball_buf_len];
	int ret = _get_single_buf(user_id, "vip_energy_ball_time", temp_buf, energy_ball_buf_len);
	if (ret != SUCC) {
		return ret;
	}

	uint32_t count = *(reinterpret_cast<uint32_t*>(temp_buf));
	if (count >= energy_ball_max_num) { //能量球达到存储上限
		return db_err_energy_ball_too_much;
	}
	*(reinterpret_cast<uint32_t*>(temp_buf)) += 1;  //count
	memcpy(temp_buf + 4 + count * 4, reinterpret_cast<char *>(&equip_time), 4);
	
	//处理不能识别的字符串
	uint32_t real_len = 4 + (*(reinterpret_cast<uint32_t*>(temp_buf))) * 4;
	char temp_buf_sql[mysql_str_len(real_len)];
	set_mysql_string(temp_buf_sql, temp_buf, real_len);
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" vip_energy_time =  '%s' "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		temp_buf_sql,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);
}

/** @brief 判断是否是vip或者试用vip
 *  @return was_vip为1表示曾经是vip，现在不是vip
 */
int Cbase_info::is_vip_or_temp_vip(userid_t user_id, int& vip_or_temp_vip, uint8_t& was_vip_or_temp_vip)
{
	uint8_t vip = 0;
	uint32_t vip_try_time = 0;
	uint32_t state_flag = 0;
	GEN_SQLSTR(this->sqlstr, "select "
		" vip, vip_try_time, state_flag "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), 
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR);
		INT_CPY_NEXT_FIELD(vip);
		INT_CPY_NEXT_FIELD(vip_try_time);
		INT_CPY_NEXT_FIELD(state_flag);
	STD_QUERY_ONE_END_WITHOUT_RETURN();

	//vip或试用vip
	vip_or_temp_vip = (vip || is_in_7days(vip_try_time));

	//曾经开通过vip或试用vip,现在不是vip
	was_vip_or_temp_vip = false;
	if (!vip_or_temp_vip) {
		uint8_t was_vip = false;
		this->_check_state_flag(user_id, state_flag, type_was_vip_bit, was_vip);
		was_vip_or_temp_vip = (was_vip || vip_try_time);
	}
	
	return SUCC;
}

/** @brief 判断送vip物品的天数 
 *  @note 如果vip开通时间小于上次登录时间，按上次登录时间计算
 *  @note 如果上次登录时间小于vip开通时间，按vip开通时间计算
 *  @return days,返回天数
 */
int Cbase_info::decide_vip_days(userid_t user_id, int32_t& days, uint8_t& need_to_give, int32_t& days_1, uint8_t& need_to_give_1)
{
	uint32_t last_login_time = 0;
	uint8_t vip = 0;
	uint32_t vip_begin_time = 0;
	uint32_t vip_end_time = 0;
	uint32_t vip_try_time = 0;
	uint32_t temp_rawtime = 0;
	uint32_t current_time = time(0);
	GEN_SQLSTR(this->sqlstr, "select last_login_time, "
		" vip, vip_start_time, vip_end_time, vip_try_time "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 
		INT_CPY_NEXT_FIELD(last_login_time);
		INT_CPY_NEXT_FIELD(vip);
		INT_CPY_NEXT_FIELD(vip_begin_time);
		INT_CPY_NEXT_FIELD(vip_end_time);
		INT_CPY_NEXT_FIELD(vip_try_time);
    STD_QUERY_ONE_END_WITHOUT_RETURN();

	//vip生效日算vip，到期日不算
	if (vip) { //目前是正式vip
		temp_rawtime = (last_login_time >= vip_begin_time ? last_login_time : vip_begin_time);
		if (last_login_time >= vip_begin_time) {
			temp_rawtime += 24*3600;
		}
	} else if (is_in_7days(vip_try_time)) { //目前是试用vip
		temp_rawtime = (last_login_time >= vip_try_time ? last_login_time : vip_try_time);
		if (last_login_time >= vip_try_time) {
			temp_rawtime += 24*3600;
		}
	} else { //目前不是vip
		uint32_t vip_try_end_time = vip_try_time + 7*24*3600;
		uint32_t temp_start_time_1 = (vip_begin_time > vip_try_time ? vip_begin_time : vip_try_time);
		uint32_t temp_end_time = (vip_end_time > vip_try_end_time ? vip_end_time : vip_try_end_time);
		temp_rawtime = (last_login_time > temp_end_time ? last_login_time : temp_end_time);

		//vip到期后分隔数日之后，再登录情况
		if (last_login_time < temp_end_time && (get_date(last_login_time) != get_date(temp_end_time))) {
			uint32_t temp_rawtime_1 = (temp_start_time_1 > last_login_time ? temp_start_time_1 : last_login_time);
			days_1 = distance_days_1(temp_rawtime_1, temp_end_time - 1); //必要减一
			need_to_give_1 = 1;
		}
	}

	//一天登录多次，中间开通vip情况
	if (last_login_time < vip_begin_time && (get_date(last_login_time) == get_date(current_time))) {
		need_to_give = 1;
	}
	days = distance_days(temp_rawtime);
	return SUCC;
}

/** @brief 修改上一次登录时间
 */
int Cbase_info::update_last_login_time(userid_t user_id)
{
	GEN_SQLSTR(this->sqlstr, "update %s set "
		" last_login_time = %u "
		" where user_id = %u ",
		this->get_table_name(user_id),
		uint32_t(time(0)),
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取vip用户的积分
 */
int Cbase_info::get_vip_total_points(userid_t user_id, uint32_t& vip_points, uint32_t& vip_base_points)
{
	GEN_SQLSTR(this->sqlstr, "select "
		" vip_points, vip_base_points "
		" from %s where user_id = %u", 
		this->get_table_name(user_id), user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, USER_ID_NOFIND_ERR); 	
		INT_CPY_NEXT_FIELD(vip_points);
		INT_CPY_NEXT_FIELD(vip_base_points);
	STD_QUERY_ONE_END();
}

/** @brief 获取vip用户的总能量格数
 */
int Cbase_info::get_vip_total_energy_num(userid_t user_id, uint32_t& total_energy_num)
{
	uint32_t total_points = 0;
	uint32_t temp_vip_base_points = 0;
	int ret = this->get_vip_total_points(user_id, total_points, temp_vip_base_points);
	if (ret != SUCC) {
		return ret;
	}

	total_energy_num = get_energy_num_by_points(total_points);
	return SUCC;
}

/** @brief 修改用户vip充值优惠活动信息
 */
int Cbase_info::update_vip_lucky_info(userid_t user_id, userinfo_baseinfo_update_lucky_info_in* in)
{
	GEN_SQLSTR(this->sqlstr, "update %s set "
		" lucky_start_time = %u, "
		" lucky_user_type = %u "
		" where user_id = %u ", 
		this->get_table_name(user_id), 
		in->lucky_start_time, 
		in->lucky_user_type,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 更新vip充值礼包可领取数量
 */
int Cbase_info::_update_vip_recharge_gift_count(userid_t user_id, uint32_t add_value)
{
	GEN_SQLSTR(this->sqlstr, "update %s set " 
		" vip_recharge_gift_count = vip_recharge_gift_count + %u "
		" where user_id = %u ", 
		this->get_table_name(user_id),
		add_value,
		user_id);
	return this->exec_update_sql(this->sqlstr, USER_ID_NOFIND_ERR);	
}

/** @brief 获取用户的最近一次登录时间和下线时间
 */
int Cbase_info::get_last_login_logout_time(userid_t user_id, uint32_t& login_time, uint32_t& logout_time)
{
	GEN_SQLSTR(this->sqlstr, "select last_login_time, logout_time "
		" from %s where user_id = %u", 
		this->get_table_name(user_id),
		user_id);
	STD_QUERY_ONE_BEGIN(this->sqlstr, SUCC); 
		INT_CPY_NEXT_FIELD(login_time);
		INT_CPY_NEXT_FIELD(logout_time);
	STD_QUERY_ONE_END();
}
