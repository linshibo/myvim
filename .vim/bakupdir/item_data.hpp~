#ifndef _ITEM_DATA_HPP_
#define _ITEM_DATA_HPP_

#include<map>
#include<vector>


using namespace std;

enum {
	none_equip_pos = 0,
	head_equip_pos = 100000,    //头部
	eye_equip_pos,              //表情
	glass_equip_pos,            //饰品
	body_equip_pos,             //时装
	tail_equip_pos,             //背饰
	suit_equip_pos              //套装
};

#define CHEKC_VALID_EQUIP_POS( pos )  \
	(pos >= head_equip_pos && pos <= suit_equip_pos)

enum {
	task_item_category = 1<<0,   		//任务道具
	equip_item_category = 1<<1, 		//装备类
	consume_item_category = 1<<2,		//消耗类
	formula_item_catetory = 1<<3,		//配方材料
	material_item_catetory = 1<<4,		//材料类
	nomarl_item_catetory  = 1<<5,       //普通物品
	static_period_item_catetory = 1<<6, //不能修改有效期的物品
	dynamic_period_item_catetory = 1<<7 //可以修改有效期的物品
};

enum {
    item_disapear_period = 86400 *3     //物品过期多久不显示
};

enum {
	normal_buy_flag  = 1<< 0,
	normal_sell_falg = 1<< 1,
	vip_buy_flag     = 1<< 2,
	vip_sell_flag    = 1<< 3
};

enum {
	discard_flag = 1<< 0,
	destroy_flag = 1<< 1
};


struct item_effect_t {
    item_effect_t()
    {
        effect_id = 0;
        memset(effect_value, 0, sizeof(effect_value));
    }

    uint32_t effect_id;
    uint32_t effect_value[2];
};

typedef struct item_data {
	item_data()
    {
        item_id_ = 0;
        memset(name_, 0, sizeof(name_));
        category_ = 0;
        sell_price_ = 0;
        buy_price_ = 0;
        discard_flag_ = 0;
        trade_flag_ = 0;
        accumulate_ = 0;
        max_num_ = 0;
        equip_pos_ = 0;
        duration_time_ = 0;
        end_time_ = 0;
        
        on_sale_ = 0;
        medal_price_ = 0;
        bean_price_ = 0;

        magic_ = 0;
        agility_ = 0;
        luck_ = 0;
        strength_ = 0;
        crit_ = 0;
        crit_damage_ = 0;
        physique_ = 0;
        tenacity_ = 0;
        hp_ = 0;
        atk_ = 0;
        def_ = 0;

    }
    
    //配合商城表 后续读表设置这几个值
    void set_on_sale()
    {
        on_sale_ = 1;
    }

    void set_medal_price(uint32_t price)
    {
        medal_price_ = price;
    }

    void set_bean_price(uint32_t price)
    {
        bean_price_ = price;
    }

	bool check_trade_flag(uint32_t flag)
	{
		return trade_flag_ & flag;	
	}

    bool check_on_sale()
    {
        return on_sale_;
    }

    uint32_t get_medal_price()
    {
        return medal_price_;
    }

    uint32_t get_bean_price()
    {
        return bean_price_;
    }

	bool check_discard_flag(uint32_t flag)
	{
		return discard_flag_ & flag;	
	}

	bool check_category_flag(uint32_t flag)
	{
		return category_ & flag;	
	}

	bool check_accumulate()
	{
        if (accumulate_ == 1) return true;
        return false;
	}

	bool check_category(uint32_t cat)
	{
		return category_ & cat;
	}

    item_effect_t * get_item_effect()
    {
        return &effect;
    }
	
	uint32_t item_id_;       //物品ID
	uint32_t name_[1024];    //物品名字
	uint32_t category_;	 	 //类别 见XML
	uint32_t sell_price_; 	 //卖出金币价格
	uint32_t buy_price_;   	 //买入金币价格
	uint32_t discard_flag_;  //丢弃FLAG
	uint32_t trade_flag_;    //交易FLAG
	uint32_t accumulate_;    //是否可堆叠
	uint32_t max_num_;       //最大拥有量
	uint32_t equip_pos_;     //装备位置
	uint32_t duration_time_; //有效期时间段
	uint32_t end_time_;      //有效期时间点

    //商城相关数据
    uint8_t  on_sale_;           //上架中与否 0 否 1上架
    uint32_t medal_price_;       //勋章买入价格 
    uint32_t bean_price_;        //豌豆买入价格

	uint32_t magic_;            //附加魔力
	uint32_t agility_;          //附加敏捷
	uint32_t luck_;             //附加幸运
	uint32_t strength_;         //附加体力
	uint32_t crit_;             //附加暴击率
	uint32_t crit_damage_;      //附加暴击伤害
	uint32_t physique_;         //附加体质
	uint32_t tenacity_;         //附加韧性
	uint32_t hp_;               //附加血量
	uint32_t atk_;              //附加攻击
	uint32_t def_;              //附加防御

    item_effect_t effect;
}item_data;


class item_data_mgr {
private:
	item_data_mgr(){}
	~item_data_mgr(){}
public:
	static item_data_mgr* get_instance();
public:
	bool init_xml(const char* xml);
	bool final();
	bool add_item_data(item_data* data);
	bool del_item_data(uint32_t item_id);
	bool is_item_data_exist(uint32_t item_id);
	item_data* get_item_data_by_id(uint32_t item_id);
private:
	std::map<uint32_t, item_data*> data_maps;
};


class item {
public:
	item(uint64_t id, uint32_t item_id, uint32_t total_count, uint32_t dress_pos, uint32_t get_time, uint32_t expire_time, uint8_t expired);
	~item();
public:
	void to_next(item* p_item)
	{
		p_next_item = p_item;	
	}
	void to_prev(item* p_item)
	{
		p_prev_item = p_item;
	}
	void clear_to_item()
	{
		if(p_prev_item == NULL && p_next_item == NULL) {//唯一节点
            ;
		} else if (p_prev_item != NULL && p_next_item != NULL) {//中间结点
			item* prev = p_prev_item;
			item* next = p_next_item;

			prev->to_next(next);
			next->to_prev(prev);

			p_prev_item = NULL;
			p_next_item = NULL;
		} else if (p_prev_item == NULL && p_next_item != NULL) {//头结点
			p_next_item->p_prev_item = NULL;
			p_next_item = NULL;
		} else {//尾结点
			p_prev_item->p_next_item = NULL;
			p_prev_item = NULL;
		}
	}
	item*    p_next_item;       //指向包裹内下个相同的堆叠物品	
	item*    p_prev_item;       //指向包裹内上个相同的堆叠物品
public:

    uint64_t get_id()
    {
        return id_;
    }

	uint32_t get_item_id()
	{
		return p_data->item_id_;
	}

	uint32_t get_equip_pos()
	{   //对于装备的item 返回装备可装饰在角色身上的位置
		return p_data->equip_pos_;	
	}

	uint32_t get_dress_pos()
	{   //对于装备的item 返回装备目前装饰在角色身上的位置
		return dress_pos_;	
	}

	void set_dress_pos(uint32_t pos)
	{
		dress_pos_ = pos;	
	}

	uint32_t get_cur_total_count()
	{
		return cur_total_count_;	
	}

	void inc_cur_total_count(uint32_t count)
	{
		cur_total_count_ += count;
	}

	bool dec_cur_total_count(uint32_t count)
	{
		if(cur_total_count_ >= count) {
			cur_total_count_ -= count;
			return true;
		}
		return false;
	}

    uint32_t get_expire_time()
	{
		return expire_time_;
	}
    
	void set_expire_time(uint32_t time)
	{
		expire_time_ = time;	
	}

    bool is_item_expired()
    {
        if (expired_ == 1) return true;
        return false;
    }

    void set_item_expired()
    {
        expired_ = 1;
    }

	uint32_t get_get_time()
	{
		return get_time_;	
	}

    void set_get_time(uint32_t time)
    {
        get_time_ = time;
    }

	item_data* get_item_data()
	{
		return p_data;	
	}

	uint32_t get_item_magic()
	{
		return p_data->magic_;	
	}

	uint32_t get_item_agility()
	{
		return p_data->agility_;
	}

	uint32_t get_item_luck()
	{
		return p_data->luck_;	
	}

	uint32_t get_item_strength()
	{
		return p_data->strength_;	
	}

	uint32_t get_item_crit()
	{
		return p_data->crit_;	
	}

	uint32_t get_item_crit_damage()
	{
		return p_data->crit_damage_;	
	}

	uint32_t get_item_physique()
	{
		return p_data->physique_;	
	}

	uint32_t get_item_tenacity()
	{
		return p_data->tenacity_;	
	}
	uint32_t get_item_hp()
	{
		return p_data->hp_;	
	}

	uint32_t get_item_atk()
	{
		return p_data->atk_;	
	}

	uint32_t get_item_def()
	{
		return p_data->def_;	
	}

	//void copy_item_attr(obj_attr &obj)
    //{
        ////obj.attr_arr[OBJ_ATTR_HP] = p_data->hp_;
        ////obj.attr_arr[OBJ_ATTR_EXP] = 0;
        ////obj.attr_arr[OBJ_ATTR_LEVEL] = 0;
        ////obj.attr_arr[OBJ_ATTR_MAGIC] = p_data->magic_;
        ////obj.attr_arr[OBJ_ATTR_AGILITY] = p_data->agility_;
        ////obj.attr_arr[OBJ_ATTR_LUCK] = p_data->luck_;
        ////obj.attr_arr[OBJ_ATTR_ANGER] = 0;
        ////obj.attr_arr[OBJ_ATTR_STRENGTH] = p_data->strength_;
        ////obj.attr_arr[OBJ_ATTR_ATK] = p_data->atk_;
        ////obj.attr_arr[OBJ_ATTR_DEF] = p_data->def_;
        ////obj.attr_arr[OBJ_ATTR_HAPPY] = 0;
        ////obj.attr_arr[OBJ_ATTR_SOUL] = 0;
        ////obj.attr_arr[OBJ_ATTR_INTENSITY] = 0;
        ////obj.attr_arr[OBJ_ATTR_CRIT] = p_data->crit_;
        ////obj.attr_arr[OBJ_ATTR_DOUBLE] = 0;
        ////obj.attr_arr[OBJ_ATTR_SPEED] = 0;
        ////obj.attr_arr[OBJ_ATTR_CRIT_DAMAGE] = p_data->crit_damage_;
        ////obj.attr_arr[OBJ_ATTR_TENACITY] = p_data->tenacity_;
        ////obj.attr_arr[OBJ_ATTR_PHYSIQUE] = p_data->physique_;
        ////obj.attr_arr[OBJ_ATTR_FIGHT_ABILITY] = 0;

    //}

public:
	uint64_t id_;               //唯一ID
	uint32_t cur_total_count_;   //当前堆叠数量
	uint32_t dress_pos_;        //装备在角色身上的位置 默认为0表示未装饰(或非装备)
	uint32_t get_time_;         //获取时间
	uint32_t expire_time_;      //过期时间，永久为0
	uint8_t hide;				//物品隐藏属性1隐藏，0显示
    uint8_t expired_;            //是否已经过期
	item_data* p_data;
};

typedef item* item_ptr;

class item_factory {
private:
	item_factory(){}
	~item_factory(){}
public:
	static item_factory* get_instance();
public:
	item*	create_item(uint64_t id, uint32_t item_id, uint32_t total_count, uint32_t dress_pos, uint32_t get_time, uint32_t expire_time, uint8_t expired);
	void	destroy_item(item* p_item);
};

#endif
