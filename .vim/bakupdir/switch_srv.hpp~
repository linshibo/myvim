/**
 * =====================================================================================
 *
 *       Filename:  switch_srv.hpp
 *
 *    Description: main interface and event proc function for switchserv  
 *
 *        Version:  1.0
 *        Created:  08/11/2010 11:40:50 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  PLus (), plus@tamoee.com
 *        Company:  taomee.inc SH
 *
 * =====================================================================================
 */
#ifndef SWITCHSERV_HPP
#define SWITCHSERV_HPP

#include <map>
#include <list>
#include <vector>
#include <set>

extern "C" {
#include <libtaomee/log.h>
#include <async_serv/net_if.h>
#include <libtaomee/conf_parser/config.h>
}
#include <libtaomee++/event/event_mgr.hpp>

#include "singleton.hpp"
#include "dispatch.hpp"
#include "stat_log.hpp"
#include "../proto/ultraman_switch.h"
#include "../proto/ultraman_online_enum.h"

using namespace taomee;
#define IP_SIZE 16
enum {
	recommend_svr_num = 10,	/*推荐服务器的个数*/
	max_online_num = 2000,	/*online服务器的最大个数*/
	max_get_online_num = 100,	/*home服务器的最大个数*/
	interval_keepalive	= 70,
	interval_get_recommended_svr = 150,
	interval_get_usr_num	= 40,
};

typedef std::vector<uint16_t> olid_set_t;   

#pragma pack(1)

/** @brief online服务器相关信息
 */
struct online_info_t {
	uint16_t online_id; /* online编号 */
	char     online_ip[IP_SIZE]; /* online ip地址 */
	uint16_t online_port; /* online端口号 */
	uint32_t user_num; /* online上在线人数 */
	fdsession_t * m_fdsess;
	int last_active_time; /*online最近一次通讯时间*/
};


#pragma pack()

/**
 * @brief 排序方式，按人数升序
 */
class Sort_type {
public:
	bool operator() (online_info_t& x1, online_info_t& x2)
	{
		return x1.user_num <= x2.user_num;
	}
};

/**
 * @brief 排序方式，按online_id升序
 */
class Sort_type_ex {
public:
	bool operator() (online_info_t& x1, online_info_t& x2)
	{
		return x1.online_id < x2.online_id;
	}
};
typedef struct user_info {
	uint32_t online_id;
	uint32_t role_tm;//角色创建时间
} user_info_t ;

class AreaServ:public EventableObject{
	public:
		AreaServ(uint16_t areaid){
			aid=areaid;	
		}
		~AreaServ(){}
		void clear_online_info_by_FD(int fd);
		void clear_online_info_by_ID(uint16_t online_id);
	
		uint16_t find_onlineid_by_uid( userid_t uid);
		online_info_t & find_online_by_FD(int fd);
		online_info_t & find_online_by_ID(uint16_t online_id);
		online_info_t* kick_user_off(uint32_t uid);
		online_info_t & get_online_by_recommond(uint32_t);
		user_info_t & get_userinfo_by_uid(uint32_t uid);
		//区域服务器id
		uint16_t aid;
		//区域服务器总人数
		uint32_t user_num;
		/*存放推荐的服务器id的set*/
		std::vector<uint16_t> recommend_svrs_set;
		//userid 索引，存储用户信息	
		std::map<uint32_t,user_info_t>	userinfo;

		/*所有正常工作online的信息的链表*/	
		std::list<online_info_t> online_info;
	
		/*以online id为索引，存每个online的在线人员list*/
		typedef std::list<userid_t> online_user_list;
		std::map<uint16_t, online_user_list> online_user_info;
};

class SwitchServ:public EventableObject, public Singleton<SwitchServ> {
public:
	SwitchServ(){}
 	~SwitchServ(){}
	void init();
	void fini();
	void proc_event();
	void close_online(int fd);
	int  kick_user_off(uint16_t areaid,uint32_t uid, uint32_t seq, uint32_t reason);
	
	bool check_area_serv(uint16_t area_id);
	int handle_recommend_svr_list(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_register_online(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_get_ranged_svrlist(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_online_keepalive(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_chat_across_svr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_user_login_online(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_user_logout_online(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_check_users_onoff(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	int handle_transmit(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_send_msg_to_onlines(svr_proto_header_t* head, Cmessage* c_in, uint16_t cmd);
	//int handle_send_admin_msg_to_usr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_legion_info_across_svr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_send_info_across_svr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_send_vip_info_to_usr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_send_vip_points_to_usr(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);
	//int handle_do_some_sth(svr_proto_header_t* head, Cmessage* c_in, fdsession_t* fdsess);


private:
	int get_total_usr_num_event();
	int get_recommend_svr_event();
	int keep_online_alive_event();

	int send_error_to_online(fdsession_t *fdsess,uint16_t areaid,uint32_t uid, uint16_t cmd,uint32_t err);
	void clear_online_info_by_FD(int fd);
	AreaServ* get_area_serv(uint16_t area_id);
	online_info_t & find_online_by_FD(int fd);
	void set_svr_proto_head(svr_proto_header_t *hdr, userid_t uid, uint32_t pkglen, 
							uint32_t seq, uint16_t cmd, uint32_t ret, uint16_t areaid);

	void clear_dead_onlines();

private:
	/* 每个online上最大人数 */
	uint32_t user_num_limit;
	userid_t max_usr_id ;
	//保存所有的区域服务器 aserver即一个分区  分区之间数据不通  但共用同一个switch
	std::map<uint16_t,AreaServ*> aserver;
	//以fd为索引  保存对应的区域服务器
	std::map<int, AreaServ*> fdmap;
	EventMgr emgr;
	/*事件:定时(70秒)获取推荐服务器列表*/
	TimedEvent *alive_event;
	/*事件:定时(150秒)获取推荐服务器列表*/
	TimedEvent *svr_event;
	/*事件:定时(40秒)获取总在线人数*/
	TimedEvent *usr_num_event;
};

#define sSwitch SwitchServ::get_singleton()

#endif



