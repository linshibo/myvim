# -*- coding: utf-8 -*-

hexchars="0123456789ABCDEF"
def dit2hex(ch):
	i=ord(ch) # get its integral value.
	leftnib=i>>4
	rightnib=i & 0xf
	leftchar=hexchars[leftnib]
	rightchar=hexchars[rightnib]
	return leftchar+rightchar+" "
	
def bin2hex(str):
	retvalue=""  # return value is empty until we add to it...
	for s in str:
		hexchars=dit2hex(s)
		retvalue=retvalue+hexchars
		pass
	return retvalue

		
class nest_atk_info_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint8
	public fantan_ret;

	/*  */
	#类型:uint32
	public atk_type;

	/*  */
	#类型:uint8
	public atk_level;

	/* 增加多少hp */
	#类型:uint16
	public add_hp;

	/*  */
	#类型:uint16
	public fantan_hp;

	/*  */
	#类型:uint16
	public fantan_mp;

	/*  */
	#类型:uint32
	public use_itemid;

	/*  */
	#类型:uint32
	public atk_uid;

	/*  */
	#类型:uint32
	public atk_petid;

	/*  */
	#类型:uint8
	public huwei_pos;

	/*  */
	#类型:uint64
	public fightee_state;

	/*  */
	#类型:uint16
	public hurt_hp;

	/*  */
	#类型:uint16
	public hurt_mp;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.fantan_ret=ba.read_uint8();
		if ( self.fantan_ret== None): return False;
		self.atk_type=ba.read_uint32();
		if ( self.atk_type== None): return False;
		self.atk_level=ba.read_uint8();
		if ( self.atk_level== None): return False;
		self.add_hp=ba.read_uint16();
		if ( self.add_hp== None): return False;
		self.fantan_hp=ba.read_uint16();
		if ( self.fantan_hp== None): return False;
		self.fantan_mp=ba.read_uint16();
		if ( self.fantan_mp== None): return False;
		self.use_itemid=ba.read_uint32();
		if ( self.use_itemid== None): return False;
		self.atk_uid=ba.read_uint32();
		if ( self.atk_uid== None): return False;
		self.atk_petid=ba.read_uint32();
		if ( self.atk_petid== None): return False;
		self.huwei_pos=ba.read_uint8();
		if ( self.huwei_pos== None): return False;
		self.fightee_state=ba.read_uint64();
		if ( self.fightee_state== None): return False;
		self.hurt_hp=ba.read_uint16();
		if ( self.hurt_hp== None): return False;
		self.hurt_mp=ba.read_uint16();
		if ( self.hurt_mp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint8(self.fantan_ret)):return False;
		if ( not ba.write_uint32(self.atk_type)):return False;
		if ( not ba.write_uint8(self.atk_level)):return False;
		if ( not ba.write_uint16(self.add_hp)):return False;
		if ( not ba.write_uint16(self.fantan_hp)):return False;
		if ( not ba.write_uint16(self.fantan_mp)):return False;
		if ( not ba.write_uint32(self.use_itemid)):return False;
		if ( not ba.write_uint32(self.atk_uid)):return False;
		if ( not ba.write_uint32(self.atk_petid)):return False;
		if ( not ba.write_uint8(self.huwei_pos)):return False;
		if ( not ba.write_uint64(self.fightee_state)):return False;
		if ( not ba.write_uint16(self.hurt_hp)):return False;
		if ( not ba.write_uint16(self.hurt_mp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[fantan_ret]=%s"%(str(self.fantan_ret))
		print tabs+"""/*  */"""
		print tabs+"[atk_type]=%s"%(str(self.atk_type))
		print tabs+"""/*  */"""
		print tabs+"[atk_level]=%s"%(str(self.atk_level))
		print tabs+"""/* 增加多少hp */"""
		print tabs+"[add_hp]=%s"%(str(self.add_hp))
		print tabs+"""/*  */"""
		print tabs+"[fantan_hp]=%s"%(str(self.fantan_hp))
		print tabs+"""/*  */"""
		print tabs+"[fantan_mp]=%s"%(str(self.fantan_mp))
		print tabs+"""/*  */"""
		print tabs+"[use_itemid]=%s"%(str(self.use_itemid))
		print tabs+"""/*  */"""
		print tabs+"[atk_uid]=%s"%(str(self.atk_uid))
		print tabs+"""/*  */"""
		print tabs+"[atk_petid]=%s"%(str(self.atk_petid))
		print tabs+"""/*  */"""
		print tabs+"[huwei_pos]=%s"%(str(self.huwei_pos))
		print tabs+"""/*  */"""
		print tabs+"[fightee_state]=%s"%(str(self.fightee_state))
		print tabs+"""/*  */"""
		print tabs+"[hurt_hp]=%s"%(str(self.hurt_hp))
		print tabs+"""/*  */"""
		print tabs+"[hurt_mp]=%s"%(str(self.hurt_mp))
		
		pass;
	




class attack_info_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public seq;

	/*  */
	#类型:uint32
	public fighter;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint64
	public fighter_state;

	/*  */
	#类型:uint32
	public topic_id;

	/*  */
	#类型:uint16
	public resume_hp1;

	/*  */
	#类型:uint16
	public resume_hp2;

	/*  */
	#类型:uint16
	public resume_hp3;

	/*  */
	#类型:uint16
	public poison_hp;

	/*  */
	#类型:uint32
	public host_uid;

	/*  */
	#类型:uint32
	public host_petid;

	/*  */
	#类型:uint16
	public parasitism_hp;

	/*  */
	#类型:uint16
	public zhushang_hp;

	/*  */
	#类型:uint16
	public curse_mp;

	/**/
	#变长数组,最大长度:1000, 类型:nest_atk_info_t
	public nest_akt_list =array();


	"""

	def read_from_buf(self, ba ):
		self.seq=ba.read_uint32();
		if ( self.seq== None): return False;
		self.fighter=ba.read_uint32();
		if ( self.fighter== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.fighter_state=ba.read_uint64();
		if ( self.fighter_state== None): return False;
		self.topic_id=ba.read_uint32();
		if ( self.topic_id== None): return False;
		self.resume_hp1=ba.read_uint16();
		if ( self.resume_hp1== None): return False;
		self.resume_hp2=ba.read_uint16();
		if ( self.resume_hp2== None): return False;
		self.resume_hp3=ba.read_uint16();
		if ( self.resume_hp3== None): return False;
		self.poison_hp=ba.read_uint16();
		if ( self.poison_hp== None): return False;
		self.host_uid=ba.read_uint32();
		if ( self.host_uid== None): return False;
		self.host_petid=ba.read_uint32();
		if ( self.host_petid== None): return False;
		self.parasitism_hp=ba.read_uint16();
		if ( self.parasitism_hp== None): return False;
		self.zhushang_hp=ba.read_uint16();
		if ( self.zhushang_hp== None): return False;
		self.curse_mp=ba.read_uint16();
		if ( self.curse_mp== None): return False;

		nest_akt_list_count= ba.read_uint16(); 
		if ( nest_akt_list_count==None ): return False;
		self.nest_akt_list=[];
		for i in range(nest_akt_list_count):
			self.nest_akt_list.append(nest_atk_info_t());
			if ( not self.nest_akt_list[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.seq)):return False;
		if ( not ba.write_uint32(self.fighter)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint64(self.fighter_state)):return False;
		if ( not ba.write_uint32(self.topic_id)):return False;
		if ( not ba.write_uint16(self.resume_hp1)):return False;
		if ( not ba.write_uint16(self.resume_hp2)):return False;
		if ( not ba.write_uint16(self.resume_hp3)):return False;
		if ( not ba.write_uint16(self.poison_hp)):return False;
		if ( not ba.write_uint32(self.host_uid)):return False;
		if ( not ba.write_uint32(self.host_petid)):return False;
		if ( not ba.write_uint16(self.parasitism_hp)):return False;
		if ( not ba.write_uint16(self.zhushang_hp)):return False;
		if ( not ba.write_uint16(self.curse_mp)):return False;
		nest_akt_list_count=len(self.nest_akt_list);
		ba.write_uint32(nest_akt_list_count);
		for i in range(nest_akt_list_count):
			if (  not  isinstance(self.nest_akt_list[i] ,nest_atk_info_t) ):return False; 
			if ( not self.nest_akt_list[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[seq]=%s"%(str(self.seq))
		print tabs+"""/*  */"""
		print tabs+"[fighter]=%s"%(str(self.fighter))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[fighter_state]=%s"%(str(self.fighter_state))
		print tabs+"""/*  */"""
		print tabs+"[topic_id]=%s"%(str(self.topic_id))
		print tabs+"""/*  */"""
		print tabs+"[resume_hp1]=%s"%(str(self.resume_hp1))
		print tabs+"""/*  */"""
		print tabs+"[resume_hp2]=%s"%(str(self.resume_hp2))
		print tabs+"""/*  */"""
		print tabs+"[resume_hp3]=%s"%(str(self.resume_hp3))
		print tabs+"""/*  */"""
		print tabs+"[poison_hp]=%s"%(str(self.poison_hp))
		print tabs+"""/*  */"""
		print tabs+"[host_uid]=%s"%(str(self.host_uid))
		print tabs+"""/*  */"""
		print tabs+"[host_petid]=%s"%(str(self.host_petid))
		print tabs+"""/*  */"""
		print tabs+"[parasitism_hp]=%s"%(str(self.parasitism_hp))
		print tabs+"""/*  */"""
		print tabs+"[zhushang_hp]=%s"%(str(self.zhushang_hp))
		print tabs+"""/*  */"""
		print tabs+"[curse_mp]=%s"%(str(self.curse_mp))
		print tabs+"#"
		print tabs+"[nest_akt_list]=>{";
		for i in range(len(self.nest_akt_list)):
			print tabs+"    [%d]=>{"%(i) 
			self.nest_akt_list[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class bt_battle_attack_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public enemy_mark;

	/*  */
	#类型:int32
	public enemy_pos;

	/*  */
	#类型:uint32
	public atk_type;

	/*  */
	#类型:uint32
	public atk_level;

	/* 药物id */
	#类型:uint32
	public itemid;

	/* 增加多少hp */
	#类型:uint32
	public add_hp;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.enemy_mark=ba.read_uint32();
		if ( self.enemy_mark== None): return False;
		self.enemy_pos=ba.read_int32();
		if ( self.enemy_pos== None): return False;
		self.atk_type=ba.read_uint32();
		if ( self.atk_type== None): return False;
		self.atk_level=ba.read_uint32();
		if ( self.atk_level== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.add_hp=ba.read_uint32();
		if ( self.add_hp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.enemy_mark)):return False;
		if ( not ba.write_int32(self.enemy_pos)):return False;
		if ( not ba.write_uint32(self.atk_type)):return False;
		if ( not ba.write_uint32(self.atk_level)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.add_hp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[enemy_mark]=%s"%(str(self.enemy_mark))
		print tabs+"""/*  */"""
		print tabs+"[enemy_pos]=%s"%(str(self.enemy_pos))
		print tabs+"""/*  */"""
		print tabs+"[atk_type]=%s"%(str(self.atk_type))
		print tabs+"""/*  */"""
		print tabs+"[atk_level]=%s"%(str(self.atk_level))
		print tabs+"""/* 药物id */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/* 增加多少hp */"""
		print tabs+"[add_hp]=%s"%(str(self.add_hp))
		
		pass;
	




class bt_load_battle_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public rate;


	"""

	def read_from_buf(self, ba ):
		self.rate=ba.read_uint32();
		if ( self.rate== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.rate)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[rate]=%s"%(str(self.rate))
		
		pass;
	




class bt_load_battle_ready_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public ready;


	"""

	def read_from_buf(self, ba ):
		self.ready=ba.read_uint32();
		if ( self.ready== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.ready)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[ready]=%s"%(str(self.ready))
		
		pass;
	




class bt_noti_battle_attacks_info_out :
	"""
参数列表:
	/**/
	#变长数组,最大长度:10000, 类型:uint32_t
	public attack_info_list =array();


	"""

	def read_from_buf(self, ba ):

		attack_info_list_count= ba.read_uint32(); 
		if ( attack_info_list_count==None ): return False;
		self.attack_info_list=[];
		for i in range(attack_info_list_count):
			self.attack_info_list.append(ba.read_uint32());
			if ( self.attack_info_list[i]== None): return False;


		return True;


	def write_to_buf(self,ba):
		attack_info_list_count=len(self.attack_info_list);
		ba.write_uint32(attack_info_list_count);
		for i in range(attack_info_list_count):
			if ( not ba.write_uint32(self.attack_info_list[i])):return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"#"
		print tabs+"[attack_info_list]=>{";
		for i in range(len(self.attack_info_list)):
			print tabs+"    [%d]="%(i)+str(self.attack_info_list[i]); 

		print tabs+'}'
		
		pass;
	




class bt_recall_pet_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		
		pass;
	




class bt_use_chemical_in :
	"""
参数列表:
	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public enemy_mark;

	/*  */
	#类型:int32
	public enemy_pos;

	/*  */
	#类型:uint32
	public itemid;

	/*  */
	#类型:uint32
	public add_hp;


	"""

	def read_from_buf(self, ba ):
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.enemy_mark=ba.read_uint32();
		if ( self.enemy_mark== None): return False;
		self.enemy_pos=ba.read_int32();
		if ( self.enemy_pos== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;
		self.add_hp=ba.read_uint32();
		if ( self.add_hp== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.enemy_mark)):return False;
		if ( not ba.write_int32(self.enemy_pos)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		if ( not ba.write_uint32(self.add_hp)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[enemy_mark]=%s"%(str(self.enemy_mark))
		print tabs+"""/*  */"""
		print tabs+"[enemy_pos]=%s"%(str(self.enemy_pos))
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		print tabs+"""/*  */"""
		print tabs+"[add_hp]=%s"%(str(self.add_hp))
		
		pass;
	




class stru_bt_atk_back :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public skill_id;

	/*  */
	#类型:uint32
	public skill_lvl;

	/*  */
	#类型:uint32
	public atk_userid;

	/*  */
	#类型:uint32
	public atk_petid;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.skill_id=ba.read_uint32();
		if ( self.skill_id== None): return False;
		self.skill_lvl=ba.read_uint32();
		if ( self.skill_lvl== None): return False;
		self.atk_userid=ba.read_uint32();
		if ( self.atk_userid== None): return False;
		self.atk_petid=ba.read_uint32();
		if ( self.atk_petid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.skill_id)):return False;
		if ( not ba.write_uint32(self.skill_lvl)):return False;
		if ( not ba.write_uint32(self.atk_userid)):return False;
		if ( not ba.write_uint32(self.atk_petid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[skill_id]=%s"%(str(self.skill_id))
		print tabs+"""/*  */"""
		print tabs+"[skill_lvl]=%s"%(str(self.skill_lvl))
		print tabs+"""/*  */"""
		print tabs+"[atk_userid]=%s"%(str(self.atk_userid))
		print tabs+"""/*  */"""
		print tabs+"[atk_petid]=%s"%(str(self.atk_petid))
		
		pass;
	




class stru_bt_atk_list :
	"""
参数列表:
	/*  */
	#类型:uint32
	public seq;

	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public topic_id;


	"""

	def read_from_buf(self, ba ):
		self.seq=ba.read_uint32();
		if ( self.seq== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.topic_id=ba.read_uint32();
		if ( self.topic_id== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.seq)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.topic_id)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[seq]=%s"%(str(self.seq))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[topic_id]=%s"%(str(self.topic_id))
		
		pass;
	




class stru_bt_kvalue :
	"""
参数列表:
	/*  */
	#类型:uint16
	public key;

	/*  */
	#类型:int16
	public value;


	"""

	def read_from_buf(self, ba ):
		self.key=ba.read_uint16();
		if ( self.key== None): return False;
		self.value=ba.read_int16();
		if ( self.value== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint16(self.key)):return False;
		if ( not ba.write_int16(self.value)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[key]=%s"%(str(self.key))
		print tabs+"""/*  */"""
		print tabs+"[value]=%s"%(str(self.value))
		
		pass;
	




class stru_bt_atk_pkt :
	"""
参数列表:
	/*  */
	#类型:uint32
	public seq;

	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public petid;

	/*  */
	#类型:uint32
	public topic;

	/*  */
	#类型:uint64
	public state;

	/**/
	#变长数组,最大长度:128, 类型:stru_bt_kvalue
	public changes =array();


	"""

	def read_from_buf(self, ba ):
		self.seq=ba.read_uint32();
		if ( self.seq== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.petid=ba.read_uint32();
		if ( self.petid== None): return False;
		self.topic=ba.read_uint32();
		if ( self.topic== None): return False;
		self.state=ba.read_uint64();
		if ( self.state== None): return False;

		changes_count= ba.read_uint32(); 
		if ( changes_count==None ): return False;
		self.changes=[];
		for i in range(changes_count):
			self.changes.append(stru_bt_kvalue());
			if ( not self.changes[i].read_from_buf(ba)):return False;


		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.seq)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.petid)):return False;
		if ( not ba.write_uint32(self.topic)):return False;
		if ( not ba.write_uint64(self.state)):return False;
		changes_count=len(self.changes);
		ba.write_uint32(changes_count);
		for i in range(changes_count):
			if (  not  isinstance(self.changes[i] ,stru_bt_kvalue) ):return False; 
			if ( not self.changes[i].write_to_buf(ba)): return False;

		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[seq]=%s"%(str(self.seq))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[petid]=%s"%(str(self.petid))
		print tabs+"""/*  */"""
		print tabs+"[topic]=%s"%(str(self.topic))
		print tabs+"""/*  */"""
		print tabs+"[state]=%s"%(str(self.state))
		print tabs+"#"
		print tabs+"[changes]=>{";
		for i in range(len(self.changes)):
			print tabs+"    [%d]=>{"%(i) 
			self.changes[i].echo(print_hex,tabs+"    "*2);
			print tabs+"    }\n"

		print tabs+'}'
		
		pass;
	




class map_grp_item_t :
	"""
参数列表:
	/* 刷新组（挑战时发送） */
	#类型:uint32
	public refresh_id;

	/* 怪物组ID */
	#类型:uint32
	public grpid;

	/* 随机生成的怪物组素材ID */
	#类型:uint32
	public type_id;

	/* x坐标 */
	#类型:uint16
	public posx;

	/* y坐标 */
	#类型:uint16
	public posy;

	/*  */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.refresh_id=ba.read_uint32();
		if ( self.refresh_id== None): return False;
		self.grpid=ba.read_uint32();
		if ( self.grpid== None): return False;
		self.type_id=ba.read_uint32();
		if ( self.type_id== None): return False;
		self.posx=ba.read_uint16();
		if ( self.posx== None): return False;
		self.posy=ba.read_uint16();
		if ( self.posy== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.refresh_id)):return False;
		if ( not ba.write_uint32(self.grpid)):return False;
		if ( not ba.write_uint32(self.type_id)):return False;
		if ( not ba.write_uint16(self.posx)):return False;
		if ( not ba.write_uint16(self.posy)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 刷新组（挑战时发送） */"""
		print tabs+"[refresh_id]=%s"%(str(self.refresh_id))
		print tabs+"""/* 怪物组ID */"""
		print tabs+"[grpid]=%s"%(str(self.grpid))
		print tabs+"""/* 随机生成的怪物组素材ID */"""
		print tabs+"[type_id]=%s"%(str(self.type_id))
		print tabs+"""/* x坐标 */"""
		print tabs+"[posx]=%s"%(str(self.posx))
		print tabs+"""/* y坐标 */"""
		print tabs+"[posy]=%s"%(str(self.posy))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class pvp_score_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;

	/*  */
	#类型:uint32
	public scores;

	/* 是否还在战场上 */
	#类型:uint32
	public is_alive;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;
		self.is_alive=ba.read_uint32();
		if ( self.is_alive== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		ba.write_buf(self.nick,16);
		if ( not ba.write_uint32(self.scores)):return False;
		if ( not ba.write_uint32(self.is_alive)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		print tabs+"""/*  */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		print tabs+"""/* 是否还在战场上 */"""
		print tabs+"[is_alive]=%s"%(str(self.is_alive))
		
		pass;
	




class stru_cli_buff :
	"""
参数列表:
	/*  */
	#类型:uint32
	public type;

	/*  */
	#定长数组,长度:512, 类型:char 
	public buff ;


	"""

	def read_from_buf(self, ba ):
		self.type=ba.read_uint32();
		if ( self.type== None): return False;
		self.buff=ba.read_buf(512);
		if( self.buff==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.type)):return False;
		ba.write_buf(self.buff,512);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[type]=%s"%(str(self.type))
		print tabs+"""/*  */"""
		tmp_str=str(self.buff);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[buff]=%s"%(tmp_str)
		
		pass;
	




class stru_ex_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public eid;

	/*  */
	#类型:uint32
	public itemid;


	"""

	def read_from_buf(self, ba ):
		self.eid=ba.read_uint32();
		if ( self.eid== None): return False;
		self.itemid=ba.read_uint32();
		if ( self.itemid== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.eid)):return False;
		if ( not ba.write_uint32(self.itemid)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[eid]=%s"%(str(self.eid))
		print tabs+"""/*  */"""
		print tabs+"[itemid]=%s"%(str(self.itemid))
		
		pass;
	




class stru_game_change_add :
	"""
参数列表:
	/*  */
	#类型:uint32
	public gameid;

	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public logtime;

	/*  */
	#类型:uint32
	public opt_type;

	/*  */
	#类型:int32
	public ex_v1;

	/*  */
	#类型:int32
	public ex_v2;

	/*  */
	#类型:int32
	public ex_v3;

	/*  */
	#类型:int32
	public ex_v4;


	"""

	def read_from_buf(self, ba ):
		self.gameid=ba.read_uint32();
		if ( self.gameid== None): return False;
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.logtime=ba.read_uint32();
		if ( self.logtime== None): return False;
		self.opt_type=ba.read_uint32();
		if ( self.opt_type== None): return False;
		self.ex_v1=ba.read_int32();
		if ( self.ex_v1== None): return False;
		self.ex_v2=ba.read_int32();
		if ( self.ex_v2== None): return False;
		self.ex_v3=ba.read_int32();
		if ( self.ex_v3== None): return False;
		self.ex_v4=ba.read_int32();
		if ( self.ex_v4== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.gameid)):return False;
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.logtime)):return False;
		if ( not ba.write_uint32(self.opt_type)):return False;
		if ( not ba.write_int32(self.ex_v1)):return False;
		if ( not ba.write_int32(self.ex_v2)):return False;
		if ( not ba.write_int32(self.ex_v3)):return False;
		if ( not ba.write_int32(self.ex_v4)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[gameid]=%s"%(str(self.gameid))
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[logtime]=%s"%(str(self.logtime))
		print tabs+"""/*  */"""
		print tabs+"[opt_type]=%s"%(str(self.opt_type))
		print tabs+"""/*  */"""
		print tabs+"[ex_v1]=%s"%(str(self.ex_v1))
		print tabs+"""/*  */"""
		print tabs+"[ex_v2]=%s"%(str(self.ex_v2))
		print tabs+"""/*  */"""
		print tabs+"[ex_v3]=%s"%(str(self.ex_v3))
		print tabs+"""/*  */"""
		print tabs+"[ex_v4]=%s"%(str(self.ex_v4))
		
		pass;
	




class stru_id_cnt :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/*  */
	#类型:uint32
	public count;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		
		pass;
	




class stru_petfight_rank_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public scores;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.scores=ba.read_uint32();
		if ( self.scores== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.scores)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[scores]=%s"%(str(self.scores))
		
		pass;
	




class stru_rank_val :
	"""
参数列表:
	/*  */
	#类型:uint32
	public id;

	/*  */
	#类型:uint32
	public val;

	/*  */
	#定长数组,长度:16, 类型:char 
	public nick ;


	"""

	def read_from_buf(self, ba ):
		self.id=ba.read_uint32();
		if ( self.id== None): return False;
		self.val=ba.read_uint32();
		if ( self.val== None): return False;
		self.nick=ba.read_buf(16);
		if( self.nick==None ): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.id)):return False;
		if ( not ba.write_uint32(self.val)):return False;
		ba.write_buf(self.nick,16);
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[id]=%s"%(str(self.id))
		print tabs+"""/*  */"""
		print tabs+"[val]=%s"%(str(self.val))
		print tabs+"""/*  */"""
		tmp_str=str(self.nick);
		if(print_hex):tmp_str=bin2hex(tmp_str)
		print tabs+"[nick]=%s"%(tmp_str)
		
		pass;
	




class stru_relation_item :
	"""
参数列表:
	/*  */
	#类型:uint32
	public uid;

	/*  */
	#类型:uint32
	public day;

	/*  */
	#类型:uint32
	public val;


	"""

	def read_from_buf(self, ba ):
		self.uid=ba.read_uint32();
		if ( self.uid== None): return False;
		self.day=ba.read_uint32();
		if ( self.day== None): return False;
		self.val=ba.read_uint32();
		if ( self.val== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.uid)):return False;
		if ( not ba.write_uint32(self.day)):return False;
		if ( not ba.write_uint32(self.val)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[uid]=%s"%(str(self.uid))
		print tabs+"""/*  */"""
		print tabs+"[day]=%s"%(str(self.day))
		print tabs+"""/*  */"""
		print tabs+"[val]=%s"%(str(self.val))
		
		pass;
	




class stru_team_rank_t :
	"""
参数列表:
	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public count;

	/*  */
	#类型:uint32
	public medals;


	"""

	def read_from_buf(self, ba ):
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.count=ba.read_uint32();
		if ( self.count== None): return False;
		self.medals=ba.read_uint32();
		if ( self.medals== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.count)):return False;
		if ( not ba.write_uint32(self.medals)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[count]=%s"%(str(self.count))
		print tabs+"""/*  */"""
		print tabs+"[medals]=%s"%(str(self.medals))
		
		pass;
	




class stru_user_rank_t :
	"""
参数列表:
	/* 米米号 */
	#类型:uint32
	public userid;

	/*  */
	#类型:uint32
	public teamid;

	/*  */
	#类型:uint32
	public medals;


	"""

	def read_from_buf(self, ba ):
		self.userid=ba.read_uint32();
		if ( self.userid== None): return False;
		self.teamid=ba.read_uint32();
		if ( self.teamid== None): return False;
		self.medals=ba.read_uint32();
		if ( self.medals== None): return False;

		return True;


	def write_to_buf(self,ba):
		if ( not ba.write_uint32(self.userid)):return False;
		if ( not ba.write_uint32(self.teamid)):return False;
		if ( not ba.write_uint32(self.medals)):return False;
		return True;
	
 
	def echo(self, print_hex=False,tabs="" ):
		print tabs+"""/* 米米号 */"""
		print tabs+"[userid]=%s"%(str(self.userid))
		print tabs+"""/*  */"""
		print tabs+"[teamid]=%s"%(str(self.teamid))
		print tabs+"""/*  */"""
		print tabs+"[medals]=%s"%(str(self.medals))
		
		pass;
	




create_time='2011年12月08日 星期4 18:45:40'
cmd_map={ }
cmd_map[1306]=(1306,'bt_load_battle',bt_load_battle_in,None,0x84119c48)
cmd_map[1308]=(1308,'bt_battle_attack',bt_battle_attack_in,None,0x6f036017)
cmd_map[1309]=(1309,'bt_use_chemical',bt_use_chemical_in,None,0x7b20f0f1)
cmd_map[1310]=(1310,'bt_noti_battle_attacks_info',None,bt_noti_battle_attacks_info_out,0xcb318b1e)
cmd_map[1317]=(1317,'bt_load_battle_ready',bt_load_battle_ready_in,None,0x5d337c71)
cmd_map[1320]=(1320,'bt_reject_challenge',None,None,0xa92bdf2e)
cmd_map[1336]=(1336,'bt_cancel_challenge',None,None,0xbfc07da9)
cmd_map[1339]=(1339,'bt_recall_pet',bt_recall_pet_in,None,0xde66321f)
cmd_map[1340]=(1340,'bt_break_off',None,None,0x5ee404b0)
cmd_map[1347]=(1347,'bt_kick_off_teamer',None,None,0xcaceb02c)
	
def init_cmd_map():
	pass

try:
	import mole2_btl_proto_base
	base_type=mole2_btl_proto_base.Cmole2_btl_proto_base
except:
	base_type=object
	pass


class Cmole2_btl_proto (base_type):
	def __init__(self,ip,port):
		mole2_btl_proto_base.Cmole2_btl_proto_base.__init__(self,ip,port)

	def bt_load_battle(self ,rate ):
		"""
客户端上报加载进度:
	/*  */
	#类型:uint32
	public rate;


	"""
		pri_in=bt_load_battle_in();

		pri_in.rate=rate
		self.sendmsg(1306, pri_in );
		pass

	def bt_battle_attack(self ,petid,enemy_mark,enemy_pos,atk_type,atk_level,itemid,add_hp ):
		"""
用户操作命令:
	/* 增加多少hp */
	#类型:uint32
	public add_hp;


	"""
		pri_in=bt_battle_attack_in();

		pri_in.petid=petid
		pri_in.enemy_mark=enemy_mark
		pri_in.enemy_pos=enemy_pos
		pri_in.atk_type=atk_type
		pri_in.atk_level=atk_level
		pri_in.itemid=itemid
		pri_in.add_hp=add_hp
		self.sendmsg(1308, pri_in );
		pass

	def bt_use_chemical(self ,petid,enemy_mark,enemy_pos,itemid,add_hp ):
		"""
使用药瓶:
	/*  */
	#类型:uint32
	public add_hp;


	"""
		pri_in=bt_use_chemical_in();

		pri_in.petid=petid
		pri_in.enemy_mark=enemy_mark
		pri_in.enemy_pos=enemy_pos
		pri_in.itemid=itemid
		pri_in.add_hp=add_hp
		self.sendmsg(1309, pri_in );
		pass

	def bt_noti_battle_attacks_info(self  ):
		"""
返回客户段打斗行动数据包:

	"""
		pri_in=None;

		self.sendmsg(1310, pri_in );
		pass

	def bt_load_battle_ready(self ,ready ):
		"""
客户段初始化成功:
	/*  */
	#类型:uint32
	public ready;


	"""
		pri_in=bt_load_battle_ready_in();

		pri_in.ready=ready
		self.sendmsg(1317, pri_in );
		pass

	def bt_reject_challenge(self  ):
		"""
拒绝接受pk:

	"""
		pri_in=None;

		self.sendmsg(1320, pri_in );
		pass

	def bt_cancel_challenge(self  ):
		"""
取消对战:

	"""
		pri_in=None;

		self.sendmsg(1336, pri_in );
		pass

	def bt_recall_pet(self ,petid ):
		"""
换宠:
	/*  */
	#类型:uint32
	public petid;


	"""
		pri_in=bt_recall_pet_in();

		pri_in.petid=petid
		self.sendmsg(1339, pri_in );
		pass

	def bt_break_off(self  ):
		"""
掉线－－对战前:

	"""
		pri_in=None;

		self.sendmsg(1340, pri_in );
		pass

	def bt_kick_off_teamer(self  ):
		"""
掉线－－对战前:

	"""
		pri_in=None;

		self.sendmsg(1347, pri_in );
		pass


