#include <algorithm>

#include <time.h>
#include "Cfriends.h"

using namespace std;
extern char *db_name_prefix;
enum {
	FRIEND_TYPE_FRIEND		= 0,//普通朋友
	FRIEND_TYPE_BLACKLIST	= 1,//黑名单
	FRIEND_TYPE_RECENT		= 2,//最近联系人(普通+陌生)
	FRIEND_TYPE_SPECIAL		= 3,//特别关心
};

Cfriends::Cfriends(mysql_interface* db)
    :CtableRoute(db,"USER_INFO",  "t_friend", "user_id")
{


}

int Cfriends::add_friend(DEFAULT_ARGS, uid_role_t &ufriend)
{
	uint32_t now = (uint32_t)time(NULL);
	GEN_SQLSTR(this->sqlstr, "insert ignore into %s (user_id, area_id, role_tm, friend_id, friend_role_tm, friend_type, add_time) values (%u, %u, %u, %u, %u, %u, %u)",
			this->get_table_name(user_id), 
			user_id,
			area_id,
			role_tm,
			ufriend.user_id,
			ufriend.role_tm,
			FRIEND_TYPE_FRIEND,
			now);
	return exec_insert_sql(this->sqlstr, SUCC);
}

int Cfriends::del_friend(DEFAULT_ARGS, uid_role_t &ufriend)
{
	GEN_SQLSTR(this->sqlstr, "delete from %s where user_id = %u and area_id= %u and role_tm = %u  and friend_id = %u and friend_role_tm = %u and  friend_type = %u",
			this->get_table_name(user_id), 
			user_id,
			area_id,
			role_tm,
			ufriend.user_id,
			ufriend.role_tm,
			FRIEND_TYPE_FRIEND);
	return exec_delete_sql(this->sqlstr, SUCC);
}

int Cfriends::add_to_blacklist(DEFAULT_ARGS, uid_role_t &blacked_user)
{
	uint32_t now = (uint32_t)time(NULL);
	GEN_SQLSTR(this->sqlstr, "insert ignore into %s (user_id, area_id,  role_tm, friend_id, friend_role_tm, friend_type, add_time) values (%u, %u, %u, %u, %u, %u, %u)",
			this->get_table_name(user_id), 
			area_id,
			user_id,
			role_tm,
			blacked_user.user_id,
			blacked_user.role_tm,
			FRIEND_TYPE_BLACKLIST,
			now);
	return exec_insert_sql(this->sqlstr, SUCC);
}

int Cfriends::del_from_blacklist(DEFAULT_ARGS, uid_role_t &unblacked_user)
{
	GEN_SQLSTR(this->sqlstr, "delete from %s where user_id = %u and area_id = %u and role_tm = %u and friend_id = %u and friend_role_tm = %u and friend_type = %u",
			this->get_table_name(user_id), 
			user_id,
			area_id,
			role_tm,
			unblacked_user.user_id,
			unblacked_user.role_tm,
			FRIEND_TYPE_BLACKLIST);
	return exec_delete_sql(this->sqlstr, SUCC);
}

int Cfriends::get_friends_list(DEFAULT_ARGS,  std::vector<uid_role_t> &vec)
{
	GEN_SQLSTR(this->sqlstr, "select friend_id, friend_role_tm from %s where user_id = %u and area_id=%u and role_tm = %u and  friend_type = %u",
            this->get_table_name(user_id),
            user_id,
			area_id,
			role_tm,
			FRIEND_TYPE_FRIEND);

    STD_QUERY_WHILE_BEGIN_NEW(this->sqlstr, vec) {
        INT_CPY_NEXT_FIELD(item.user_id);
		INT_CPY_NEXT_FIELD(item.role_tm);
    }
    STD_QUERY_WHILE_END_NEW()
}

int Cfriends::get_blacklist(DEFAULT_ARGS,  std::vector<uid_role_t> &vec)
{
	GEN_SQLSTR(this->sqlstr, "select friend_id, friend_role_tm from %s where user_id = %u and area_id=%u and role_tm = %u and friend_type = %u",
            this->get_table_name(user_id),
            user_id,
			area_id,
			role_tm,
			FRIEND_TYPE_BLACKLIST);

    STD_QUERY_WHILE_BEGIN_NEW(this->sqlstr, vec) {
        INT_CPY_NEXT_FIELD(item.user_id);
		INT_CPY_NEXT_FIELD(item.role_tm);
    }
    STD_QUERY_WHILE_END_NEW()
}

//TODO
int Cfriends::get_union_list(DEFAULT_ARGS, std::vector<uid_role_t> &vec)
{
	return 0;
}

