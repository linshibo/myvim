activity.cpp:	if (pday->count >= 10) {
activity.cpp:			cli_out.count = item_cnt_base - loop / 20 * 10;
activity.cpp:#define     LUCKYSTAR_START_TIME  10*3600
activity.cpp:	//if((nowtime < 10*3600 || nowtime > 22*3600 ) || //time wrong
activity.cpp:	int32_t check_cnt[][3]={{6,20,5},{20,20,10},{70,20,20}};
battle.cpp:	////aw->mp_max	= ROUND_100(p->physi100 + 2 * p->stren100 + 2 * p->endur100 + 2 * p->quick100 + 10* p->intel100) + 20;
battle.cpp:	//p->hp_max 	= p->hp_init * p->level * p->attr_param/10;
battle.cpp:	//p->mp_max 	= p->mp_init * p->level * p->attr_param/10;
battle.cpp:	//p->attack	= p->attack_init * p->level * p->attr_param/10;
battle.cpp:	//p->hit_rate 	=  p->hit_init * p->level * p->attr_param/10;
battle.cpp:	//p->avoid_rate 	=  p->avoid_init * p->level * p->attr_param/10;
battle.cpp:	//p->speed 	=  p->speed_init * p->level * p->attr_param/10;
battle.cpp:	//physi = physi * aw->level * 10 / MAGIC_GROW_RATE + physi * 2;
battle.cpp:	//stren = stren * aw->level * 10 / MAGIC_GROW_RATE + stren * 2;
battle.cpp:	////endur = endur * aw->level * 10 / MAGIC_GROW_RATE + endur * 2;
battle.cpp:	//quick = quick * aw->level * 10 / MAGIC_GROW_RATE + quick * 2;
battle.cpp:	//intel = intel * aw->level * 10 / MAGIC_GROW_RATE + intel * 2;
battle.cpp:	////aw->hp_max 	= pb->hp_init * aw->level * pb->attr_param/10;
battle.cpp:	////aw->mp_max 	= pb->mp_init * aw->level * pb->attr_param/10;
battle.cpp:		//aw->skills[loop].skill_info.skill_level = 10;
battle.cpp:		if (p->left_step > 10 || (timespan + 1) * 40 < p->last_fight_step) {
battle.cpp:				ADD_ONLINE_TIMER(mp, n_refresh_elite_beast, (void *)(grpid - 1), grpid == 1 ? 5 : 10);
battle.cpp:	int idxb = rand() % 10;
battle.cpp:		//for( uint32_t loop=0;loop<10 ; loop++ ){
battle.cpp:		//int minmax[6][2] = {{0, 0}, {1, 2}, {3, 5}, {5, 7}, {7, 9}, {9, 10}};
battle.cpp:				i += cloth_cnt * 10;
battle.cpp:	uint32_t items[10] = {210004, 210005, 230004, 230005, 270011, 270022, 300002, 300003, 300001, 310001};
battle.cpp:	uint32_t percent[LOOP_GRP_CNT][10] = {
battle.cpp:		{250, 60, 250, 60, 250, 60, 10, 10, 50, 0},
battle.cpp:		{50, 210, 50, 210, 50, 210, 80, 80, 50, 10}};
battle.cpp:	uint32_t count_ex[LOOP_GRP_CNT] = {5, 10, 15};
battle.cpp:		uint32_t itemid = items[rand_type_idx(10, percent[p_in->grpid], RAND_COMMON_RAND_BASE)];
center.cpp:	CHECK_BODY_LEN_GE(len, 10);
center.cpp:	int len2 = len - 10;
center.cpp:		send_to_all((void*)(buf + 10), msg_len);
center.cpp:			send_to_self(p, ((uint8_t*)buf) + 10, msg_len, 0);
cli_login.cpp:	if (p->level < 10 || !p->login_day)
cli_login.cpp:			p_p->skills[i].skill_level = p_p->level / 10 + 1;
cli_proto.cpp:	SET_CLI_HANDLE(proto_cli_user_talk, talk_cmd, 10, cmp_must_ge, 0);
global.cpp:int injury_effect_ratio[4] = {10, 9, 6, 2};
global.cpp:uint32_t relation_level[10][2] = {
items.cpp:	//if (pc->minlv >= 10 && pc->equip_part >= part_hat && pc->equip_part <= part_shoe 
items.cpp:			if (kid < 10) {
items.cpp:			PKG_UINT16(out, *(uint16_t *)(p->session + 10), i);
items.cpp:	*(uint16_t *)(p->session + 10) = p_in->posy;
items.cpp:		uint8_t arr[10]={0},count=0;
items.cpp:			if(count<10 && ((pni->rand_prof_gift.prof[loop]>>p->prof)&1)==1){
items.cpp:	uint32_t itemlv=(itemid/1000)%10+1;
mail.cpp:#define MAIL_UID_CNT		10
mail.cpp:#define MAIL_XM_PER_MAIL		10
mole2_online.cpp:	    if ( strncmp( ip,"10.",3 )==0 ) {
pet.cpp:					count = ranged_random(5, 10);
pet.cpp:	//db_day_add_ssid_cnt(NULL, p->id, ssid_pet_for_item, 1, 10);
pet.cpp:		+ pp->base_attr_db.endur_para10 + pp->base_attr_db.quick_para10 + pp->base_attr_db.intel_para10) / 10;
pet.cpp:	uint32_t max = (factor + 10 - rand_diff) * 10;
pet.cpp:	if (total_para10 > 10 * total_factor) {
pet.cpp:		uint16_t a = (total_para10 - 10 * total_factor) / 5;
pet.cpp:{ pet->physi100 = pet->base_attr_db.physi_para10 * (pet->level - 1) * 10 / MAGIC_GROW_RATE \
pet.cpp:	pet->stren100 = pet->base_attr_db.stren_para10 * (pet->level - 1) * 10 / MAGIC_GROW_RATE \
pet.cpp:	pet->endur100 = pet->base_attr_db.endur_para10 * (pet->level - 1) * 10 / MAGIC_GROW_RATE \
pet.cpp:	pet->quick100 = pet->base_attr_db.quick_para10 * (pet->level - 1) * 10 / MAGIC_GROW_RATE \
pet.cpp:	pet->intel100 = pet->base_attr_db.intel_para10 * (pet->level - 1) * 10 / MAGIC_GROW_RATE \
pet.cpp:		p_p->skills[p_p->skill_cnt].skill_level = p_p->level / 10 + 1;
pet.cpp:	ps->skill_level = p_p->level / 10 + 1;
pet.cpp:		pst1->skill_level = p_p->level / 10 + 1;
pet.cpp:		pst2->skill_level = p_p->level /10 + 1;
pet.cpp:		pst1->skill_level = p_p->level / 10 + 1;
pet.cpp:		pst2->skill_level = p_p->level /10 + 1;
pet.cpp:			p_p->skills[loop].skill_level = p_p->level / 10 + 1;
pet.cpp:			p_p->skills[loop].skill_level = p_p->level / 10 + 1;
pet.cpp:			//+ tmp_pet.base_attr_db.endur_para10 + tmp_pet.base_attr_db.quick_para10 + tmp_pet.base_attr_db.intel_para10) / 10;
reload.cpp:                reload_mcast_port = strtol(b_opt_arg, NULL, 10);
skill.cpp:	if (ps->skill_level >= 10) {
skill.cpp:		uint32_t cnt=(level-30)/10+3;
sns.cpp:	} else if (p->level >= 10) {
sns.cpp:		CHECK_LV_FIT(p, p, 10, 29);
sns.cpp:	uint32_t cost = p->level < 10 ? 0 : p->level;
sns.cpp:			return 10 * cost;
sns.cpp:		//uint32_t old_mpmax = (p->physique + 2 * p->strength + 2 * p->endurance + 2 * p->quick + 10* p->intelligence) *  + 20;
sns.cpp:		//mpmax = (p->physique + 2 * p->strength + 2 * p->endurance + 2 * p->quick + 10* p->intelligence) *  + 20;
sns.cpp:		//xiaomee += p->level < 10 ? 0 : (hpmax - p->hp) / 2;
sns.cpp:		//xiaomee += p->level < 10 ? 0 : (IS_WIZARD(p) ? (mpmax - p->mp) / 2 : (mpmax - p->mp));
sns.cpp:			//mpmax = ROUND_1000((pp->physi100 + 2 * pp->stren100 + 2 * pp->endur100 + 2 * pp->quick100 + 10* pp->intel100) * new_ratio) + 20;
sns.cpp:			xiaomee += pp->level < 10 ? ((100 - pp->level) / 4 + pp->level - 20) : 0;
sns.cpp:			//xiaomee = p->level < 10 ? 0 : hp / 2;
sns.cpp:			//xiaomee = p->level < 10 ? 0 : (IS_WIZARD(p) ? mp/ 2 : mp);
sns.cpp:				//uint32_t old_hpmax = (8 * p->physique + 2 * p->strength + 3 * p->endurance + 3 * p->quick + p->intelligence) * old_ratio / 10 + 20;
sns.cpp:				//uint32_t old_mpmax = (p->physique + 2 * p->strength + 2 * p->endurance + 2 * p->quick + 10* p->intelligence) * old_ratio / 10 + 20;
sns.cpp:				//uint32_t new_hpmax = (8 * p->physique + 2 * p->strength + 3 * p->endurance + 3 * p->quick + p->intelligence) * new_ratio / 10 + 20;
sns.cpp:				//uint32_t new_mpmax = (p->physique + 2 * p->strength + 2 * p->endurance + 2 * p->quick + 10* p->intelligence) * new_ratio / 10 + 20;
sns.cpp:	uint32_t mp = pipi->physique + 2 * pipi->strength + 2 * pipi->endurance + 2 * pipi->quick + 10 * pipi->endurance + 20;
sns.cpp:			count = ISVIP(p->flag) ? 20 : 10;
sns.cpp:	CHECK_LV_FIT(p, p, 10, MAX_SPRITE_LEVEL);
sns.cpp:	if(p_in->count >10){
sns.cpp:		KERROR_LOG(p->id, "stone > 10[%u]", p_in->count);
sns.cpp:	return (p->level+max_skill_lv+weapon_power*10);
sns.cpp:#define  MAX_OPEN_CNT  10
sns.cpp:	else if(rate<10)
sns.cpp:	uint32_t rate = pcloth->sell_price ? price/pcloth->sell_price:10;//pclv->sell_price?price/pclv->sell_price:10;
sns.cpp:	else if(rate<10)
sns.cpp:			if( p->level >= 10){
sprite.cpp:	int effect_ratio = 10; //get_injury_effect(p->injury_lv);
sprite.cpp:	p->hp_max 	= (8 * p->physique + 2 * p->strength + 3 * p->endurance + 3 * p->quick + p->intelligence) * effect_ratio / 10 + 20;
sprite.cpp:	p->mp_max 	= (p->physique + 2 * p->strength + 2 * p->endurance + 2 * p->quick + 10* p->intelligence) * effect_ratio / 10 + 20;
sprite.cpp:	p->attack	= (p->physique + 20 * p->strength + 2 * p->endurance + 2 * p->quick + p->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->defense 	= (p->physique + 2 * p->strength + 20 * p->endurance + 2 * p->quick + p->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->speed 	= (p->physique + 2 * p->strength + 2 * p->endurance + 20 * p->quick + p->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->spirit 	= (-3 * p->physique - p->strength + 2 * p->endurance - p->quick + 8 * p->intelligence) / 10 + 100;
sprite.cpp:	p->resume	= (8 * p->physique - p->strength - p->endurance + 2 * p->quick - 3 * p->intelligence) / 10 + 100;
sprite.cpp:		p->avoid_rate = 10;
sprite.cpp:	int effect_ratio = 10; //get_injury_effect(injury_lv);
sprite.cpp:	p->hp_max 	= (8 * p_b5a->physique + 2 * p_b5a->strength + 3 * p_b5a->endurance + 3 * p_b5a->quick + p_b5a->intelligence) * effect_ratio / 10 + 20;
sprite.cpp:	p->mp_max 	= (p_b5a->physique + 2 * p_b5a->strength + 2 * p_b5a->endurance + 2 * p_b5a->quick + 10* p_b5a->intelligence) * effect_ratio / 10 + 20;
sprite.cpp:	p->attack	= (p_b5a->physique + 20 * p_b5a->strength + 2 * p_b5a->endurance + 2 * p_b5a->quick + p_b5a->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->defense 	= (p_b5a->physique + 2 * p_b5a->strength + 20 * p_b5a->endurance + 2 * p_b5a->quick + p_b5a->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->speed 	= (p_b5a->physique + 2 * p_b5a->strength + 2 * p_b5a->endurance + 20 * p_b5a->quick + p_b5a->intelligence) * effect_ratio / 10 / 10 + 20;
sprite.cpp:	p->spirit 	= (-3 * p_b5a->physique - p_b5a->strength + 2 * p_b5a->endurance - p_b5a->quick + 8 * p_b5a->intelligence) / 10 + 100;
sprite.cpp:	p->resume	= (8 * p_b5a->physique - p_b5a->strength - p_b5a->endurance + 2 * p_b5a->quick - 3 * p_b5a->intelligence) / 10 + 100;
sprite.cpp:		p->avoid_rate = 10;
viponly.cpp:	uint32_t vid=p->viplv+10;
viponly.cpp:	if(p->vip_noti_flag_5==0 && p->level>=10)	{//设置已经查看过了
viponly.cpp://1,10,30,20,10,50,400,479
viponly.cpp:		//1,10,30,20,10,50,400,479
viponly.cpp://1,10,50,40,10,100,400,389,
viponly.cpp:		//1,10,30,20,10,50,400,479
activity.h:		if (p->cur_fish_cnt >= 10) { \
benchapi.h:#define MAX_RACE_TYPE			10
benchapi.h:#define MAX_SKILL_BAR			10
benchapi.h:#define MAX_SKILL_CACHE 		10
global.h:#define MAX_ONE_REFRESH_GRP		10
global.h:#define MAX_ONE_REFRESH_MAP		10
global.h:#define MAX_REFRESH_GROUP_CNT		10
global.h:#define MAX_DROP_ITEM_TYPE		10
global.h:#define MAX_CLOTH_LEVL_CNT	10
global.h:#define MAX_MATERIAL_CNT	10
global.h:#define MAX_PROF_CNT		10
global.h:#define MAX_GIFT_CNT		10
global.h:#define MAX_EXCHANGE_ITEM_TYPE		10
global.h:#define MAX_SPEC_CATCH_TYPE		10
global.h:#define MAX_SKILL_PROFS			10	
global.h:#define MAX_SKILL_LEVEL			10
global.h:extern uint32_t relation_level[10][2];
global.h:#define MAX_TASK_OUT_OPT		10
global.h:#define MAX_PARENT_TASK_CNT		10
global.h:#define MAX_TASK_LOOP_CNT			10
global.h:#define MAX_SKILL_DIFF 	10
global.h:#define MAX_VIP_LV				 	10	
items.h:	item_for_broadcast			= 10,
items.h:	int ratio = (pc->duration * 10 / pc->duration_max) * 2 + 1;
items.h:	ratio = ratio > 10 ? 10 : ratio;
items.h:	p->hp_max += pc->hp_max * ratio / 10;
items.h:	p->mp_max += pc->mp_max * ratio / 10;
items.h:	p->attack += pc->attack * ratio / 10;
items.h:	p->hit_rate += pc->hit * ratio / 10;
items.h:	p->avoid_rate += pc->avoid * ratio / 10;
items.h:	p->speed += pc->speed * ratio / 10;
items.h:	/*p->defense += pc->defense * ratio / 10;*/
items.h:	/*p->mdefense += pc->mdefense * ratio / 10;*/
items.h:	/*p->spirit += pc->spirit * ratio / 10;*/
items.h:	/*p->resume += pc->resume * ratio / 10;*/
items.h:	/*p->bisha += pc->crit * ratio / 10;*/
items.h:	/*p->fight_back += pc->fightback * ratio / 10;*/
items.h:	/*p->rpoison += pc->rpoison * ratio / 10;*/
items.h:	/*p->rlithification += pc->rlithification * ratio / 10;*/
items.h:	/*p->rlethargy += pc->rlethargy * ratio / 10;*/
items.h:	/*p->rinebriation += pc->rinebriation * ratio / 10;*/
items.h:	/*p->rconfusion += pc->rconfusion * ratio / 10;*/
items.h:	/*p->roblivion += pc->roblivion * ratio / 10;*/
items.h:	p->defense += pc->defense * ratio / 10;
items.h:	p->mdefense += pc->mdefense * ratio / 10;
items.h:	p->critical_attack += pc->critical_attack * ratio / 10;
items.h:	p->deadly_attack += pc->deadly_attack * ratio / 10;
items.h:	p->rpoison += pc->rpoison * ratio / 10;
items.h:	p->rconfusion += pc->rconfusion * ratio / 10;
items.h:	p->rstone += pc->rstone * ratio / 10;
items.h:	p->rfreeze += pc->rfreeze * ratio / 10;
items.h:	p->rsleep += pc->rsleep * ratio / 10;
items.h:	p->rcurse += pc->rcurse * ratio / 10;	
items.h:	p->fight_back += pc->fight_back * ratio / 10;
items.h:	p->strike_back += pc->strike_back * ratio / 10;
items.h:	p->strike_back_hurt += pc->strike_back_hurt * ratio / 10;
items.h:	p->rcritical_attack += pc->rcritical_attack * ratio / 10;
items.h:	p->rdeadly_attack += pc->rdeadly_attack * ratio / 10;
mall.h:	PRODUCT_NOT_EXIST							= 10,
pet.h:			pp->skills[loop].skill_level = pp->level / 10 + 1;
pet.h:	int para10 = (factor + (rand() % 11 - rand_diff)) * 10;
pet.h:	int para10 = (factor + (rand() % 11 - 8)) * 10;
sns.h:	apply_for_pk_pet	= 10,
sns.h:	for (level = 0; level < 10; level ++) {
sprite.h:	flag_vip_1mail		= 10,
sprite.h:	uint32_t vipexps[10] = {150, 450, 900, 1800, 2700, 4500, 6300, 9000, 11700, 15300};
sprite.h:	return 10;
sprite.h:		uint32_t lost_exp = 10 * get_day_interval(nowtv, p->vip_end);
statistic.h:		msg_log_uint32_uint32(MSG_ID_PET_LEVEL_BASE + prelv / 10, 0 ,1);
statistic.h:	msg_log_uint32_uint32(MSG_ID_PET_LEVEL_BASE + level / 10, 1, 0);
statistic.h:		case 10:
statistic.h:	if (level < 10 || level > 50)
util.h:			v = strtoul((const char*)str, &endpt, 10); \
util.h:		*val = strtoul((const char*)str, &endpt, 10);
util.h:		*val = strtoul((const char*)str, &endpt, 10);
util.h:		*val = strtoul((const char*)str, &endpt, 10);
util.h:		*val = strtoul((const char*)str, &endpt, 10);
util.h:		*val = strtoul((const char*)str, &endpt, 10);
