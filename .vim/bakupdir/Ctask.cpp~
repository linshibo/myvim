#include <algorithm>
#include "Ctask.h"

extern char *db_name_prefix;
Ctask::Ctask(mysql_interface* db)
	:CtableRoute(db, "USER_INFO", "t_task", "user_id")
{
		
}

int Ctask::add( DEFAULT_ARGS,  uint32_t taskid, uint32_t buf_len, char *svr_buf)
{
    if (buf_len>TASK_BUF_LEN  ) return   NO_DEFINE_ERR;
    char buf_mysql[mysql_str_len(TASK_BUF_LEN )];
    set_mysql_string(buf_mysql, svr_buf , buf_len );

    GEN_SQLSTR(sqlstr, "insert into %s (areaid, user_id, role_tm, taskid, flag , svr_buf)values(%u, %u,%u,%u, 0, '%s')", 
			get_table_name(user_id),
			area_id,
			user_id,
			role_tm,
			taskid, buf_mysql);
    return exec_insert_sql(sqlstr, KEY_EXISTED_ERR);
}

int Ctask::del( DEFAULT_ARGS,  uint32_t taskid )
{
    GEN_SQLSTR(sqlstr, "delete from %s where user_id=%u and area_id=%u and role_tm=%u and taskid=%u ", 
			get_table_name(user_id), 
			area_id,
			user_id,
			role_tm,
			taskid );
    return exec_delete_sql(sqlstr, KEY_NOFIND_ERR);
}

int Ctask::update( DEFAULT_ARGS,  uint32_t taskid, uint32_t buf_len, char *svr_buf, uint32_t flag)
{
    if (buf_len>TASK_BUF_LEN  ) return   NO_DEFINE_ERR;
    char buf_mysql[mysql_str_len(TASK_BUF_LEN )];
    set_mysql_string(buf_mysql, svr_buf , buf_len );
    GEN_SQLSTR(sqlstr, "update %s set flag=%u, svr_buf='%s' ,opt_time=%u where user_id=%u and area_id=%u and role_tm=%u and taskid=%u ", 
			get_table_name(user_id), flag,buf_mysql, 
			(uint32_t)time(0),
			area_id,
			user_id,
			role_tm,
			taskid );
    return exec_delete_sql(sqlstr, KEY_NOFIND_ERR);
}


int Ctask::update_buf( DEFAULT_ARGS,  uint32_t taskid, uint32_t buf_len ,char * svr_buf )
{
	if (buf_len>TASK_BUF_LEN  ) return   NO_DEFINE_ERR;

    char buf_mysql[mysql_str_len(TASK_BUF_LEN )];
    set_mysql_string(buf_mysql, svr_buf , buf_len );
	
    GEN_SQLSTR(sqlstr, "update %s set svr_buf='%s' where user_id=%u and area_id=%u and role_tm=%u and taskid=%u ", 
			get_table_name(user_id), 
			buf_mysql,
			area_id,
			user_id,
			role_tm,
			taskid );
    return exec_delete_sql(sqlstr, KEY_NOFIND_ERR);
}

int Ctask::get_flag_list( DEFAULT_ARGS,uint32_t begin,uint32_t end, std::vector<stru_task_flag > &task_list )
{
    GEN_SQLSTR(this->sqlstr, "select taskid,flag from %s where user_id=%u and area_id=%u and role_tm=%u and taskid>=%u and taskid<= %u ",
            this->get_table_name(user_id),
			area_id,
			user_id,
			role_tm,
			begin,end );
	stru_task_flag item;
    STD_QUERY_WHILE_BEGIN_NEW(this->sqlstr,task_list);
        INT_CPY_NEXT_FIELD(item.tskid);
        INT_CPY_NEXT_FIELD(item.flag);
    STD_QUERY_WHILE_END_NEW();
}

int Ctask::get_full_list( DEFAULT_ARGS,uint32_t begin,uint32_t end, std::vector<stru_task_info > &task_list )
{
    GEN_SQLSTR(this->sqlstr, "select taskid,flag,svr_buf from %s where user_id=%u and area_id=%u and role_tm=%u and and taskid>=%u and taskid<= %u ",
            this->get_table_name(user_id),
			area_id,
			user_id,
			role_tm,
			begin,end );
	stru_task_info item;
    STD_QUERY_WHILE_BEGIN_NEW(this->sqlstr,task_list);
        INT_CPY_NEXT_FIELD(item.tskid);
        INT_CPY_NEXT_FIELD(item.flag);
        BIN_CPY_NEXT_FIELD(item.buff, sizeof(item.buff ) );
    STD_QUERY_WHILE_END_NEW();
}

