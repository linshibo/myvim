package broadcast

type broadcastCh  chan broadcast

type Listener chan broadcastCh  

type broadcast struct {
    next   chan broadcast
    v   interface{}
}

type Broadcaster struct {
    // private fields:
    Listenc chan Listener
    Sendc   chan<- interface{}
}

type Receiver struct {
    // private fields:
    bcCh chan broadcast
}

// create a new broadcaster object.
func NewBroadcaster() Broadcaster {
    listenc := make(chan Listener)
    sendc := make(chan interface{})
    go func() {
        currc := make(chan broadcast, 1)
        for {
            select {
            case v := <-sendc:
                if v == nil {
                    currc <- broadcast{}
                    return
                }
                c := make(chan broadcast, 1)
                b := broadcast{next: c, v: v}
                currc <- b
                currc = c
            case r := <-listenc:
                r <- currc
            }
        }
    }()
    return Broadcaster{
        Listenc: listenc,
        Sendc:   sendc,
    }
}

// start listening to the broadcasts.
func (b Broadcaster) Listen() Receiver {
    c := make(Listener, 0)
    b.Listenc <- c
    return Receiver{<-c}
}

// broadcast a value to all listeners.
func (b Broadcaster) Write(v interface{}) { b.Sendc <- v }

// read a value that has been broadcast,
// waiting until one is available if necessary.
func (r *Receiver) Read() interface{} {
    b := <-r.bcCh
    v := b.v
    r.bcCh <- b
    r.bcCh = b.next
    return v
}
