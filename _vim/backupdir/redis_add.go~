package main

import (
    "bytes"
    "fmt"
    "github.com/garyburd/redigo/redis"
    "math/rand"
    "os"
    "time"
)

func randInt(min int, max int) int {
    rand.Seed(time.Now().UTC().UnixNano())
    return min + rand.Intn(max-min)
}
func randomString(l int) string {
    var result bytes.Buffer
    var temp string
    for i := 0; i < l; {
        if string(randInt(65, 90)) != temp {
            temp = string(randInt(65, 90))
            result.WriteString(temp)
            i++
        }
    }
    return result.String()
}

func main() {
    rand.Seed(time.Now().UTC().UnixNano())
    pool := &redis.Pool{
        MaxIdle:     3,
        IdleTimeout: 240 * time.Second,
        Dial: func() (redis.Conn, error) {
            c, err := redis.Dial("tcp", "127.0.0.1:6379")
            if err != nil {
                fmt.Println("Failed connect redis", err)
                os.Exit(-1)
            }
            return c, err
        },
    }
    for i := 0; i < 5; i++ {
        for j := 0; j < 10000; j++ {
            _, err := pool.Get().Do("SET", randomString(16), rand.Intn(1000))
            if err != nil {
                fmt.Println(err)
            }else{
                fmt.Println("succ ", j)
            }
        }
        time.Sleep(1);
    }
}
