package main

import (
    "fmt"
    "log"
    "math/rand"
    "net/http"
    //"time"
    "runtime"
    "os"
    //"runtime/pprof"
)

// Deal的定义
type DealTiny struct {
    Dealid    int32
    Classid   int32
    Mttypeid  int32
    Bizacctid int32
    Isonline  bool
    Geocnt    int32
}

func main() {
    const SIZE = 500000 // 50万
    m := make(map[int32]DealTiny, SIZE)
    for i := 0; i < SIZE; i++ { // 把数据放进内存
        m[rand.Int31()] = DealTiny{}
    }
    runtime.GOMAXPROCS(3)
    //go func(){
        //for {
            //if f, err := os.Create("game_server.memprof"); err != nil {
                //log.Printf("record memory profile failed: %v", err)
            //} else {
                //runtime.GC()
                //pprof.WriteHeapProfile(f)
                //f.Close()
                //log.Print("record memory profile")
            //}
            //time.Sleep(30 * time.Second) // Give GC time to run
        //}
    //}()
    //go func(){
        //for {
            //n := rand.Intn(4096) + 1024
            //_ = make([]int, n)
            ////fmt.Println("make")
            ////time.Sleep(1 * time.Second) // Give GC time to run
        //}
    //}()

    fmt.Println("GODEBUG:", os.Getenv("GODEBUG"))
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        // 模拟内存分配，做一些计算
        n := rand.Intn(4096) + 1024
        buffer := make([]int, n)
        for i := 0; i < n; i++ {
            buffer[i] = rand.Intn(1024)
        }
        c := 0
        for i := 0; i < n; i++ {
            if buffer[i] > 512 {
                c += 1
            }
        }
        //fmt.Println(w, "n: %d, more than 512 count: %d", n, c)
        fmt.Fprintf(w, "n: %d, more than 512 count: %d", n, c)
    })
    log.Fatal(http.ListenAndServe(":8080", nil))
}
