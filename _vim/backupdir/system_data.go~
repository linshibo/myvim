package main

import (
	"encoding/json"
    //"strconv"
    //"strings"
    "io/ioutil"
    "sanguo/base/log"
)

//TODO 
type chapterInfo struct {
	AllCGuanQias []int
	// simple_guanqia can play again
	AllSGuanQias []int
	ChallengeSid	int
	UnlockArms	[]int
	UnlockHeros []int
    NameStr string
}

type chapterGuanQiaInfo struct {
	Allsimpleguanqias []int
	guanqiaTask int
}

type ScoreReward struct {
	Value      int
	RewardType int
	Prob       int
	Score      int
}

type TongguanReward struct {
	Value      int
	RewardType int
	Prob       int
}

type guanqiaInfo struct {
	AllDanboIds    []int
	TongguanReward []TongguanReward
	ScoreReward    []ScoreReward
	MaxScore       int
}

type scatteredGuanqiaInfo struct {
	AllDanboIds    []int
	ScoreReward    []ScoreReward
	MaxScore       int
}

type bossGuanQiaInfo struct {
	ContentGuanQiaId  int
	NextBossGuanQiaId int
	NeedFinishTimes   int
}

type danboInfo struct {
	AllUnitSeq   []int
	AllUnitCount int
}

type armInfo struct {
	OriginalId   int
	QualityLevel int
	Damage       int
	Hp           int
	DamageRatio  int
	StarsNeed    int
	SellType	int
	SellPrice	int
	CanPick     int
}

type heroInfo struct {
	OriginalId      int
	QualityLevel    int
	Damage          int
	DamageRatio     int
	StarsNeed       int
	SkillRoundCount int
	SellType	int
	SellPrice	int
	CanPick	    int
}

type enemyUnit struct {
	Damage int
	Hp     int
}

type quest struct {
	PreId          int
	Unlocklevel    int
	Actiontype     int
	Value          int
	Actionparam    int
	Actionparam2   int
	Refreshtype    int
	Rewardtype     int
	Rewardcount    int
	Maxlevel       int
	Needpushreward int
}

const (
	LevelNum = 10
	QuestNum = 200
)

var (
	ChapterInfo        map[int]chapterInfo
	ChapterGuanQiaInfo map[int]chapterGuanQiaInfo
	GuanqiaInfo        map[int]guanqiaInfo
	DanboInfo          map[int]danboInfo
	ArmInfo            map[int]armInfo
	HeroInfo           map[int]heroInfo
	EnemyUnit          map[int]enemyUnit
	Quest              map[int]quest
	BossGuanQiaInfo    map[int]bossGuanQiaInfo
	//ChallengeGuanqiaInfo    map[int]scatteredGuanqiaInfo
	
	FinalChapter       int

	UserFightQuestIndex [LevelNum + 1][QuestNum]int
	UserFightQuestCount [LevelNum + 1]int

	//[chapter] simple_guanqia
	ChapterBoss []int
	//map[simple_guanqia]bool  as set
	SimpleNeedRecord map[int]bool
	// chapter_guanqia  response  simple_guanqia
	C_Sguanqia map[int]int
	
	UnlockArms map[int]bool
	
	TrueHeroGuanqia    map[int]bool
)

var (
	ArmIndex               [ArmIdNum]int
	ArmStarAndQualityCount [StarNum + 1][QualityNum + 1]int
	ArmStarAndQualityBegin [StarNum + 1][QualityNum + 1]int
	InitAllArmId           [ArmIdNum]int

	ArmOriginalId [ArmOrigIdNum][QualityNum + 1]int

	HeroIndex        [HeroIdNum]int
	HeroQualityCount [QualityNum + 1]int
	HeroQualityBegin [QualityNum + 1]int
	InitAllHeroId    [HeroIdNum]int

	HeroOriginalId [HeroOrigIdNum][QualityNum + 1]int
)

func LoadData(filename string, item interface{})error{
    content, err := ioutil.ReadFile(filename)
    if err != nil {
        return err
    }
    err = json.Unmarshal([]byte(content), item)
    if err != nil {
        return err 
    }
    return nil
}

func main() {
	/************************** Load chapterInfo *************************/
    
    //type chapterInfoSlice struct{
        //chapterInfos []chapterInfo
    //}
    //var chapterInfos chapterInfoSlice
    chapterInfos:=make( []chapterInfo, 0)
    err:=LoadData("chapterInfo.cfg", &(chapterInfos))
    if err != nil {
        log.Error(err)
        return  
    }
    log.Debug(chapterInfos)
    for i:=range chapterInfos{
        //log.Debug("AllCGuanQias", (chapterInfos[i].AllCGuanQias))
        //log.Debug("UnlockArms", (chapterInfos[i].UnlockArms))
        log.Debug(chapterInfos[i].NameStr)
    }
	/************************** Load ChapterCGuanQiaInfo *****************/
	
	/************************** Load guanqiaInfo *************************/

	
	/************************** Load challenge guanqiaInfo *************************/

	/************************** Load DanboInfo ***************************/
	//log.Debug("Begin load danbo info")
	/************************** Load ArmInfo *****************************/
	/************************** Load HeroInfo **********************************/

	/****************************** Load EnemyUnit ******************************/
	/******************************Load Quest***************************************************/
	/****************************** Load BossGuanQiaInfo ******************************/
	/************************* Load FightQuest Info ************************/
	return 
}

/****************** Oid *******************/
const (
	HeroIdNum     = 500
	HeroOrigIdNum = 100
	HeroOidNum    = 100

	ArmIdNum     = 1000
	ArmOrigIdNum = 500
	ArmOidNum    = 500

	StarNum    = 4
	QualityNum = 5
)

var (
	ArmOidIndex               [ArmOidNum]int
	ArmOidStarAndQualityCount [StarNum + 1][QualityNum + 1]int
	ArmOidStarAndQualityBegin [StarNum + 1][QualityNum + 1]int
	InitAllArmOid             [ArmOidNum]int
	ArmMinIdOfOid             [ArmOidNum]int

	HeroOidIndex        [HeroIdNum]int
	HeroOidQualityCount [QualityNum + 1]int
	HeroOidQualityBegin [QualityNum + 1]int
	InitAllHeroOid      [HeroOidNum]int
	HeroMinIdOfOid      [HeroOidNum]int
)

//func InitRandomArmOid() {
	//for armid, v := range ArmInfo {
		//if v.StarsNeed != 0 {
			//ArmOriginalId[v.OriginalId][v.QualityLevel] = armid
		//}
		
		//if v.CanPick == 0 {
			//InitAllArmOid[v.OriginalId] = ArmUnGet
		//}
	//}

	//for oid := 0; oid < ArmOidNum; oid++ {
		//log.Debug("ArmOriginalId", oid, ArmOriginalId[oid])
		//for q := 0; q <= QualityNum; q++ {
			//if ArmOriginalId[oid][q] != 0 {
				//ArmMinIdOfOid[oid] = ArmOriginalId[oid][q]
				//log.Critical("ArmMinIdOfOid[oid]", oid, ArmMinIdOfOid[oid])
				//break
			//}
		//}
	//}

	//for _, id := range ArmMinIdOfOid {
		//if id == 0 {
			//continue
		//}

		//q := ArmInfo[id].QualityLevel
		//s := ArmInfo[id].StarsNeed
		//ArmOidStarAndQualityCount[s][q]++
	//}
	//log.Critical("ArmOidStarAndQualityCount", ArmOidStarAndQualityCount)

	//for star := 1; star < 5; star++ {
		//ArmOidStarAndQualityBegin[star][0] = ArmOidStarAndQualityBegin[star-1][5] + ArmOidStarAndQualityCount[star-1][5]
		//for quality := int(1); quality < 6; quality++ {
			//ArmOidStarAndQualityBegin[star][quality] = ArmOidStarAndQualityCount[star][quality-1] + ArmOidStarAndQualityBegin[star][quality-1]
		//}
	//}
	//log.Critical("ArmOidStarAndQualityBegin", ArmOidStarAndQualityBegin)

	//var i [5][6]int
	//for oid, id := range ArmMinIdOfOid {
		//if id == 0 {
			//continue
		//}
		//v := ArmInfo[id]
		//index := ArmOidStarAndQualityBegin[v.StarsNeed][v.QualityLevel] + i[v.StarsNeed][v.QualityLevel]
		//ArmOidIndex[index] = oid
		//i[v.StarsNeed][v.QualityLevel]++
	//}
	//log.Critical("ArmOidIndex", ArmOidIndex)

	////for _, arm_oid := range InitUnGetArmOidByGold {
	////	InitAllArmOid[arm_oid] = ArmUnGet
	////}
	
	//for star := 1; star < 5; star++ {
		//ArmStarAndQualityBegin[star][0] = ArmStarAndQualityBegin[star-1][5] + ArmStarAndQualityCount[star-1][5]
		//for quality := int(1); quality < 6; quality++ {
			//ArmStarAndQualityBegin[star][quality] = ArmStarAndQualityCount[star][quality-1] + ArmStarAndQualityBegin[star][quality-1]
		//}
	//}
	
	//var ii [5][6]int
	//for armid, v := range ArmInfo {
		//if v.StarsNeed == 0 {
			//continue
		//}
		//ArmIndex[ArmStarAndQualityBegin[v.StarsNeed][v.QualityLevel]+ii[v.StarsNeed][v.QualityLevel]] = armid
		//ii[v.StarsNeed][v.QualityLevel]++
	//}
	//log.Debug("ArmCount", ArmStarAndQualityCount)
	//log.Debug("ArmBegin", ArmStarAndQualityBegin)
	//log.Debug("ArmIndex", ArmIndex)
	
	//log.Critical("hzz",InitAllArmOid)
//}

//func InitRandomHeroOid() {
	//for heroid, v := range HeroInfo {
		//HeroOriginalId[v.OriginalId][v.QualityLevel] = heroid
		//if v.CanPick == 0 {
			////InitAllHeroOid[v.OriginalId] = HeroUnGet
		//}
	//}

	//for oid := 0; oid < HeroOidNum; oid++ {
		//for q := 0; q <= QualityNum; q++ {
			//if HeroOriginalId[oid][q] != 0 {
				//HeroMinIdOfOid[oid] = HeroOriginalId[oid][q]
				//log.Critical("HeroMinIdOfOid[oid]", oid, HeroMinIdOfOid[oid])
				//break
			//}
		//}
	//}

	//for _, id := range HeroMinIdOfOid {
		//if id == 0 {
			//continue
		//}
		//q := HeroInfo[id].QualityLevel
		//HeroOidQualityCount[q]++
	//}
	//log.Critical("HeroOidQualityCount", HeroOidQualityCount)

	//for quality := 1; quality < 6; quality++ {
		//HeroOidQualityBegin[quality] = HeroOidQualityCount[quality-1] + HeroOidQualityBegin[quality-1]
	//}
	//log.Critical("HeroOidQualityBegin", HeroOidQualityBegin)

	//var j [6]int
	//for oid, id := range HeroMinIdOfOid {
		//if id == 0 {
			//continue
		//}
		//v := HeroInfo[id]
		//HeroOidIndex[HeroOidQualityBegin[v.QualityLevel]+j[v.QualityLevel]] = oid
		//j[v.QualityLevel]++
	//}
	//log.Critical("HeroOidIndex", HeroOidIndex)

	//for _, hero_oid := range UnchargeInitSeenHeroOid {
		//InitAllHeroOid[hero_oid] = HeroUnchargeSeen
	//}
	
	//log.Critical("hzz",InitAllHeroOid)
//}

//func IsTrueHeroGuanqia(sid int)bool {
	//_,ok := TrueHeroGuanqia[sid]
	//return ok
//}

func init() {
	ChapterInfo = make(map[int]chapterInfo)
	ChapterGuanQiaInfo = make(map[int]chapterGuanQiaInfo)
	GuanqiaInfo = make(map[int]guanqiaInfo)
	DanboInfo = make(map[int]danboInfo)
	ArmInfo = make(map[int]armInfo)
	HeroInfo = make(map[int]heroInfo)
	EnemyUnit = make(map[int]enemyUnit)
	Quest = make(map[int]quest)
	BossGuanQiaInfo = make(map[int]bossGuanQiaInfo)
	FinalChapter = 1
	SimpleNeedRecord = make(map[int]bool)
	C_Sguanqia = make(map[int]int)
	
	TrueHeroGuanqia = make(map[int]bool)
	
	//ChallengeGuanqiaInfo = make(map[int]scatteredGuanqiaInfo)
}
