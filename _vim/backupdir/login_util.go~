package gameserver

import (
	//"errors"
	"github.com/garyburd/redigo/redis"
	"sanguo/base/log"
	"sanguo/db"
	"strconv"
	//"strings"
)

const FullPower = 10


func (user *User) LoadBossInfo() error {
	dbconn := db.Pool.Get()
	defer dbconn.Close()
	reply, err := redis.Strings(dbconn.Do("keys", "user:bossinfo:"+strconv.Itoa(user.uid)+"*"))
	if err != nil {
		log.Error("Can't get user:boss_info from redis", err)
		return err
	}
	//log.Debug("LoadBossInfo", reply)
	for i := range reply {
		//bossKey:="user:bossinfo:"+strconv.Itoa(user.uid)+":"+reply[i]
		//log.Debug(bossKey)
		reply2, err := redis.Values(dbconn.Do("HMGET", reply[i], "boss_id", "boss_max_score",
			"boss_today_max_score", "boss_count", "boss_rank", "boss_tg_count", "boss_pass", "last_boss_end_time"))
		if err != nil {
			log.Error("Can't get from redis ", reply[i], err)
			continue
		}
		index := 0

		boss := new(bossInfo)

		boss.boss_id, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_max_score, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_today_max_score, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_count, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_rank, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_tg_count, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.boss_pass, err = redis.Int(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		boss.last_boss_end_time, err = redis.Int64(reply2[index], nil)
		if err != nil {
			log.Error("Cant convert bossid to int", err, user.uid)
			continue
		}
		index++

		//boss.isConvened, err = redis.Int(reply2[index], nil)
		//if err != nil {
		//log.Error("Cant convert isConvened to int", err, user.uid)
		//continue
		//}

		user.bossInfos[boss.boss_id] = boss
	}
	log.Debug("monitor", user.uid, user.bossInfos)
	return nil
}
