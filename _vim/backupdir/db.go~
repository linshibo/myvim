package db

import (
    //"database/sql"
    //"fmt"
    //_ "github.com/Go-SQL-Driver/MySQL"
    //"errors"
    "github.com/Unknwon/goconfig"
    "github.com/garyburd/redigo/redis"
    "sanguo/base/log"
    "strconv"
    "strings"
    "time"
)

var names2uidMap map[string]int

var uid2sidMap map[int]int

func init() {
    names2uidMap = make(map[string]int)
    uid2sidMap = make(map[int]int)
}

func TryLoadUserServerid(id int) error {
    pool := redisHandler.Get()
    defer pool.Close()
    sid, err := redis.Int(pool.Do("HGET", "gateway:uid2sid", id))
    if err != nil {
        log.Error("Cant get result of keys", id, err)
        return err
    }
    log.Debug("TryLoadUserServerid ", id, sid)
    uid2sidMap[id] = sid
    return nil
}

func TryLoadUserName(name string) error {
    pool := redisHandler.Get()
    defer pool.Close()
    str, err := redis.String(pool.Do("GET", "name:"+name))
    if err != nil {
        log.Error("Cant get result of keys", "name:"+name, err)
        return err
    }
    id, err := strconv.Atoi(str)
    if err != nil {
        log.Error(err)
        return err
    }
    names2uidMap[name] = id
    return nil
}

func GetServerid(uid int) int {
    log.Debug("GetServerid")
    id, ok := uid2sidMap[uid]
    if ok == true {
        return id
    }
    err := TryLoadUserServerid(uid)
    if err != nil {
        log.Error(err)
        return 0
    }
    log.Debug("GetServerid1")
    id, ok = uid2sidMap[uid]
    if ok == true {
        return id
    }
    log.Debug("GetServerid2")
    return 0

}

func GetUid(name string) int {
    id, ok := names2uidMap[name]
    if ok {
        return id
    }
    TryLoadUserName(name)
    id, ok = names2uidMap[name]
    if ok {
        return id
    }
    return 0
}

func Loaduid2sid() {
    pool := redisHandler.Get()
    defer pool.Close()
    results, err := redis.Strings(pool.Do("HGETALL", "gateway:uid2sid"))
    if err != nil {
        log.Error("Cant get result of keys gateway:uid2sid", err)
        return
    }
    for i := 0; i < len(results)/2; i++ {
        id, err := strconv.Atoi(results[i*2])
        if err != nil {
            log.Error(err)
            continue
        }
        sid, err := strconv.Atoi(results[i*2+1])
        if err != nil {
            log.Error(err)
            continue
        }
        uid2sidMap[id] = sid
    }
}

func LoadNames() {
    pool := redisHandler.Get()
    defer pool.Close()
    reply, err := redis.Values(pool.Do("KEYS", "name:*"))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return
    }
    results, err := redis.Strings(pool.Do("MGET", reply...))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return
    }
    namesStr, err := redis.Strings(reply, nil)
    if err != nil {
        log.Error("Cant convert result to string", err)
        return
    }
    for i := 0; i < len(results); i++ {
        str, err := redis.String(results[i], nil)
        if err != nil {
            log.Error(err)
            continue
        }
        //ids := strings.Split(str, ":")
        //if len(ids) < 2 {
            //log.Error("split err", str)
            //continue
        //}
        id, err := strconv.Atoi(str)
        if err != nil {
            log.Error(err)
            continue
        }
        //names := strings.Split(namesStr[i], ":")
        //if len(names) < 2 {
        //log.Error("split err", namesStr)
        //continue
        //}
        if id != 0 {
            names2uidMap[namesStr[i]] = id
            log.Debug("monitor ", namesStr[i], id)
        }
    }
}

var redisHandler *redis.Pool

var config struct {
    redisHost string
}

type ServerID struct {
    Host string
    ID   int
}

func GetServers() ([]ServerID, error) {
    pool := redisHandler.Get()
    defer pool.Close()
    //加载服务器id host
    results, err := redis.Strings(pool.Do("HGETALL", "gateway:server_host"))
    if err != nil {
        log.Error("Cant get result of keys gateway:server_host:* ", err)
        return nil, err
    }
    servs := make([]ServerID, 0)
    for i := 0; i < len(results)/2; i++ {
        var tmp ServerID
        tmp.ID, err = strconv.Atoi(results[i*2])
        if err != nil {
            log.Error(err)
            continue
        }
        tmp.Host, err = redis.String(results[i*2+1], nil)
        if err != nil {
            log.Error(err)
            continue
        }
        log.Debug("monitor load Servers ", tmp.ID, tmp.Host)
        servs = append(servs, tmp)
    }
    return servs, nil
}

func InitDB(cfg *goconfig.ConfigFile) {
    config.redisHost = cfg.MustValue("", "RedisHost", "")
    redisHandler = &redis.Pool{
        MaxIdle:     3,
        IdleTimeout: 240 * time.Second,
        Dial: func() (redis.Conn, error) {
            c, err := redis.Dial("tcp", config.redisHost)
            if err != nil {
                log.Error("Failed connect redis", err)
                //os.Exit(-1)
            }
            return c, err
        },
    }
    LoadNames()
    Loaduid2sid()
}
