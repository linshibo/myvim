package gameserver

import (
	"sanguo/base/log"
	"sanguo/db"
	//. "sanguo/systemdata"
	. "sanguo/base/util"
	"strconv"
	"time"
)

func (sess *Session) Kickout() {
	defer func() {
		if err := recover(); err != nil {
			log.Error("Panic", err)
		}
	}()

	sess.connect.Close()
}

func (this *User) GetUidUsedInDB() string {
	return "user:" + strconv.Itoa(this.uid)
}

func (this *User) GetLevel() int {
	return this.level
}

func (this *User) GetChargeNum() int {
	return this.total_charge
}

func (this *User) Trace(v ...interface{}) {
	log.Trace(this.uid, v)
}

func (this *User) Debug(v ...interface{}) {
	log.Debug(this.uid, v)
}

func (this *User) Info(v ...interface{}) {
	log.Info(this.uid, v)
}

func (this *User) Warn(v ...interface{}) {
	log.Warn(this.uid, v)
}

func (this *User) Error(v ...interface{}) {
	log.Error(this.uid, v)
}

func (this *User) Critical(v ...interface{}) {
	log.Critical(this.uid, v)
}

/*
func (sess *Session) ChangeName(newname string) error {
	dbconn := db.Pool.Get()
	defer dbconn.Close()
	_, err := dbconn.Do("RENAME", sess.user.GetUidUsedInDB(), newname)
	if err != nil {
		return err
	}

	_, err = dbconn.Do("HSET", sess.user.uid, "name", newname)
	if err != nil {
		return err
	}

	sess.user.name = newname

	return nil
}

func (sess *Session) ChangePhoto(p string) error {
	dbconn := db.Pool.Get()
	defer dbconn.Close()
	_, err := dbconn.Do("HSET",sess.user.GetUidUsedInDB(), "photo", p)
	if err != nil {
		return err
	}

	sess.user.photo = p

	return nil
}*/

func (sess *Session) InitStrangerTimeEveryDay() error {
	sess.user.stranger_time = 0
	dbconn := db.Pool.Get()
	defer dbconn.Close()

	_, err := dbconn.Do("HSET", sess.user.GetUidUsedInDB(), "stranger_time", 0)
	return err
}

func (sess *Session) AddStrangerTime() error {

	dbconn := db.Pool.Get()
	defer dbconn.Close()
	sess.user.stranger_time++
	sess.user.Trace("In AddStrangerTime", sess.user.stranger_time)
	_, err := dbconn.Do("HSET", sess.user.GetUidUsedInDB(), "stranger_time", sess.user.stranger_time)
	return err
}

/**********************************************************************************************************
				Below is ok
**********************************************************************************************************/
const (
	EventType_StoneDouble = 1
	EventType_StoneTriple = 2
	EventType_GreenTwice  = 3
	EventType_BlueTwice   = 4
)

func (this *User) AddEventCount() (err error) {
	this.event_count++
	dbconn := db.Pool.Get()
	defer dbconn.Close()

	_, err = dbconn.Do("HSET", this.uid, "event_count", this.event_count)
	if err != nil {
		return err
	}
	return nil
}

var EventPro = [5]int{0, 40, 55, 85, 100}

func (this *User) EventHappen() (err error) {
	if time.Now().Unix() < this.event_end_time {
		return nil
	}

	happen_flag := IsProbabilityHappen(15)
	if !happen_flag {
		return nil
	}

	num := GetRandomNumOf100()
	var id int
	for i := 1; i < 5; i++ {
		if num < EventPro[i] {
			id = i
			break
		}
	}

	this.event_id = id
	this.event_count = 0
	time_4_flag := IsProbabilityHappen(50)
	if time_4_flag {
		this.event_end_time = time.Now().Unix() + 60*60*4
		this.event_end_count = 8 + GetRandomNum(8)
	} else {
		this.event_end_time = time.Now().Unix() + 60*60
		this.event_end_count = 20 + GetRandomNum(10)
	}

	dbconn := db.Pool.Get()
	defer dbconn.Close()
	_, err = dbconn.Do("HMSET", this.uid, "event_id", this.event_id, "event_count", this.event_count, "event_end_time", this.event_end_time, "event_end_count", this.event_end_count)
	if err != nil {
		return err
	}
	return nil
}

func (this *User) IsSmashStoneDouble() bool {
	if this.event_id != EventType_StoneDouble {
		return false
	}
	if this.event_count > this.event_end_count {
		return false
	}
	if this.event_end_time < time.Now().Unix() {
		return false
	}

	return true
}

func (this *User) IsSmashStoneTriple() bool {
	if this.event_id != EventType_StoneTriple {
		return false
	}
	if this.event_count > this.event_end_count {
		return false
	}
	if this.event_end_time < time.Now().Unix() {
		return false
	}

	return true
}

func (this *User) IsGreenTwice() bool {
	if this.event_id != EventType_GreenTwice {
		return false
	}
	if this.event_count > this.event_end_count {
		return false
	}
	if this.event_end_time < time.Now().Unix() {
		return false
	}

	return true
}

func (this *User) IsBlueTwice() bool {
	if this.event_id != EventType_BlueTwice {
		return false
	}
	if this.event_count > this.event_end_count {
		return false
	}
	if this.event_end_time < time.Now().Unix() {
		return false
	}

	return true
}

func (this *User) GetEventLeftTime() int64 {
	num := this.event_end_time - time.Now().Unix()
	if num < 0 {
		num = 0
	}
	return num
}

func (this *User) GetEventLeftCount() int {
	num := this.event_end_count - this.event_count
	if num < 0 {
		num = 0
	}
	return num
}

func (this *User) ProcessEventHappen() (err error) {
	if this.card_count%5 == 0 {
		err = this.EventHappen()
		if err != nil {
			this.Error("Failed EventHappen", err)
			return err
		}
	}
	return nil
}
