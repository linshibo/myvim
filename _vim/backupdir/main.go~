package main

import (
	"sanguo/base/log"
	"sanguo/gameserver"
	"io/ioutil"
	"os"
	"sanguo/config"
	"fmt"
	"sanguo/db"
	"runtime/pprof"
	"runtime"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Wrong input, please input ' ./sanguo sanguo.conf' ")
		return
	}

	content, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		fmt.Println("Failed read configure file",os.Args[1], err)
		return 
	}
	
	if !config.Load(content) {
		fmt.Println("Failed load config")
		return 
	}
	
	runtime.GOMAXPROCS(8)

	log.SetLevel(config.Config.LogLevel)
	
	filew := log.NewFileWriter(config.Config.LogName, true)
	err = filew.StartLogger()
	if err != nil {
		fmt.Println("Failed start log",err)
		return
	}

	if config.Config.ProfEnable {
		f_cpu, err := os.Create(config.Config.CPUProfFile)
		if err != nil {
			fmt.Println("Failed open CPUProfile",err)
			return
		}
		
		err = pprof.StartCPUProfile(f_cpu)
		if err != nil {
			fmt.Println("Failed startCPUProfile",err)
			return
		}
		defer pprof.StopCPUProfile()
		
		f_mem, err := os.Create(config.Config.MemProfFile)
		if err != nil {
			fmt.Println("Failed open MemProfile",err)
			return
		}
		pprof.WriteHeapProfile(f_mem)
		defer f_mem.Close()		
	}
	
	if !db.Init(){
		log.Error("Failed Init Redis",err)
		return 
	}

	//go GM.Start()
	
	err = gameserver.PlayerManager.LoadAllPlayerInTheServerStart()
	if err != nil {
		fmt.Println("Failed LoadAllPlayer",err)
		os.Exit(-1)
	}else {
		fmt.Println("Load OK")
	}

	//go pp.Start()
	
	//if !gameserver.StartGameManage() {
	//	log.Error("Failed StartGameManage")
	//	return
	//}

	go gameserver.HubStart()
	
	var server gameserver.GameServer
	server.Host = config.Config.HostAddr
	server.Start()
}

