package main

import (
    "GameHub/asynserver"
    "GameHub/db"
    "GameHub/hub"
	//"GameHub/pprof"
    "fmt"
    "github.com/Unknwon/goconfig"
    "net"
    "os"
    "sanguo/base/log"
    "time"
)

func autoChangeLogFile() {
    day := time.Now()
    logname := fmt.Sprintf("log-%04d%02d%02d", day.Year(), day.Month(), day.Day())
    filew := log.NewFileWriter(logname, true)
    filew.StartLogger()
    nextDay := time.Now().AddDate(0, 0, 1)
    nextDayBegin := time.Date(nextDay.Year(), nextDay.Month(), nextDay.Day(), 0, 0, 0, 0, time.Local)
    select {
    case <-time.After(nextDayBegin.Sub(time.Now())):
        go autoChangeLogFile()
    }
}

func main() {
    cfg, err := goconfig.LoadConfigFile("bench.conf")
    if err != nil {
        fmt.Println("Failed load config file bench.conf", err)
        return
    }
    host, err := cfg.GetValue("", "BindAddr")
    if err != nil {
        fmt.Println(err)
        return
    }

    //初始化log
    logLevel := cfg.MustInt("", "LogLevel", 0)
    log.SetLevel(logLevel)
    go autoChangeLogFile()
    go func() {
        //for {
            //select {
            //case <-time.After(10*time.Second):
                //pprof.LookUp("start cpuprof")
                //time.Sleep(5*time.Second)
                ////pprof.LookUp("lookup heap")
                ////pprof.LookUp("lookup threadcreate")
                ////pprof.LookUp("lookup block")
                ////pprof.LookUp("lookup memprof")
                //pprof.LookUp("stop cpuprof")
            //}
        //}
    }()

    db.InitDB(cfg)

    //初始化服务器列表
    servs, err := db.GetServers()
    if err != nil {
        log.Error(err.Error())
    }
    hub.CM.Init(servs)

    tcpAddr, err := net.ResolveTCPAddr("tcp4", host)
    if err != nil {
        log.Error(err.Error())
        os.Exit(-1)
    }
    fmt.Println("Server Start")

    log.Debug("\n/-----------------------------------/\n        Server Start\n/-----------------------------------/\n")
    var callback asynserver.Callback
    callback.GetSizeCallback = hub.GetSizeCallback
    callback.MessageCallback = hub.MessageCallback
    callback.IPCMessageCallback = hub.MessageCallback
    callback.CloseCallback = hub.CloseCallback
    callback.Host = tcpAddr.String()
    asynserver.StartServer(callback)
}
