snippet fun
	func ${1:funcName}(${2:param})${3:retType}{

	}
snippet if
	if ${1:/* condition */} {
	}
snippet ife 
	if ${1:/* condition */} {
	}else{
	}
snippet eif
	else if ${1:/* condition */}{
		${2:/*code*/}
	}
snippet todo
	/*TODO:${1:something}*/
snippet ie 
	if	err != nil {
		log.Error(sess.user.uid, "${1:something}:", err)
	}
snippet loop
	for i := range ${1:slice}{
	}
snippet for
	for ${1:k}, ${2:v} := range ${3:map}{
	}
snippet sw
	switch ${1:type}{
    case ${2:case}:
	}
snippet sl
	select {
	case ${1:type}:
	}
snippet mks
	make([]${1:type})
snippet mkm
	make(map[${1:type}]${2:type})
snippet in
	interface{}
snippet mkbk
	back := make(map[string]interface{})
snippet im
	import (
		"${1:package}"
	)
snippet sp
	fmt.Sprintf("${1:s}", ${2:var})}"}")
snippet log
	log.Debug(${1:sess.user.uid}, "${2:value}")
snippet elog
	log.Error(${1:sess.user.uid}, "${2:value}")
snippet tlog
	log.Trace("${1:value}")
snippet wlog
	log.Warn("${1:value}")
snippet flog
	log.Fatal("${1:value}")
snippet vars
    var(
	)
snippet co
	const(
	)
snippet st
	type ${1:name} struct{
	}
snippet hd
	/*=========================================================================       
	* 
	* 		Author: francisco 
	*		Created:  `strftime("%Y-%m-%d %H:%M:%S")` 
	* 
	*		Description: ${1:} 
	* 
	* ========================================================================= 
	*/ 
