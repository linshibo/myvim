snippet cc
	/*${1:comment}*/
snippet hd
	/*=========================================================================       
	* 
	*		Filename: `expand("%:t")` 
	* 
	* 		Author: francisco 
	*		Created:  `strftime("%Y-%m-%d %H:%M:%S")` 
	* 
	*		Description: ${1:} 
	* 
	* ========================================================================= 
	*/ 
snippet ih
	#include "`expand('%:t:r')`.h"
snippet ihpp
	#include "`expand('%:t:r')`.hpp"
snippet ff 
	#ifndef `toupper(substitute(expand("%:t"),'\.','_',"g"))` 
	#define `toupper(substitute(expand("%:t"),'\.','_',"g"))`

	${1:/*code*/}

	#endif /*`toupper(substitute(expand("%:t"),'\.','_',"g"))`*/
snippet is
	#include <${1:iostream}>
snippet in
	#include "${1:`Filename("$1.h")`}"${2}
snippet de
	#define 
snippet ife 
	if(${1:/* condition */}) {
		${2:/*code*/}
	}else {
		${3:/*else*/}
	}
snippet eif
	else if(${1:/* condition */}){
		${2:/*code*/}
	}
snippet dowhile
	do {
		${2:/* code */}
	} while (${1:/* condition */});
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet loop
	for(uint32_t ${1:loop} = ${2:0}; ${3:$1}<${4:count}; ${5:++$1}) {
		${5:/* code */}
	}
snippet switch
	switch(${1:condition}){
		case ${2:value}:
			break;
		default:
			break;
	}
snippet case
	case ${1:value}:
	break;
snippet olf 
	int cli_${1:request}(Csprite *p, Cmessage* c_in)
	{
		cli_${2:$1}_in *p_in= P_IN;
		cli_${3:$1}_out out;
		return 0;
	}
snippet dbf 
	int Croute_func::db_proto_${1:request}(DEAL_FUNC_ARG){
		db_proto_${2:$1}_in *p_in = P_IN;
		db_proto_${3:$1}_out *p_out = P_OUT;
		return ret;
	}
snippet func
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
snippet print
	printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
snippet log
	LOG(DEBUG, "${1:content}");
snippet dlog
	LOG(DEBUG, "${1:content}");
snippet ilog
	LOG(INFO, "${1:content}");
snippet wlog
	LOG(WARN, "${1:content}");
snippet elog
	LOG(ERROR, "${1:content}");
snippet u64
	uint64_t
snippet u32
	uint32_t
snippet u16
	uint16_t
snippet u8
	uint8_t
snippet nu
	NULL
snippet pi
	p_in
snippet po
	p_out
snippet PI
	P_IN
snippet PO
	P_OUT
snippet todo
	/*TODO:${1:something}*/
