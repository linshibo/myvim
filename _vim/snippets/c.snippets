snippet cc
	/*${1:comment}*/
snippet cp
	// Copyright (c) 2014-2017 Agora.io, Inc.
	// cloud-platform@agora.io
	//
snippet hd
	/*=========================================================================       
	* 
	*		Filename: `expand("%:t")` 
	* 
	* 	Author: linshibo 
	*		Created:  `strftime("%Y-%m-%d %H:%M:%S")` 
	* 
	*		Description: ${1:} 
	* 
	* ========================================================================= 
	*/ 
snippet ih
	#include "`expand('%:t:r')`.h"
snippet ihpp
	#include "`expand('%:t:r')`.hpp"
snippet ff 
	#ifndef `toupper(substitute(expand("%:t"),'\.','_',"g"))` 
	#define `toupper(substitute(expand("%:t"),'\.','_',"g"))`

	${1:/*code*/}

	#endif /*`toupper(substitute(expand("%:t"),'\.','_',"g"))`*/
snippet is
	#include <${1:iostream}>
snippet in
	#include "${1:`Filename("$1.h")`}"${2}
snippet de
	#define 
snippet ife 
	if (${1:/* condition */}) {
		${2:/*code*/}
	} else {
		${3:/*else*/}
	}
snippet eif
	else if(${1:/* condition */}){
		${2:/*code*/}
	}
snippet loop
	for(uint32_t i = 0; i < ${1:count}; ++i) {
	}
snippet switch
	switch(${1:condition}){
		case ${2:value}:
			break;
		default:
			break;
	}
snippet log
	LOG2(Debug, "${1:content}");
snippet ilog
	LOG2(Info, "${1:content}");
snippet wlog
	LOG2(Warn, "${1:content}");
snippet elog
	LOG2(Error, "${1:content}");
snippet rcast 
	reinterpre_cast<${1:type}>(${2:content});
snippet scast 
	static_cast<${1:type}>(${2:content});
snippet ccast 
	const_cast<${1:type}>(${2:content});
snippet u64
	uint64_t
snippet u32
	uint32_t
snippet u16
	uint16_t
snippet u8
	uint8_t
snippet nu
	NULL
snippet todo
	// TODO(${1:fixme by linshibo})
snippet nm
	namespace agora {
	namespace ${1:test} {
	}  // namespace ${2:$1}
	}  // namespace agora
