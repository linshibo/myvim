package db

import (
    "database/sql"
    //"fmt"
    _ "github.com/Go-SQL-Driver/MySQL"
    "github.com/Unknwon/goconfig"
    "github.com/garyburd/redigo/redis"
    "sanguo/base/log"
    "strconv"
    "time"
)

var names2uidMap map[string]int

var uid2sidMap map[int]int

func init(){
    names2uidMap=make(map[string]int)
    uid2sidMap=make(map[int]int)
}

func TryLoadUserServerid(id int)error{
    reply, err := redisHandler.Get().Do("HGET", id)
    if err != nil {
        log.Error("Cant get result of keys", id, err)
        return err
    }
    sid, err := redis.Int(reply, nil)
    if err != nil {
        log.Error(err)
        return err
    }
    uid2sidMap[id]=sid
    return nil
}
func TryLoadUserName(name string)error{
    reply, err := redisHandler.Get().Do("KEYS", "name:"+name)
    if err != nil {
        log.Error("Cant get result of keys", "name:"+name, err)
        return err
    }
    uid, err := redis.Int(reply, nil)
    if err != nil {
        log.Error(err)
        return err
    }
    names2uidMap[name]=uid
    return nil
}

func GetServerid(uid int) int {
    id, ok := uid2sidMap[uid]
    if ok {
        return id 
    }
    err:=TryLoadUserServerid(uid)
    if err != nil {
        return 0
    }
    id, ok = uid2sidMap[uid]
    if ok {
        return id 
    }
    return 0

}

func GetUid(name string) (int) {
    id, ok := names2uidMap[name]
    if ok {
        return id 
    }
    TryLoadUserName(name)
    id, ok = names2uidMap[name]
    if ok {
        return id 
    }
    return 0
}

func LoadServers() {
    reply, err := redis.Values(redisHandler.Get().Do("HGETALL", "gateway:uid2sid"))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return
    }
    results, err := redis.Strings(reply, nil)
    if err != nil {
        log.Error("Cant convert result to string", err)
        return
    }
    for i := 0; i < len(results)/2; i++ {
        id, err := strconv.Atoi(results[i*2])
        if err != nil {
            log.Error(err)
            continue
        }
        sid, err := strconv.Atoi(results[i*2+1])
        if err != nil {
            log.Error(err)
            continue
        }
        uid2sidMap[id] = sid
    }
}

func LoadNames() {
    reply, err := redis.Values(redisHandler.Get().Do("KEYS", "name:*"))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return
    }
    namesStr, err := redis.Strings(reply, nil)
    if err != nil {
        log.Error("Cant convert result to string", err)
        return
    }
    namesInterface:=make([]interface{}, 0)
    for i:=range namesStr{
        namesInterface=append(namesInterface, namesStr[i])
    }
    reply2, err := redis.Values(redisHandler.Get().Do("MGET", namesInterface...))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return
    }
    results, err := redis.Strings(reply2, nil)
    if err != nil {
        log.Error("Cant convert result to string", err)
        return
    }
    for i := 0; i < len(results); i++ {
        str, err := redis.String(results[i], nil)
        if err != nil {
            log.Error(err)
            continue
        }
        id, err := strconv.Atoi(str)
        if err != nil {
            log.Error(err)
            continue
        }
        if id != 0 {
            names2uidMap[namesStr[i]] = id
        }
    }
}

var redisHandler *redis.Pool
var mysqlHandler *sql.DB
var config struct {
    dbUser, dbHost, dbPasswd, dbDatabase, redisHost string
}

type ServerID struct {
    Host string
    ID   int
}

func GetServers() ([]ServerID, error) {
    //加载服务器id host
    reply, err := redis.Values(redisHandler.Get().Do("HGETALL", "gateway:server_host:*"))
    if err != nil {
        log.Error("Cant get result of keys", err)
        return nil, err
    }
    results, err := redis.Strings(reply, nil)
    if err != nil {
        log.Error("Cant convert result to string", err)
        return nil, err
    }
    servs := make([]ServerID, 0)
    for i := 0; i < len(results)/2; i++ {
        var tmp ServerID
        tmp.ID, err = strconv.Atoi(results[i*2])
        if err != nil {
            log.Error(err)
            continue
        }
         tmp.Host, err = redis.String(results[i*2+1], nil)
        if err != nil {
            log.Error(err)
            continue
        }
        servs = append(servs, tmp)
    }
    return servs, nil
}

//func GetServers() ([]ServerID, error) {
    //var err error
    //mysqlHandler, err = sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8", config.dbUser, config.dbPasswd, config.dbHost, config.dbDatabase))
    //if err != nil {
        //log.Error("mysql conn error\n")
        //return nil, err
    //}
    //defer mysqlHandler.Close()
    //err = mysqlHandler.Ping()
    //if err != nil {
        //log.Error("mysql ping error\n")
        //return nil, err
    //}
    //sqlStr := "select id, addr from servers"
    //rows, err := mysqlHandler.Query(sqlStr)
    //if err != nil {
        //log.Error(err.Error())
        //return nil, err
    //}
    //ids := make([]ServerID, 0)
    //for rows.Next() {
        //var tmp ServerID
        //rerr := rows.Scan(&tmp.ID, &tmp.Host)
        //if rerr != nil {
            //return nil, rerr
        //}
        //ids = append(ids, tmp)
    //}
    //return ids, nil
//}

func InitDB(cfg *goconfig.ConfigFile) {
    config.redisHost = cfg.MustValue("", "RedisHost", "")
    //config.dbUser = cfg.MustValue("", "DBUser", "")
    //config.dbHost = cfg.MustValue("", "DBHost", "")
    //config.dbPasswd = cfg.MustValue("", "DBPasswd", "")
    //config.dbDatabase = cfg.MustValue("", "DBDatabase", "")
    redisHandler = &redis.Pool{
        MaxIdle:     3,
        IdleTimeout: 240 * time.Second,
        Dial: func() (redis.Conn, error) {
            c, err := redis.Dial("tcp", config.redisHost)
            if err != nil {
                log.Error("Failed connect redis", err)
                //os.Exit(-1)
            }
            return c, err
        },
    }
    LoadNames()
    LoadServers()
}
