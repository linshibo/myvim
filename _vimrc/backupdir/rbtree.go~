package algorithm
const{
    red = true,
    black = false
}
type RBTree{
    Root *RBTreeNode
}
type RBTreeNode struct {
    value interface{}
    color bool
    lchild, rchild, parent *RBTreeNode
}


func (r *aBTree)leftRotate(x *RBTreeNode){
    if x.rchild == nil{
        return
    }
    y := x.rchild

    x.rchild =  y.lchild

    if y.lchild != nil{
      y.lchild.parent=x
    }

    y.parent = x.parent

    if x.parent == nil {
        r.Root = y
    }else x == x.parent.lchild{
        x.parent.lchild=y
    }else{
        x.parent.rchild=y
    }

    y.lchild = x

    x.parent = y
}

func (r *aBTree)rightRotate(y *RBTreeNode){
    if y.lchild == nil{
        return
    }
    x := y.lchild
    y.lchild =  x.rchild
    if x.rchild != nil{
        x.rchild.parent=x
    }
    x.parent = y.parent
    if y.parent == nil {
        r.Root = x
    }else y == y.parent.lchild{
        y.parent.lchild=x
    }else{
        y.parent.rchild=x
    }
    x.rchild = y
    y.parent = x
}

func (r *RBTree)RBInsert(node *RBTreeNode){
    p := r.root
    var ppre *RBTreeNode
    for ; p != nil ;{
        ppre = p
        if node.Less(p){
            p = p.lchild
        }else{
            p = p.rchild
        }
    }
    node.parent = ppre
    if  ppre == nil{
        r.root=node
    }else if node.Less(q){
        q.lchild = node
    }else{
        q.rchild = node
    }
    node.lchild = nil
    node.color = red
    r.RBInsertFixup(node)
}

func (r *RBTree)RBInsertFixup(node *RBTreeNode){
    for ;node.parent.color==red;{
        if node.parent == node.parent.parent.left{
            uncle:=node.parent.parent.right
            if uncle != nil && uncle.color == red{
                node.parent.color=black
                uncle.color = black
                node.parent.parent.color=red
                node = node.parent.parent
            }else if node == node.parent.right{
                node = node.parent
                r.leftRotate(node)
            }
            node.parent.color = black
            node.parent.parent.color=red
            r.rightRotate(node)
        }else{
            uncle:=node.parent.parent.left
            if uncle != nil && uncle.color == red{
                node.parent.color=black
                uncle.color = black
                node.parent.parent.color=red
                node = node.parent.parent
            }else if node == node.parent.left{
                node = node.parent
                r.rightRotate(node)
            }
            node.parent.color = black
            node.parent.parent.color=red
            r.leftRotate(node)
        }
    }
    r.root.color=black
}
